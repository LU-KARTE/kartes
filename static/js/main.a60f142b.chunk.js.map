{"version":3,"sources":["Components/Home.js","Components/SearchInput.js","Components/Search.js","Components/GeomanPage.js","App.js","utils/theme.js","index.js"],"names":["Home","props","fetchData","id","alert","fetch","then","res","json","result","foundFlag","console","log","forEach","feature","error","state","currentBaseLayerFloorNumber","this","match","params","$","document","ready","on","setState","prevstate","prevProps","prevState","snapshot","floor1Checked","floor2Checked","floor3Checked","floor4Checked","floor5Checked","mr","ChevronLeft","style","w","h","fontSize","ChevronRight","MapContainer","bounds","center","minZoom","doubleClickZoom","crs","CRS","Simple","LayersControl","position","collapsed","BaseLayer","checked","ref","baseLayerRef","name","theLayers","ImageOverlay","url","pathToImg","Component","withRouter","SearchInputField","pointerEvents","children","Search2","color","type","placeholder","value","searchTerm","onChange","handleChange","Search","useState","setError","isSearchLoaded","setSearchIsLoaded","displayResultsList","setDisplayResultsList","searchItems","setSearchItems","React","showAllFilters","setShowAllFilters","allFilters","searchTags","setSearchTags","setSearchTerm","searchResults","setSearchResults","assignPoints","stLowered","toLowerCase","replace","trim","roomID","roomType","roomFloor","searchWords","split","floorFilter","includes","points","searchWordsLength","length","i","useEffect","event","target","closest","results","JSON","parse","stringify","filter","sort","feature1","feature2","points1","points2","prevResults","width","className","onFocus","SearchInput","e","spacing","shadow","display","p","pb","size","onClick","startingHeight","in","css","flexFlow","Object","keys","map","key","filterItem","mt","colorScheme","data-filtertype","data-filtername","newFilterName","currentTarget","getAttribute","newFilterType","current","item","push","handleTagChange","slice","to","_hover","bg","GeomanPage","mapRef","useRef","floors","useDisclosure","onClose","click","isOpen","onOpen","idRef","LoadJSONData","html","pm","addControls","drawCircleMarker","drawCircle","drawMarker","drawPolyline","currentBaseLayer","layer","remove","off","ID","val","LUProperties","addLayer","m","processedLayers","layers","features","el","index","shape","_shape","coordinates","_parts","x","y","toString","processLayers","layersResult","_layers","Polyline","Polygon","findLayers","undefined","initialFocusRef","whenCreated","mapInstance","maxZoom","LayerGroup","App","bind","window","location","origin","baseUrl","0","imageName","1","2","3","4","5","exact","path","render","status","customTheme","extendTheme","colors","primary","100","200","300","400","500","600","700","800","900","rootElement","getElementById","ReactDOM","StrictMode","theme"],"mappings":"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","file":"static/js/main.a60f142b.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\nimport {ImageOverlay, LayersControl, MapContainer} from 'react-leaflet'\r\nimport {CRS} from 'leaflet';\r\nimport { withRouter } from \"react-router\";\r\nimport $ from \"jquery\";\r\nimport {Center, Flex, Spacer, Text} from \"@chakra-ui/react\";\r\nimport {ChevronLeftIcon, ChevronRightIcon} from \"@chakra-ui/icons\";\r\n\r\n\r\nconst MAXFLOOR = 5;\r\n\r\nclass Home extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentBaseLayerFloorNumber: 1\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        const id = this.props.match.params.id;\r\n        this.fetchData(id);\r\n\r\n\r\n        $(document).ready(() => {\r\n            $(\"#FloorDownIcon\").on(\"click\", () => {\r\n                if (this.state.currentBaseLayerFloorNumber > 1) {\r\n                    this.setState(prevstate => (\r\n                        {\"currentBaseLayerFloorNumber\": prevstate[\"currentBaseLayerFloorNumber\"] - 1}\r\n                    ))\r\n                }\r\n            })\r\n\r\n            $(\"#FloorUpIcon\").on(\"click\", () => {\r\n                if (this.state.currentBaseLayerFloorNumber < MAXFLOOR)\r\n                    this.setState(prevstate => (\r\n                        {\"currentBaseLayerFloorNumber\": prevstate[\"currentBaseLayerFloorNumber\"] + 1}\r\n                    ))\r\n            })\r\n        })\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        const id = this.props.match.params.id;\r\n        this.fetchData(id);\r\n    }\r\n\r\n    fetchData = id => {\r\n        if (!id) return;\r\n\r\n        alert(\"[check console] Search for room #\" + id);\r\n\r\n        fetch(\"/kartes/data.json\")\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    // just some console logs...\r\n                    let foundFlag = false;\r\n                    console.log(\"Fetched data:\");\r\n                    console.log(result);\r\n                    result[\"features\"].forEach ((feature) => {\r\n                            if (feature[\"properties\"][\"roomID\"] === id) {\r\n                                console.log(\"The requested room was found:\")\r\n                                console.log(feature);\r\n                                foundFlag = true;\r\n                            }\r\n                        }\r\n                    )\r\n                    if (!foundFlag)\r\n                        console.log(\"Room was not found.\");\r\n\r\n\r\n                },\r\n                (error) => {\r\n                    // ... some error parsing\r\n                }\r\n            )\r\n    };\r\n\r\n    render() {\r\n        // for floor changes consts... better would be to include in JSX elements directly but somewhy not working.\r\n        const floor1Checked = this.state.currentBaseLayerFloorNumber === 1;\r\n        const floor2Checked = this.state.currentBaseLayerFloorNumber === 2;\r\n        const floor3Checked = this.state.currentBaseLayerFloorNumber === 3;\r\n        const floor4Checked = this.state.currentBaseLayerFloorNumber === 4;\r\n        const floor5Checked = this.state.currentBaseLayerFloorNumber === 5;\r\n\r\n        return (\r\n            <>\r\n                <Flex mr={4}>\r\n                    <Spacer />\r\n                    <Center>\r\n                        <ChevronLeftIcon id=\"FloorDownIcon\" style={{\"cursor\": \"pointer\"}} w={8} h={8}/>\r\n                        <Text fontSize={20}>{this.state.currentBaseLayerFloorNumber}. Stāvs</Text>\r\n                        <ChevronRightIcon id=\"FloorUpIcon\" style={{\"cursor\": \"pointer\"}} w={8} h={8}/>\r\n                    </Center>\r\n                </Flex>\r\n\r\n                <MapContainer bounds={this.props.bounds} center={this.props.center} minZoom={-5} doubleClickZoom={false} crs={CRS.Simple}>\r\n                    <LayersControl position=\"topright\" collapsed={false}>\r\n                        {/* layers + layer control */}\r\n                        <LayersControl.BaseLayer checked={floor1Checked} ref={this.props.baseLayerRef} name={this.props.theLayers[1][\"name\"]}>\r\n                            <ImageOverlay bounds={this.props.bounds} url={this.props.pathToImg + this.props.theLayers[1][\"imageName\"]} />\r\n                        </LayersControl.BaseLayer>\r\n                        <LayersControl.BaseLayer checked={floor2Checked} name={this.props.theLayers[2][\"name\"]}>\r\n                            <ImageOverlay bounds={this.props.bounds} url={this.props.pathToImg + this.props.theLayers[2][\"imageName\"]} />\r\n                        </LayersControl.BaseLayer>\r\n                        <LayersControl.BaseLayer checked={floor3Checked} name={this.props.theLayers[3][\"name\"]}>\r\n                            <ImageOverlay bounds={this.props.bounds} url={this.props.pathToImg + this.props.theLayers[3][\"imageName\"]} />\r\n                        </LayersControl.BaseLayer>\r\n                        <LayersControl.BaseLayer checked={floor4Checked} name={this.props.theLayers[4][\"name\"]}>\r\n                            <ImageOverlay bounds={this.props.bounds} url={this.props.pathToImg + this.props.theLayers[4][\"imageName\"]} />\r\n                        </LayersControl.BaseLayer>\r\n                        <LayersControl.BaseLayer checked={floor5Checked} name={this.props.theLayers[5][\"name\"]}>\r\n                            <ImageOverlay bounds={this.props.bounds} url={this.props.pathToImg + this.props.theLayers[5][\"imageName\"]} />\r\n                        </LayersControl.BaseLayer>\r\n                    </LayersControl>\r\n                </MapContainer>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(Home);\r\n","import {Box, Input, InputGroup, InputLeftElement} from \"@chakra-ui/react\";\r\nimport {Search2Icon} from \"@chakra-ui/icons\";\r\nimport React from \"react\";\r\n\r\nfunction SearchInputField(props) {\r\n    // const {searchTerm, handleChange, ...rest} = props;\r\n\r\n    return (\r\n        <Box>\r\n            <InputGroup>\r\n                <InputLeftElement\r\n                    pointerEvents=\"none\"\r\n                    children={<Search2Icon color=\"gray.300\" />}\r\n                />\r\n                <Input\r\n                    type=\"text\"\r\n                    placeholder=\"Meklēt...\"\r\n                    value={props.searchTerm}\r\n                    onChange={props.handleChange}\r\n                />\r\n            </InputGroup>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default SearchInputField;","import React, {useEffect, useState} from \"react\";\r\nimport {\r\n    Badge,\r\n    Box, Button,\r\n    Center,\r\n    ChakraProvider, Fade,\r\n    Flex,\r\n    HStack,\r\n    Image,\r\n    Input,\r\n    InputGroup,\r\n    InputLeftElement,\r\n    List,\r\n    ListItem,\r\n    Spacer,\r\n    Tag,\r\n    Text,\r\n    useDisclosure,\r\n    ScaleFade, Slide, SlideFade, Collapse\r\n} from \"@chakra-ui/react\";\r\nimport {Search2Icon, StarIcon} from '@chakra-ui/icons'\r\nimport {Link} from \"react-router-dom\";\r\nimport SearchInputField from './SearchInput';\r\nimport $ from 'jquery';\r\n\r\n\r\n// inspired by https://codesandbox.io/s/practical-nightingale-m2b5n?file=/src/index.js\r\nconst MAXSEARCHLISTROWS = 5;\r\n\r\nfunction Search() {\r\n    const [error, setError] = useState(null);\r\n    const [isSearchLoaded, setSearchIsLoaded] = useState(false);\r\n    const [displayResultsList, setDisplayResultsList] = useState(\"none\"); // none or block\r\n    const [searchItems, setSearchItems] = useState([]);\r\n\r\n    const [showAllFilters, setShowAllFilters] = React.useState(false)\r\n\r\n    const handleToggleFilters = () => setShowAllFilters(!showAllFilters)\r\n\r\n    // it outputs in frontend in the same order as the list is here\r\n    const allFilters = {\r\n        \"roomTypes\" : [\r\n            {\r\n                \"filterTerm\": \"kabinets\",\r\n                \"frontendName\": \"Kabineti\",\r\n            },\r\n            {\r\n                \"filterTerm\": \"laboratorija\",\r\n                \"frontendName\": \"Laboratorijas\",\r\n            },\r\n            {\r\n                \"filterTerm\": \"cits\",\r\n                \"frontendName\": \"Citi\",\r\n            },\r\n        ],\r\n        \"floors\" : [\r\n            {\r\n                \"filterTerm\": \"1\",\r\n                \"frontendName\": \"1. stāvs\",\r\n            },\r\n            {\r\n                \"filterTerm\": \"2\",\r\n                \"frontendName\": \"2. stāvs\",\r\n            },\r\n            {\r\n                \"filterTerm\": \"3\",\r\n                \"frontendName\": \"3. stāvs\",\r\n            },\r\n            {\r\n                \"filterTerm\": \"4\",\r\n                \"frontendName\": \"4. stāvs\",\r\n            },\r\n            {\r\n                \"filterTerm\": \"5\",\r\n                \"frontendName\": \"5. stāvs\",\r\n            },\r\n        ]\r\n    }\r\n\r\n    const initval = {\r\n        \"roomTypes\" : [\r\n            \"kabinets\",\r\n            \"laboratorija\",\r\n            \"cits\",\r\n        ],\r\n        \"floors\" : [\r\n            \"1\",\r\n            \"2\",\r\n            \"3\",\r\n            \"4\",\r\n            \"5\",\r\n        ]\r\n    }\r\n    const [searchTags, setSearchTags] = useState(initval )\r\n\r\n    const [searchTerm, setSearchTerm] = React.useState(\"\");\r\n    const [searchResults, setSearchResults] = React.useState([]);\r\n\r\n\r\n    const handleChange = e => {\r\n        setSearchTerm(e.target.value);\r\n    };\r\n\r\n    // toggle clicked filter\r\n    const handleTagChange = e => {\r\n        // clicked filter value\r\n        const newFilterName = e.currentTarget.getAttribute(\"data-filtername\");\r\n        const newFilterType = e.currentTarget.getAttribute(\"data-filtertype\");\r\n\r\n        // add filter\r\n        if (!searchTags[newFilterType].includes(newFilterName)) {\r\n            setSearchTags(current =>\r\n                {\r\n                    let result = JSON.parse(JSON.stringify(current));// deep copy; otherwise, does not work\r\n\r\n                    result[newFilterType].push(newFilterName);\r\n\r\n                    return result;\r\n                }\r\n            )\r\n        }\r\n\r\n        // remove filter\r\n        else {\r\n            setSearchTags(current => {\r\n                    let result = JSON.parse(JSON.stringify(current)); // deep copy; otherwise, does not work\r\n\r\n                    result[newFilterType] = searchTags[newFilterType].filter(item => !newFilterName.includes(item))\r\n\r\n                    return result;\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n    // Note: the empty deps array [] means\r\n    // this useEffect will run once\r\n    // similar to componentDidMount()\r\n    useEffect(() => {\r\n        // get data\r\n        fetch(\"/kartes/data.json\")\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    setSearchIsLoaded(true);\r\n                    setSearchItems(result);\r\n                },\r\n                (error) => {\r\n                    setSearchIsLoaded(true);\r\n                    setError(error);\r\n                }\r\n            )\r\n\r\n        // to hide search results on outside click\r\n        $(document).on(\"click\", function(event) {\r\n            if ($(event.target).closest('#searchWrapper').length === 0)\r\n                setDisplayResultsList(\"none\");\r\n        });\r\n    }, [])\r\n\r\n    // to indicate how good the result is (depends on specific feature properties and search terms splitted)\r\n    function assignPoints(feature) {\r\n        let stLowered = searchTerm.toLowerCase().replace(/[^a-z0-9 ]/gi,'').trim(); // search term whole\r\n        let roomID = feature[\"properties\"][\"roomID\"].toLowerCase();\r\n        let roomType = feature[\"properties\"][\"roomType\"].toLowerCase();\r\n        let roomFloor = feature[\"properties\"][\"floor\"].toLowerCase();\r\n\r\n        let searchWords = stLowered.split(\" \"); // array of words (search terms)\r\n\r\n        let floorFilter = searchTags[\"floors\"];\r\n        let roomTypesFilter = searchTags[\"roomTypes\"];\r\n\r\n        let filtersOK = roomTypesFilter.includes(roomType) && floorFilter.includes(roomFloor);\r\n\r\n        if (!filtersOK) {\r\n            return 0;\r\n        }\r\n\r\n        // award points to the potential search result\r\n        let includesPoints = 0.3;\r\n        let equalPoints = 1.0;\r\n        let points = 0;\r\n        let searchWordsLength = searchWords.length;\r\n\r\n        if (searchWordsLength === 0 || (searchWordsLength === 1 && (searchWords[0] === \"\" || searchWords[0] === \" \"))) {\r\n            return 1;\r\n        }\r\n\r\n        for (let i = 0; i < searchWordsLength; i++) {\r\n            if (searchWords[i] === \"\")\r\n                continue;\r\n            if (roomID === searchWords[i])\r\n                points += equalPoints;\r\n            else if (roomID.includes(searchWords[i]))\r\n                points += includesPoints;\r\n            if (roomType === searchWords[i])\r\n                points += equalPoints;\r\n            else if (roomType.includes(searchWords[i]))\r\n                points += includesPoints;\r\n        }\r\n\r\n        return points;\r\n    }\r\n\r\n    // search logic\r\n    React.useEffect(() => {\r\n        if (isSearchLoaded) {\r\n            const itemsToSort = JSON.parse(JSON.stringify(searchItems[\"features\"])); // deep copy\r\n            let results = itemsToSort\r\n                .filter(feature => {\r\n                    return assignPoints(feature) > 0;\r\n                })\r\n                .sort((feature1, feature2) => {\r\n                        let points1 = assignPoints(feature1); // points indicate how \"suitable\" the result is\r\n                        let points2 = assignPoints(feature2);\r\n\r\n                        if (points1 > points2) return -1;\r\n                        else if (points1 < points2) return 1;\r\n                        else return 0;\r\n                    }\r\n                )\r\n\r\n            setSearchResults(prevResults => results);\r\n\r\n        }\r\n    }, [searchTerm, searchTags, searchItems]);\r\n\r\n    return (\r\n        <Box id=\"searchWrapper\" width=\"full\" className=\"App\" onFocus={() => setDisplayResultsList(\"block\")}>\r\n                <SearchInputField searchTerm={searchTerm} handleChange={handleChange}/>\r\n                <div>\r\n                    {/* search results list */}\r\n                    {/*<Text mt={3} mb={3}><b>Atrastās telpas:</b></Text>*/}\r\n                    <List spacing={0} shadow={\"md\"} style={{display: displayResultsList}}>\r\n\r\n                        {/* display filter tags */}\r\n                        <ListItem key=\"filterTags\" p={3} pb={0}>\r\n                            <Button size=\"xs\" onClick={handleToggleFilters}>Iestatīt filtrus</Button>\r\n                            <Collapse startingHeight={0} in={showAllFilters}>\r\n                                <Flex css={{\r\n                                    flexFlow: \"row wrap\"\r\n                                }}>\r\n                                    {\r\n                                        Object.keys(allFilters).map((key) => {\r\n                                            return allFilters[key].map(filterItem => {\r\n\r\n                                                // if filter is active, set color to blue; otherwise, gray\r\n                                                let color = \"\";\r\n\r\n                                                searchTags[key].includes(filterItem[\"filterTerm\"]) ? color = \"blue\" : color = \"gray\"\r\n\r\n                                                return (\r\n                                                    <Tag mr={1} mt={1} size={\"md\"} colorScheme={color} key={filterItem[\"filterTerm\"]} data-filtertype={key} data-filtername={filterItem[\"filterTerm\"]}\r\n                                                         onClick={(e) => handleTagChange(e)}>\r\n                                                        {filterItem[\"frontendName\"]}\r\n                                                    </Tag> )\r\n                                            })\r\n                                        })\r\n                                    }\r\n                                </Flex>\r\n\r\n                            </Collapse>\r\n                        </ListItem>\r\n\r\n                        {/* Display search results */}\r\n                        {searchResults.length > 1 ?\r\n                            searchResults.slice(0, MAXSEARCHLISTROWS).map((item, key) => (\r\n                                <Link key={key}  to={\"/\"+item[\"properties\"][\"roomID\"]}>\r\n                                    <ListItem _hover={{ bg: \"#f1f1f1\" }} p={3}>\r\n                                        <Flex>\r\n                                            <Text fontSize={\"md\"}>\r\n                                                {item[\"properties\"][\"roomID\"] + \". \" + item[\"properties\"][\"roomType\"]}\r\n                                            </Text>\r\n                                            <Spacer />\r\n                                            <Text>{item[\"properties\"][\"floor\"]}. stāvs</Text>\r\n                                        </Flex>\r\n                                    </ListItem>\r\n                                </Link>\r\n                            ))\r\n                            :\r\n                            <ListItem>\r\n                                <Text fontSize={\"md\"} p={3}>\r\n                                    Nekas netika atrasts.\r\n                                </Text>\r\n                            </ListItem>\r\n                        }\r\n                    </List>\r\n                    {/*<li key={\"item-\" +key} >{item[\"properties\"][\"floor\"]}. stāvs &nbsp; {item[\"properties\"][\"roomID\"]}.{item[\"properties\"][\"roomType\"]}</li>*/}\r\n                </div>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default Search;\r\n","import React, {useState} from 'react'\r\nimport $ from 'jquery'\r\nimport {\r\n    Button,\r\n    ChakraProvider, FormControl, FormLabel, Input,\r\n    Modal, ModalBody,\r\n    ModalCloseButton,\r\n    ModalContent, ModalFooter,\r\n    ModalHeader,\r\n    ModalOverlay, Select, useDisclosure\r\n} from \"@chakra-ui/react\";\r\nimport {\r\n    MapContainer,\r\n    LayerGroup,\r\n    LayersControl,\r\n    ImageOverlay,\r\n} from \"react-leaflet\";\r\nimport {CRS, Polygon, Polyline} from \"leaflet\";\r\n\r\nimport \"@geoman-io/leaflet-geoman-free\";\r\nimport \"@geoman-io/leaflet-geoman-free/dist/leaflet-geoman.css\";\r\n\r\n// still to do\r\n// 1. add modal edit option (open modal, preferably with written previous data)\r\n// 2. add some validation, for ID only numbers, both fields required etc\r\n// 3. is there a bug that first layer is removed even when submitting? First time had, then no.\r\n// 4. db schema - should data be grouped by floor number or floor number should be in properties field for each?\r\n// 5. remove unneeded stuff\r\n// 6. json bin ? or no.\r\n\r\nfunction GeomanPage(props) {\r\n\r\n    const mapRef = React.useRef();\r\n    const floors = [React.useRef(), React.useRef(), React.useRef(), React.useRef(), React.useRef()];\r\n\r\n    const { isOpen, onOpen, onClose } = useDisclosure({\r\n        onClose() { $(\"#cancelButton\").click(); }\r\n    }) // for modal\r\n    const idRef = React.useRef() // for modal\r\n    const [JSONData, LoadJSONData] = useState({})\r\n\r\n\r\n    function printJSON() {\r\n        let map = mapRef.current;\r\n        let rawLayers = null;\r\n        let processedLayers = null;\r\n        if (map) {\r\n            rawLayers = findLayers();\r\n            processedLayers = processLayers(rawLayers);\r\n        }\r\n\r\n        $(\"#bin-data-sent\").html(\"<pre>\" + JSON.stringify(processedLayers, undefined, 2) + \"</pre>\");\r\n    }\r\n\r\n    function processLayers(layers) {\r\n        let result = {\r\n            \"type\": \"GeometryCollection\",\r\n            \"features\": []\r\n        };\r\n\r\n        for (let key in layers) {\r\n            let target = result.features;\r\n            layers[key].forEach((el, index) => {\r\n                let shape = el.pm._shape;\r\n\r\n                // get coordinates\r\n                let coordinates = [];\r\n                el._parts[0].forEach((el, index) => {\r\n                    coordinates.push([el.x, el.y]);\r\n                });\r\n\r\n                // push clean geoJSON data object\r\n                target.push({\r\n                    \"type\": shape,\r\n                    \"id\": key.toString() + index.toString(),\r\n                    \"properties\": {\r\n                        \"floor\": key,\r\n                        \"roomID\": el.LUProperties.id,\r\n                        \"roomType\": el.LUProperties.type\r\n                    },\r\n                    \"coordinates\": coordinates\r\n                })\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // filter drawed layers grouped by floor\r\n    function findLayers() {\r\n        let layersResult = {\"1\": [], \"2\": [], \"3\": [], \"4\": [], \"5\": []}; // init empty\r\n\r\n        // go over each floor and add each floor's drawings\r\n        floors.forEach((el, index) => {\r\n            let layers = el.current._layers; // this is a little sketchy to use _layers variable\r\n            for (let key in layers) {\r\n                if (\r\n                    layers[key] instanceof Polyline || // only if its polyline or polygon\r\n                    layers[key] instanceof Polygon\r\n                ) {\r\n                    layersResult[index+1].push(layers[key]);\r\n                }\r\n            }\r\n        });\r\n\r\n        // // filter out layers that don't have the leaflet-geoman instance\r\n        // layersResult = layersResult.filter(layer => !!layer.pm);\r\n        //\r\n        // // filter out everything thats leaflet-geoman specific temporary stuff\r\n        // layersResult = layersResult.filter(layer => !layer._pmTempLayer);\r\n\r\n        return layersResult;\r\n    }\r\n\r\n    $(document).ready(function() {\r\n        let map = mapRef.current;\r\n\r\n        $(\"#button-clear\").on(\"click\", () => {\r\n            $(\"#bin-data-sent\").html(\"\");\r\n            $(\"#bin-data-received-content\").html(\"\");\r\n        });\r\n\r\n        $(\"#button-receive-data\").on(\"click\", () => {\r\n            fetch(\"/kartes/data.json\")\r\n                .then(res => res.json())\r\n                .then(\r\n                    (result) => {\r\n                        LoadJSONData(result);\r\n                        $(\"#bin-data-received-content\").html(JSON.stringify(result));\r\n                    },\r\n                    (error) => {\r\n                        // ... some error parsing\r\n                    }\r\n                )\r\n        })\r\n\r\n        if (map) {\r\n            map.pm.addControls({\r\n                drawCircleMarker: false,\r\n                drawCircle: false,\r\n                drawMarker: false,\r\n                drawPolyline: false\r\n            });\r\n\r\n            let currentBaseLayer = floors[0].current;\r\n\r\n            // on new drawing created\r\n            map.on('pm:create', function (e) {\r\n                onOpen(); // opens modal\r\n\r\n                // remove layer if cancelled\r\n                $(\"#cancelButton\").on(\"click\", function () {\r\n                    e.layer.remove();\r\n                    $(\"#mainForm\").off(\"click\");\r\n                    $(\"#cancelbutton\").off(\"click\");\r\n                });\r\n\r\n                // add layer if form submitted\r\n                $(\"#mainForm\").on(\"submit\", function (event) {\r\n                    let ID = $(\"#idField\").val();\r\n                    let type = $(\"#typeField\").val();\r\n                    e.layer.LUProperties = {};\r\n                    e.layer.LUProperties.id = ID;\r\n                    e.layer.LUProperties.type = type;\r\n                    currentBaseLayer.addLayer(e.layer);\r\n                    $(\"#mainForm\").off(\"submit\");\r\n                    $(\"#cancelButton\").off(\"click\");\r\n                });\r\n\r\n            // on floor change\r\n            }).on('baselayerchange', function (e) {\r\n                currentBaseLayer = e.layer;\r\n            })\r\n        }\r\n    });\r\n\r\n    //\r\n    return (\r\n        <div id=\"geoman-wrapper\">\r\n                <Button m={1} onClick={printJSON} id=\"button-geoJSON\">Generate JSON</Button>\r\n                <Button m={1} id=\"button-receive-data\">Receive data</Button>\r\n                <Button m={1} id=\"button-clear\">Clear data</Button>\r\n\r\n                <Modal\r\n                    initialFocusRef={idRef}\r\n                    isOpen={isOpen}\r\n                    onClose={onClose}\r\n                >\r\n                    <ModalOverlay />\r\n                    <ModalContent>\r\n                        <ModalHeader>Telpas informācija</ModalHeader>\r\n                        <ModalCloseButton />\r\n                        <form id=\"mainForm\">\r\n                        <ModalBody pb={6}>\r\n                            <FormControl>\r\n                                <FormLabel>ID</FormLabel>\r\n                                <Input id=\"idField\" ref={idRef} placeholder=\"Piemēram, 312\"/>\r\n                            </FormControl>\r\n\r\n                            <FormControl mt={4}>\r\n                                <FormLabel>Tips</FormLabel>\r\n                                <Select id=\"typeField\" placeholder=\"Izvēlies tipu\">\r\n                                    <option value=\"kabinets\">Kabinets</option>\r\n                                    <option value=\"laboratorija\">Laboratorija</option>\r\n                                    <option value=\"cits\">Cits</option>\r\n                                </Select>\r\n                            </FormControl>\r\n                        </ModalBody>\r\n\r\n                            <ModalFooter>\r\n                                <Button onClick={onClose} type=\"submit\" colorScheme=\"blue\" mr={3}>\r\n                                    Saglabāt\r\n                                </Button>\r\n                                <Button onClick={onClose} id=\"cancelButton\">Atcelt</Button>\r\n                            </ModalFooter>\r\n                        </form>\r\n                    </ModalContent>\r\n                </Modal>\r\n\r\n            <div id=\"bin-data-sent\" className=\"bin-data\"/>\r\n            <div id=\"bin-data-received-content\" className=\"bin-data\"></div>\r\n            <MapContainer whenCreated={(mapInstance)=> { mapRef.current = mapInstance }} bounds={props.bounds} center={props.center} maxZoom={1} minZoom={-5} doubleClickZoom={false} crs={CRS.Simple}>\r\n                <LayersControl position=\"topright\" collapsed={false}>\r\n                    {/* layers + layer control */}\r\n                    <LayersControl.BaseLayer  checked name={props.theLayers[1][\"name\"]}>\r\n                        <LayerGroup ref={floors[0]}>\r\n                            <ImageOverlay bounds={props.bounds} url={props.pathToImg + props.theLayers[1][\"imageName\"]} />\r\n                        </LayerGroup>\r\n                    </LayersControl.BaseLayer>\r\n                    <LayersControl.BaseLayer name={props.theLayers[2][\"name\"]}>\r\n                        <LayerGroup ref={floors[1]}>\r\n                            <ImageOverlay bounds={props.bounds} url={props.pathToImg + props.theLayers[2][\"imageName\"]} />\r\n                        </LayerGroup>\r\n                    </LayersControl.BaseLayer>\r\n                    <LayersControl.BaseLayer name={props.theLayers[3][\"name\"]}>\r\n                        <LayerGroup ref={floors[2]}>\r\n                        <ImageOverlay bounds={props.bounds} url={props.pathToImg + props.theLayers[3][\"imageName\"]} />\r\n                        </LayerGroup>\r\n                    </LayersControl.BaseLayer>\r\n                    <LayersControl.BaseLayer name={props.theLayers[4][\"name\"]}>\r\n                        <LayerGroup ref={floors[3]}>\r\n                        <ImageOverlay bounds={props.bounds} url={props.pathToImg + props.theLayers[4][\"imageName\"]} />\r\n                        </LayerGroup>\r\n                    </LayersControl.BaseLayer>\r\n                    <LayersControl.BaseLayer name={props.theLayers[5][\"name\"]}>\r\n                        <LayerGroup ref={floors[4]}>\r\n                        <ImageOverlay bounds={props.bounds} url={props.pathToImg + props.theLayers[5][\"imageName\"]} />\r\n                        </LayerGroup>\r\n                    </LayersControl.BaseLayer>\r\n                </LayersControl>\r\n            </MapContainer>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GeomanPage;\r\n","import { HashRouter, Switch, Route, Link } from 'react-router-dom'\r\nimport React, {Component} from \"react\";\r\nimport Home from './Components/Home';\r\nimport Search from './Components/Search';\r\nimport GeomanPage from './Components/GeomanPage';\r\nimport SearchInputField from './Components/SearchInput';\r\nimport {\r\n    Button,\r\n    Flex,\r\n    Box,\r\n    Spacer,\r\n    Image,\r\n    Center,\r\n    Text,\r\n    HStack,\r\n    VStack,\r\n    List,\r\n    ListIcon,\r\n    ListItem, Divider\r\n} from \"@chakra-ui/react\"\r\nimport 'leaflet/dist/leaflet.css';\r\nimport {ChevronLeftIcon, ChevronRightIcon, HamburgerIcon} from \"@chakra-ui/icons\";\r\nimport $ from \"jquery\";\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            searchTerm: \"\"\r\n        };\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n    }\r\n\r\n    handleChange (e) {\r\n        this.setState(prevState => {\r\n                return {searchTerm: e.target.value}\r\n            }\r\n        );\r\n        console.log(\"Search term updated : \" + this.state.searchTerm);\r\n    }\r\n\r\n    render() {\r\n        // adjust img url\r\n        const baseUrl = window.location.origin;\r\n        const preFolderName = 'kartes/media/';\r\n        const pathToImg = baseUrl + '/' + preFolderName;\r\n\r\n        // map constants\r\n        const bounds = [[0,0], [1000, 1000]]\r\n        const center = [500,500]\r\n        const layers = {\r\n            0: {\r\n                name: \"0. stāvs\",\r\n                imageName: \"\"\r\n            },\r\n            1: {\r\n                name: \"1. stāvs\",\r\n                imageName: \"zm1.svg\"\r\n            },\r\n            2: {\r\n                name: \"2. stāvs\",\r\n                imageName: \"zm2.svg\"\r\n            },\r\n            3: {\r\n                name: \"3. stāvs\",\r\n                imageName: \"zm3.svg\"\r\n            },\r\n            4: {\r\n                name: \"4. stāvs\",\r\n                imageName: \"zm4.svg\"\r\n            },\r\n            5: {\r\n                name: \"5. stāvs\",\r\n                imageName: \"zm5.svg\"\r\n            },\r\n\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <HashRouter>\r\n                    <Flex p={4}>\r\n                        {/*<Box>*/}\r\n                            {/*<Image h={50} src={pathToImg + \"logo.png\"}  fallbackSrc=\"https://via.placeholder.com/150\" />*/}\r\n                        {/*</Box>*/}\r\n                        {/*<Spacer />*/}\r\n\r\n                        {/*<Center width=\"full\">*/}\r\n                        {/*    <VStack width=\"full\" style={{}}>*/}\r\n                        {/*        <Box width=\"full\">*/}\r\n                        {/*            <SearchInputField searchTerm={this.state.searchTerm} handleChange={this.handleChange}/>*/}\r\n                        {/*        </Box>*/}\r\n                        {/*        <Box width=\"full\" borderWidth=\"1px\" borderRadius=\"lg\"  style={{}}>*/}\r\n                        {/*            <List spacing={3} p={3}>*/}\r\n                        {/*                <ListItem>*/}\r\n                        {/*                    /!*<ListIcon color=\"green.500\" />*!/*/}\r\n                        {/*                    721. kabinets*/}\r\n                        {/*                </ListItem>*/}\r\n                        {/*                <ListItem>*/}\r\n                        {/*                    /!*<ListIcon color=\"green.500\" />*!/*/}\r\n                        {/*                    213. kabinets*/}\r\n                        {/*                </ListItem>*/}\r\n                        {/*                <ListItem>*/}\r\n                        {/*                    /!*<ListIcon color=\"green.500\" />*!/*/}\r\n                        {/*                    414. kabinets*/}\r\n                        {/*                </ListItem>*/}\r\n                        {/*            </List>*/}\r\n                        {/*        </Box>*/}\r\n                        {/*    </VStack>*/}\r\n                        {/*</Center>*/}\r\n\r\n                        <Search />\r\n                    </Flex>\r\n\r\n                    <Switch>\r\n                        <Route exact path='/geoman' render={(props) => (<GeomanPage {...props} pathToImg={pathToImg} bounds={bounds} center={center} theLayers={layers} />)}/>\r\n                        <Route exact path='/search' render={(props) => (<Search {...props} pathToImg={pathToImg} bounds={bounds} center={center} theLayers={layers} />)}/>\r\n                        {/*<Route exact path='/header' render={(props) => (<Header {...props} pathToImg={pathToImg}/>)}/>*/}\r\n                        <Route exact path='/:id?' render={(props) => (<Home {...props} pathToImg={pathToImg} bounds={bounds} center={center} theLayers={layers} />)}/>\r\n                        <Route status={404}>\r\n                            <div>Page not found.</div>\r\n                        </Route>\r\n                    </Switch>\r\n\r\n\r\n                    <Link to=\"/\">\r\n                        <Button size=\"xs\" m={1} colorScheme=\"blue\">Home</Button>\r\n                    </Link>\r\n                    <Link to=\"/geoman\">\r\n                        <Button size=\"xs\" m={1} colorScheme=\"blue\">Geoman</Button>\r\n                    </Link>\r\n                    <Link to=\"/search\">\r\n                        <Button size=\"xs\" m={1} colorScheme=\"blue\">Search</Button>\r\n                    </Link>\r\n                    <Link to=\"/512\">\r\n                        <Button size=\"xs\" m={1} colorScheme=\"blue\">Search for #512</Button>\r\n                    </Link>\r\n                </HashRouter>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import { extendTheme } from \"@chakra-ui/react\";\n\nconst colors = {\n  primary: {\n    100: \"#E5FCF1\",\n    200: \"#27EF96\",\n    300: \"#10DE82\",\n    400: \"#0EBE6F\",\n    500: \"#0CA25F\",\n    600: \"#0A864F\",\n    700: \"#086F42\",\n    800: \"#075C37\",\n    900: \"#064C2E\"\n  }\n};\n\nconst customTheme = extendTheme({ colors });\n\nexport default customTheme;\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { ChakraProvider } from \"@chakra-ui/react\";\r\nimport './index.css';\r\n\r\nimport App from \"./App\";\r\nimport customTheme from \"./utils/theme\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <ChakraProvider theme={customTheme}>\r\n            <App />\r\n        </ChakraProvider>\r\n    </React.StrictMode>,\r\n    rootElement\r\n);\r\n"],"sourceRoot":""}