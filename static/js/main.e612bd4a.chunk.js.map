{"version":3,"sources":["Components/Home.js","Components/GeomanPage.js","App.js","reportWebVitals.js","index.js"],"names":["Home","MapContainer","bounds","this","props","center","minZoom","doubleClickZoom","crs","CRS","Simple","LayersControl","position","collapsed","BaseLayer","ref","baseLayerRef","checked","name","theLayers","ImageOverlay","url","pathToImg","Component","GeomanPage","mapRef","React","useRef","floors","useDisclosure","onClose","$","click","isOpen","onOpen","idRef","document","ready","map","current","pm","addControls","drawCircleMarker","drawCircle","drawMarker","drawPolyline","currentBaseLayer","on","e","layer","remove","off","event","ID","val","type","LUProperties","id","addLayer","m","onClick","processedLayers","layers","result","key","target","features","forEach","el","index","shape","_shape","coordinates","_parts","push","x","y","toString","processLayers","layersResult","_layers","Polyline","Polygon","findLayers","html","JSON","stringify","undefined","initialFocusRef","pb","placeholder","mt","value","colorScheme","mr","className","whenCreated","mapInstance","maxZoom","LayerGroup","App","window","location","origin","baseUrl","0","imageName","1","2","3","4","5","to","exact","path","render","status","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.e612bd4a.chunk.js","sourcesContent":["import {React, Component} from 'react'\r\nimport {ImageOverlay, LayersControl, MapContainer} from 'react-leaflet'\r\nimport {CRS} from 'leaflet';\r\n\r\nclass Home extends Component {\r\n    render() {\r\n        return (\r\n            <MapContainer bounds={this.props.bounds} center={this.props.center} minZoom={-5} doubleClickZoom={false} crs={CRS.Simple}>\r\n                <LayersControl position=\"topright\" collapsed={false}>\r\n                    {/* layers + layer control */}\r\n                    <LayersControl.BaseLayer ref={this.props.baseLayerRef} checked name={this.props.theLayers[1][\"name\"]}>\r\n                        <ImageOverlay bounds={this.props.bounds} url={this.props.pathToImg + this.props.theLayers[1][\"imageName\"]} />\r\n                    </LayersControl.BaseLayer>\r\n                    <LayersControl.BaseLayer name={this.props.theLayers[2][\"name\"]}>\r\n                        <ImageOverlay bounds={this.props.bounds} url={this.props.pathToImg + this.props.theLayers[2][\"imageName\"]} />\r\n                    </LayersControl.BaseLayer>\r\n                    <LayersControl.BaseLayer name={this.props.theLayers[3][\"name\"]}>\r\n                        <ImageOverlay bounds={this.props.bounds} url={this.props.pathToImg + this.props.theLayers[3][\"imageName\"]} />\r\n                    </LayersControl.BaseLayer>\r\n                    <LayersControl.BaseLayer name={this.props.theLayers[4][\"name\"]}>\r\n                        <ImageOverlay bounds={this.props.bounds} url={this.props.pathToImg + this.props.theLayers[4][\"imageName\"]} />\r\n                    </LayersControl.BaseLayer>\r\n                    <LayersControl.BaseLayer name={this.props.theLayers[5][\"name\"]}>\r\n                        <ImageOverlay bounds={this.props.bounds} url={this.props.pathToImg + this.props.theLayers[5][\"imageName\"]} />\r\n                    </LayersControl.BaseLayer>\r\n                </LayersControl>            </MapContainer>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react'\r\nimport $ from 'jquery'\r\nimport {\r\n    Button,\r\n    ChakraProvider, FormControl, FormLabel, Input,\r\n    Modal, ModalBody,\r\n    ModalCloseButton,\r\n    ModalContent, ModalFooter,\r\n    ModalHeader,\r\n    ModalOverlay, Select, useDisclosure\r\n} from \"@chakra-ui/react\";\r\nimport {\r\n    MapContainer,\r\n    LayerGroup,\r\n    LayersControl,\r\n    ImageOverlay,\r\n} from \"react-leaflet\";\r\nimport {CRS, Polygon, Polyline} from \"leaflet\";\r\n\r\nimport \"@geoman-io/leaflet-geoman-free\";\r\nimport \"@geoman-io/leaflet-geoman-free/dist/leaflet-geoman.css\";\r\n\r\n// still to do\r\n// 1. add modal edit option (open modal, preferably with written previous data)\r\n// 2. remove unneeded stuff\r\n// 3. json bin ? or no.\r\n\r\nfunction GeomanPage(props) {\r\n\r\n    const mapRef = React.useRef();\r\n    const floors = [React.useRef(), React.useRef(), React.useRef(), React.useRef(), React.useRef()];\r\n\r\n    const { isOpen, onOpen, onClose } = useDisclosure({\r\n        onClose() { $(\"#cancelButton\").click(); }\r\n    }) // for modal\r\n    const idRef = React.useRef() // for modal\r\n\r\n\r\n    function printJSON() {\r\n        let map = mapRef.current;\r\n        let rawLayers = null;\r\n        let processedLayers = null;\r\n        if (map) {\r\n            rawLayers = findLayers();\r\n            processedLayers = processLayers(rawLayers);\r\n        }\r\n\r\n        $(\"#bin-data-sent\").html(\"<pre>\" + JSON.stringify(processedLayers, undefined, 2) + \"</pre>\");\r\n    }\r\n\r\n    function processLayers(layers) {\r\n        let result = {\r\n            \"type\": \"GeometryCollection\",\r\n            \"features\": {\"1\": [], \"2\": [], \"3\": [], \"4\": [], \"5\": []}\r\n        };\r\n\r\n        for (let key in layers) {\r\n            let target = result.features[key];\r\n            layers[key].forEach((el, index) => {\r\n                let shape = el.pm._shape;\r\n\r\n                // get coordinates\r\n                let coordinates = [];\r\n                el._parts[0].forEach((el, index) => {\r\n                    coordinates.push([el.x, el.y]);\r\n                });\r\n\r\n                // push clean geoJSON data object\r\n                target.push({\r\n                    \"type\": shape,\r\n                    \"id\": key.toString() + index.toString(),\r\n                    \"properties\": {\r\n                        \"roomID\": el.LUProperties.id,\r\n                        \"roomType\": el.LUProperties.type\r\n                    },\r\n                    \"coordinates\": coordinates\r\n                })\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // filter drawed layers grouped by floor\r\n    function findLayers() {\r\n        let layersResult = {\"1\": [], \"2\": [], \"3\": [], \"4\": [], \"5\": []}; // init empty\r\n\r\n        // go over each floor and add each floor's drawings\r\n        floors.forEach((el, index) => {\r\n            let layers = el.current._layers; // this is a little sketchy to use _layers variable\r\n            for (let key in layers) {\r\n                if (\r\n                    layers[key] instanceof Polyline || // only if its polyline or polygon\r\n                    layers[key] instanceof Polygon\r\n                ) {\r\n                    layersResult[index+1].push(layers[key]);\r\n                }\r\n            }\r\n        });\r\n\r\n        // // filter out layers that don't have the leaflet-geoman instance\r\n        // layersResult = layersResult.filter(layer => !!layer.pm);\r\n        //\r\n        // // filter out everything thats leaflet-geoman specific temporary stuff\r\n        // layersResult = layersResult.filter(layer => !layer._pmTempLayer);\r\n\r\n        return layersResult;\r\n    }\r\n\r\n    $(document).ready(function() {\r\n        let map = mapRef.current;\r\n        if (map) {\r\n            map.pm.addControls({\r\n                drawCircleMarker: false,\r\n                drawCircle: false,\r\n                drawMarker: false,\r\n                drawPolyline: false\r\n            });\r\n\r\n            let currentBaseLayer = floors[0].current;\r\n\r\n            // on new drawing created\r\n            map.on('pm:create', function (e) {\r\n                onOpen(); // opens modal\r\n\r\n                // remove layer if cancelled\r\n                $(\"#cancelButton\").on(\"click\", function () {\r\n                    e.layer.remove();\r\n                    $(\"#mainForm\").off(\"click\");\r\n                    $(\"#cancelbutton\").off(\"click\");\r\n                });\r\n\r\n                // add layer if form submitted\r\n                $(\"#mainForm\").on(\"submit\", function (event) {\r\n                    let ID = $(\"#idField\").val();\r\n                    let type = $(\"#typeField\").val();\r\n                    e.layer.LUProperties = {};\r\n                    e.layer.LUProperties.id = ID;\r\n                    e.layer.LUProperties.type = type;\r\n                    currentBaseLayer.addLayer(e.layer);\r\n                    $(\"#mainForm\").off(\"submit\");\r\n                    $(\"#cancelButton\").off(\"click\");\r\n                });\r\n\r\n            // on floor change\r\n            }).on('baselayerchange', function (e) {\r\n                currentBaseLayer = e.layer;\r\n            })\r\n        }\r\n    });\r\n\r\n    //\r\n    return (\r\n        <div id=\"geoman-wrapper\">\r\n            <ChakraProvider>\r\n                <Button m={1} onClick={printJSON} id=\"button-geoJSON\">GeoJSON</Button>\r\n                <Button m={1} id=\"button-clear\">Clear printed data</Button>\r\n                <Button m={1} id=\"button-draw\">Refresh data and draw</Button>\r\n                <Modal\r\n                    initialFocusRef={idRef}\r\n                    isOpen={isOpen}\r\n                    onClose={onClose}\r\n                >\r\n                    <ModalOverlay />\r\n                    <ModalContent>\r\n                        <ModalHeader>Telpas informācija</ModalHeader>\r\n                        <ModalCloseButton />\r\n                        <form id=\"mainForm\">\r\n                        <ModalBody pb={6}>\r\n                            <FormControl>\r\n                                <FormLabel>ID</FormLabel>\r\n                                <Input id=\"idField\" ref={idRef} placeholder=\"Piemēram, 312\"/>\r\n                            </FormControl>\r\n\r\n                            <FormControl mt={4}>\r\n                                <FormLabel>Tips</FormLabel>\r\n                                <Select id=\"typeField\" placeholder=\"Izvēlies tipu\">\r\n                                    <option value=\"kabinets\">Kabinets</option>\r\n                                    <option value=\"laboratorija\">Laboratorija</option>\r\n                                    <option value=\"cits\">Cits</option>\r\n                                </Select>\r\n                            </FormControl>\r\n                        </ModalBody>\r\n\r\n                            <ModalFooter>\r\n                                <Button onClick={onClose} type=\"submit\" colorScheme=\"blue\" mr={3}>\r\n                                    Saglabāt\r\n                                </Button>\r\n                                <Button onClick={onClose} id=\"cancelButton\">Atcelt</Button>\r\n                            </ModalFooter>\r\n                        </form>\r\n                    </ModalContent>\r\n                </Modal>\r\n\r\n            </ChakraProvider>\r\n            <div id=\"bin-data-sent\" className=\"bin-data\"/>\r\n            <div id=\"bin-data-received-content\" className=\"bin-data\"/>\r\n            <div id=\"bin-data-received-metadata\" className=\"bin-data\"/>\r\n            <MapContainer whenCreated={(mapInstance)=> { mapRef.current = mapInstance }} bounds={props.bounds} center={props.center} maxZoom={1} minZoom={-5} doubleClickZoom={false} crs={CRS.Simple}>\r\n                <LayersControl position=\"topright\" collapsed={false}>\r\n                    {/* layers + layer control */}\r\n                    <LayersControl.BaseLayer  checked name={props.theLayers[1][\"name\"]}>\r\n                        <LayerGroup ref={floors[0]}>\r\n                            <ImageOverlay bounds={props.bounds} url={props.pathToImg + props.theLayers[1][\"imageName\"]} />\r\n                        </LayerGroup>\r\n                    </LayersControl.BaseLayer>\r\n                    <LayersControl.BaseLayer name={props.theLayers[2][\"name\"]}>\r\n                        <LayerGroup ref={floors[1]}>\r\n                            <ImageOverlay bounds={props.bounds} url={props.pathToImg + props.theLayers[2][\"imageName\"]} />\r\n                        </LayerGroup>\r\n                    </LayersControl.BaseLayer>\r\n                    <LayersControl.BaseLayer name={props.theLayers[3][\"name\"]}>\r\n                        <LayerGroup ref={floors[2]}>\r\n                        <ImageOverlay bounds={props.bounds} url={props.pathToImg + props.theLayers[3][\"imageName\"]} />\r\n                        </LayerGroup>\r\n                    </LayersControl.BaseLayer>\r\n                    <LayersControl.BaseLayer name={props.theLayers[4][\"name\"]}>\r\n                        <LayerGroup ref={floors[3]}>\r\n                        <ImageOverlay bounds={props.bounds} url={props.pathToImg + props.theLayers[4][\"imageName\"]} />\r\n                        </LayerGroup>\r\n                    </LayersControl.BaseLayer>\r\n                    <LayersControl.BaseLayer name={props.theLayers[5][\"name\"]}>\r\n                        <LayerGroup ref={floors[4]}>\r\n                        <ImageOverlay bounds={props.bounds} url={props.pathToImg + props.theLayers[5][\"imageName\"]} />\r\n                        </LayerGroup>\r\n                    </LayersControl.BaseLayer>\r\n                </LayersControl>\r\n            </MapContainer>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GeomanPage;\r\n","// import $ from 'jquery';\r\nimport { HashRouter, Switch, Route, Link } from 'react-router-dom'\r\nimport {React, Component} from \"react\";\r\nimport Home from './Components/Home';\r\nimport GeomanPage from './Components/GeomanPage';\r\nimport { ChakraProvider, Button} from \"@chakra-ui/react\"\r\nimport 'leaflet/dist/leaflet.css';\r\n\r\nclass App extends Component {\r\n    render() {\r\n        // adjust img url\r\n        const baseUrl = window.location.origin;\r\n        const preFolderName = 'kartes/media/';\r\n        const pathToImg = baseUrl + '/' + preFolderName;\r\n\r\n        // map constants\r\n        const bounds = [[0,0], [1000, 1000]]\r\n        const center = [500,500]\r\n        const layers = {\r\n            0: {\r\n                name: \"0. stāvs\",\r\n                imageName: \"\"\r\n            },\r\n            1: {\r\n                name: \"1. stāvs\",\r\n                imageName: \"zm1.svg\"\r\n            },\r\n            2: {\r\n                name: \"2. stāvs\",\r\n                imageName: \"zm2.svg\"\r\n            },\r\n            3: {\r\n                name: \"3. stāvs\",\r\n                imageName: \"zm3.svg\"\r\n            },\r\n            4: {\r\n                name: \"4. stāvs\",\r\n                imageName: \"zm4.svg\"\r\n            },\r\n            5: {\r\n                name: \"5. stāvs\",\r\n                imageName: \"zm5.svg\"\r\n            },\r\n\r\n        }\r\n\r\n\r\n        return (\r\n            <>\r\n                <HashRouter>\r\n                    <ChakraProvider>\r\n                        <Link to=\"/\">\r\n                            <Button m={1} colorScheme=\"blue\">Home</Button>\r\n                        </Link>\r\n                        <Link to=\"/geoman\">\r\n                            <Button m={1} colorScheme=\"blue\">Geoman</Button>\r\n                        </Link>\r\n                    </ChakraProvider>\r\n                    <Switch>\r\n                        <Route exact path='/geoman' render={(props) => (<GeomanPage {...props} pathToImg={pathToImg} bounds={bounds} center={center} theLayers={layers} />)}/>\r\n                        <Route exact path='/' render={(props) => (<Home {...props} pathToImg={pathToImg} bounds={bounds} center={center} theLayers={layers} />)}/>\r\n                        <Route status={404}>\r\n                            <div>Page not found.</div>\r\n                        </Route>\r\n                    </Switch>\r\n                </HashRouter>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}