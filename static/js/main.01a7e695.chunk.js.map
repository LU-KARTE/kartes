{"version":3,"sources":["Components/Home.js","Components/Search.js","Components/GeomanPage.js","App.js","reportWebVitals.js","index.js"],"names":["Home","fetchData","id","alert","fetch","then","res","json","result","foundFlag","console","log","forEach","feature","error","this","props","match","params","prevProps","prevState","snapshot","MapContainer","bounds","center","minZoom","doubleClickZoom","crs","CRS","Simple","LayersControl","position","collapsed","BaseLayer","ref","baseLayerRef","checked","name","theLayers","ImageOverlay","url","pathToImg","Component","withRouter","Search","useState","setError","isSearchLoaded","setSearchIsLoaded","searchItems","setSearchItems","allFilters","searchTags","setSearchTags","React","searchTerm","setSearchTerm","searchResults","setSearchResults","useEffect","results","filter","stLowered","toLowerCase","roomID","roomType","roomFloor","floorFilter","filtersOK","includes","searchParamsOK","className","ml","maxW","w","pointerEvents","children","Search2","color","type","placeholder","value","onChange","e","target","css","flexFlow","m","Object","keys","map","key","filterItem","size","colorScheme","data-filtertype","data-filtername","onClick","newFilterName","currentTarget","getAttribute","newFilterType","current","JSON","parse","stringify","item","push","handleTagChange","shadow","borderWidth","borderRadius","overflow","to","bg","p","fontSize","GeomanPage","mapRef","useRef","floors","useDisclosure","onClose","$","click","isOpen","onOpen","idRef","document","ready","pm","addControls","drawCircleMarker","drawCircle","drawMarker","drawPolyline","currentBaseLayer","on","layer","remove","off","event","ID","val","LUProperties","addLayer","processedLayers","layers","features","el","index","shape","_shape","coordinates","_parts","x","y","toString","processLayers","layersResult","_layers","Polyline","Polygon","findLayers","html","undefined","initialFocusRef","pb","mt","mr","whenCreated","mapInstance","maxZoom","LayerGroup","App","window","location","origin","baseUrl","0","imageName","1","2","3","4","5","exact","path","render","status","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.01a7e695.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\nimport {ImageOverlay, LayersControl, MapContainer} from 'react-leaflet'\r\nimport {CRS} from 'leaflet';\r\nimport { withRouter } from \"react-router\";\r\n\r\nclass Home extends Component {\r\n\r\n    componentDidMount() {\r\n        const id = this.props.match.params.id;\r\n        this.fetchData(id);\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        const id = this.props.match.params.id;\r\n        this.fetchData(id);\r\n    }\r\n\r\n    fetchData = id => {\r\n        if (!id) return;\r\n\r\n        alert(\"[check console] Search for room #\" + id);\r\n\r\n        fetch(\"/kartes/data.json\")\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    // just some console logs...\r\n                    let foundFlag = false;\r\n                    console.log(\"Fetched data:\");\r\n                    console.log(result);\r\n                    result[\"features\"].forEach ((feature) => {\r\n                            if (feature[\"properties\"][\"roomID\"] === id) {\r\n                                console.log(\"The requested room was found:\")\r\n                                console.log(feature);\r\n                                foundFlag = true;\r\n                            }\r\n                        }\r\n                    )\r\n                    if (!foundFlag)\r\n                        console.log(\"Room was not found.\");\r\n\r\n\r\n                },\r\n                (error) => {\r\n                    // ... some error parsing\r\n                }\r\n            )\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <MapContainer bounds={this.props.bounds} center={this.props.center} minZoom={-5} doubleClickZoom={false} crs={CRS.Simple}>\r\n                <LayersControl position=\"topright\" collapsed={false}>\r\n                    {/* layers + layer control */}\r\n                    <LayersControl.BaseLayer ref={this.props.baseLayerRef} checked name={this.props.theLayers[1][\"name\"]}>\r\n                        <ImageOverlay bounds={this.props.bounds} url={this.props.pathToImg + this.props.theLayers[1][\"imageName\"]} />\r\n                    </LayersControl.BaseLayer>\r\n                    <LayersControl.BaseLayer name={this.props.theLayers[2][\"name\"]}>\r\n                        <ImageOverlay bounds={this.props.bounds} url={this.props.pathToImg + this.props.theLayers[2][\"imageName\"]} />\r\n                    </LayersControl.BaseLayer>\r\n                    <LayersControl.BaseLayer name={this.props.theLayers[3][\"name\"]}>\r\n                        <ImageOverlay bounds={this.props.bounds} url={this.props.pathToImg + this.props.theLayers[3][\"imageName\"]} />\r\n                    </LayersControl.BaseLayer>\r\n                    <LayersControl.BaseLayer name={this.props.theLayers[4][\"name\"]}>\r\n                        <ImageOverlay bounds={this.props.bounds} url={this.props.pathToImg + this.props.theLayers[4][\"imageName\"]} />\r\n                    </LayersControl.BaseLayer>\r\n                    <LayersControl.BaseLayer name={this.props.theLayers[5][\"name\"]}>\r\n                        <ImageOverlay bounds={this.props.bounds} url={this.props.pathToImg + this.props.theLayers[5][\"imageName\"]} />\r\n                    </LayersControl.BaseLayer>\r\n                </LayersControl>\r\n            </MapContainer>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(Home);\r\n","import React, {useEffect, useState} from \"react\";\r\nimport {\r\n    Badge,\r\n    Box, Center,\r\n    ChakraProvider, Flex, HStack, Image, Input, InputGroup, InputLeftElement, Tag, Text\r\n} from \"@chakra-ui/react\";\r\nimport {Search2Icon, StarIcon} from '@chakra-ui/icons'\r\nimport {Link} from \"react-router-dom\";\r\n\r\n\r\n// inspired by https://codesandbox.io/s/practical-nightingale-m2b5n?file=/src/index.js\r\n\r\nfunction Search() {\r\n    const [error, setError] = useState(null);\r\n    const [isSearchLoaded, setSearchIsLoaded] = useState(false);\r\n    const [searchItems, setSearchItems] = useState([]);\r\n    // it outputs in frontend in the same order as the list is here\r\n    const allFilters = {\r\n        \"roomTypes\" : [\r\n            {\r\n                \"filterTerm\": \"kabinets\",\r\n                \"frontendName\": \"Kabineti\",\r\n            },\r\n            {\r\n                \"filterTerm\": \"laboratorija\",\r\n                \"frontendName\": \"Laboratorijas\",\r\n            },\r\n            {\r\n                \"filterTerm\": \"cits\",\r\n                \"frontendName\": \"Citi\",\r\n            },\r\n        ],\r\n        \"floors\" : [\r\n            {\r\n                \"filterTerm\": \"1\",\r\n                \"frontendName\": \"1. stāvs\",\r\n            },\r\n            {\r\n                \"filterTerm\": \"2\",\r\n                \"frontendName\": \"2. stāvs\",\r\n            },\r\n            {\r\n                \"filterTerm\": \"3\",\r\n                \"frontendName\": \"3. stāvs\",\r\n            },\r\n            {\r\n                \"filterTerm\": \"4\",\r\n                \"frontendName\": \"4. stāvs\",\r\n            },\r\n            {\r\n                \"filterTerm\": \"5\",\r\n                \"frontendName\": \"5. stāvs\",\r\n            },\r\n        ]\r\n    }\r\n\r\n    const initval = {\r\n        \"roomTypes\" : [\r\n            \"kabinets\",\r\n            \"laboratorija\",\r\n            \"cits\",\r\n        ],\r\n        \"floors\" : [\r\n            \"1\",\r\n            \"2\",\r\n            \"3\",\r\n            \"4\",\r\n            \"5\",\r\n        ]\r\n    }\r\n    const [searchTags, setSearchTags] = useState(initval )\r\n\r\n    const [searchTerm, setSearchTerm] = React.useState(\"\");\r\n    const [searchResults, setSearchResults] = React.useState([]);\r\n\r\n\r\n    const handleChange = e => {\r\n        setSearchTerm(e.target.value);\r\n    };\r\n\r\n    // toggle clicked filter\r\n    const handleTagChange = e => {\r\n        // clicked filter value\r\n        const newFilterName = e.currentTarget.getAttribute(\"data-filtername\");\r\n        const newFilterType = e.currentTarget.getAttribute(\"data-filtertype\");\r\n\r\n        // add filter\r\n        if (!searchTags[newFilterType].includes(newFilterName)) {\r\n            setSearchTags(current =>\r\n                {\r\n                    let result = JSON.parse(JSON.stringify(current));// deep copy; otherwise, does not work\r\n\r\n                    result[newFilterType].push(newFilterName);\r\n\r\n                    return result;\r\n                }\r\n            )\r\n        }\r\n        \r\n        // remove filter\r\n        else {\r\n            setSearchTags(current => {\r\n                    let result = JSON.parse(JSON.stringify(current)); // deep copy; otherwise, does not work\r\n\r\n                    result[newFilterType] = searchTags[newFilterType].filter(item => !newFilterName.includes(item))\r\n\r\n                    return result;\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n    // Note: the empty deps array [] means\r\n    // this useEffect will run once\r\n    // similar to componentDidMount()\r\n    useEffect(() => {\r\n        fetch(\"/kartes/data.json\")\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    setSearchIsLoaded(true);\r\n                    setSearchItems(result);\r\n                },\r\n                (error) => {\r\n                    setSearchIsLoaded(true);\r\n                    setError(error);\r\n                }\r\n            )\r\n    }, [])\r\n\r\n\r\n    // search logic\r\n    React.useEffect(() => {\r\n        if (isSearchLoaded) {\r\n            const results = searchItems[\"features\"].filter(feature => {\r\n                    let stLowered = searchTerm.toLowerCase();\r\n                    let roomID = feature[\"properties\"][\"roomID\"].toLowerCase();\r\n                    let roomType = feature[\"properties\"][\"roomType\"].toLowerCase();\r\n                    let roomFloor = feature[\"properties\"][\"floor\"].toLowerCase();\r\n\r\n                    let floorFilter = searchTags[\"floors\"];\r\n                    let roomTypesFilter = searchTags[\"roomTypes\"];\r\n\r\n                    let filtersOK = roomTypesFilter.includes(roomType) && floorFilter.includes(roomFloor);\r\n                    let searchParamsOK = roomID.includes(stLowered) || roomType.includes(stLowered);\r\n\r\n                    return filtersOK && searchParamsOK;\r\n\r\n                    // return feature[\"properties\"][\"roomID\"].toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n                    //     feature[\"properties\"][\"roomType\"].toLowerCase().includes(searchTerm.toLowerCase());\r\n                }\r\n            )\r\n\r\n            setSearchResults(results);\r\n        }\r\n    }, [searchTerm, searchTags, searchItems]);\r\n\r\n\r\n\r\n    const property = {\r\n        imageUrl: \"https://bit.ly/2Z4KKcF\",\r\n        imageAlt: \"Rear view of modern home with pool\",\r\n        beds: 3,\r\n        baths: 2,\r\n        title: \"Modern home in city center in the heart of historic Los Angeles\",\r\n        formattedPrice: \"$1,900.00\",\r\n        reviewCount: 34,\r\n        rating: 4,\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ChakraProvider>\r\n                    <InputGroup ml={2} maxW={500} w={[\"96%\", \"97%\", \"98%\"]}>\r\n                        <InputLeftElement\r\n                            pointerEvents=\"none\"\r\n                            children={<Search2Icon color=\"gray.300\" />}\r\n                        />\r\n                        <Input\r\n                            type=\"text\"\r\n                            placeholder=\"Meklēt...\"\r\n                            value={searchTerm}\r\n                            onChange={handleChange}\r\n                        />\r\n                    </InputGroup>\r\n                {/* display filter tags */}\r\n                <Flex css={{\r\n                    flexFlow: \"row wrap\"\r\n                }} maxW={500} m={1}>\r\n                    {\r\n                        Object.keys(allFilters).map((key) => {\r\n                            return allFilters[key].map(filterItem => {\r\n\r\n                                // if filter is active, set color to blue; otherwise, gray\r\n                                let color = \"\";\r\n\r\n                                searchTags[key].includes(filterItem[\"filterTerm\"]) ? color = \"blue\" : color = \"gray\"\r\n\r\n                                return (\r\n                                    <Tag m={1} size={\"lg\"} colorScheme={color} key={filterItem[\"filterTerm\"]} data-filtertype={key} data-filtername={filterItem[\"filterTerm\"]}\r\n                                         onClick={(e) => handleTagChange(e)}>\r\n                                        {filterItem[\"frontendName\"]}\r\n                                    </Tag> )\r\n                            })\r\n                        })\r\n                    }\r\n                </Flex>\r\n\r\n                <div>\r\n\r\n                    {/* current filter list */}\r\n                    {/*<ul>*/}\r\n                    {/*    {*/}\r\n                    {/*        Object.keys(searchTags).map((key) => {*/}\r\n                    {/*            return searchTags[key].map(filterItem => {*/}\r\n                    {/*                return (*/}\r\n                    {/*                    <li key={filterItem}>{filterItem}</li>*/}\r\n                    {/*                )*/}\r\n                    {/*            })*/}\r\n                    {/*        })*/}\r\n                    {/*    }*/}\r\n                    {/*</ul>*/}\r\n                    {/*<div>&nbsp;</div>*/}\r\n\r\n\r\n                    {/* search results list */}\r\n                        {searchResults.map((item, key) => (\r\n                            <Box shadow={\"md\"} key={key} m={2} maxW=\"sm\" borderWidth=\"1px\" borderRadius=\"md\" overflow=\"hidden\">\r\n\r\n                                <Link to={\"/\"+item[\"properties\"][\"roomID\"]}>\r\n                                    <Box key={key + \"-header\"} bg=\"#f2f8fc\">\r\n                                        <Box p={2}>\r\n                                            <Text>{item[\"properties\"][\"floor\"]}. stāvs</Text>\r\n                                        </Box>\r\n                                    </Box>\r\n\r\n                                    <Box key={key + \"-body\"} p={2}>\r\n                                        <HStack>\r\n                                            <Text fontSize={\"xl\"}>\r\n                                                {item[\"properties\"][\"roomID\"]}\r\n                                            </Text>\r\n                                            <Text>\r\n                                                {item[\"properties\"][\"roomType\"]}\r\n                                            </Text>\r\n                                        </HStack>\r\n                                    </Box>\r\n                                </Link>\r\n                            </Box>\r\n                        ))}\r\n                    {/*<li key={\"item-\" +key} >{item[\"properties\"][\"floor\"]}. stāvs &nbsp; {item[\"properties\"][\"roomID\"]}.{item[\"properties\"][\"roomType\"]}</li>*/}\r\n                </div>\r\n            </ChakraProvider>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Search;\r\n","import React from 'react'\r\nimport $ from 'jquery'\r\nimport {\r\n    Button,\r\n    ChakraProvider, FormControl, FormLabel, Input,\r\n    Modal, ModalBody,\r\n    ModalCloseButton,\r\n    ModalContent, ModalFooter,\r\n    ModalHeader,\r\n    ModalOverlay, Select, useDisclosure\r\n} from \"@chakra-ui/react\";\r\nimport {\r\n    MapContainer,\r\n    LayerGroup,\r\n    LayersControl,\r\n    ImageOverlay,\r\n} from \"react-leaflet\";\r\nimport {CRS, Polygon, Polyline} from \"leaflet\";\r\n\r\nimport \"@geoman-io/leaflet-geoman-free\";\r\nimport \"@geoman-io/leaflet-geoman-free/dist/leaflet-geoman.css\";\r\n\r\n// still to do\r\n// 1. add modal edit option (open modal, preferably with written previous data)\r\n// 2. add some validation, for ID only numbers, both fields required etc\r\n// 3. is there a bug that first layer is removed even when submitting? First time had, then no.\r\n// 4. db schema - should data be grouped by floor number or floor number should be in properties field for each?\r\n// 5. remove unneeded stuff\r\n// 6. json bin ? or no.\r\n\r\nfunction GeomanPage(props) {\r\n\r\n    const mapRef = React.useRef();\r\n    const floors = [React.useRef(), React.useRef(), React.useRef(), React.useRef(), React.useRef()];\r\n\r\n    const { isOpen, onOpen, onClose } = useDisclosure({\r\n        onClose() { $(\"#cancelButton\").click(); }\r\n    }) // for modal\r\n    const idRef = React.useRef() // for modal\r\n\r\n\r\n    function printJSON() {\r\n        let map = mapRef.current;\r\n        let rawLayers = null;\r\n        let processedLayers = null;\r\n        if (map) {\r\n            rawLayers = findLayers();\r\n            processedLayers = processLayers(rawLayers);\r\n        }\r\n\r\n        $(\"#bin-data-sent\").html(\"<pre>\" + JSON.stringify(processedLayers, undefined, 2) + \"</pre>\");\r\n    }\r\n\r\n    function processLayers(layers) {\r\n        let result = {\r\n            \"type\": \"GeometryCollection\",\r\n            \"features\": []\r\n        };\r\n\r\n        for (let key in layers) {\r\n            let target = result.features;\r\n            layers[key].forEach((el, index) => {\r\n                let shape = el.pm._shape;\r\n\r\n                // get coordinates\r\n                let coordinates = [];\r\n                el._parts[0].forEach((el, index) => {\r\n                    coordinates.push([el.x, el.y]);\r\n                });\r\n\r\n                // push clean geoJSON data object\r\n                target.push({\r\n                    \"type\": shape,\r\n                    \"id\": key.toString() + index.toString(),\r\n                    \"properties\": {\r\n                        \"floor\": key,\r\n                        \"roomID\": el.LUProperties.id,\r\n                        \"roomType\": el.LUProperties.type\r\n                    },\r\n                    \"coordinates\": coordinates\r\n                })\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // filter drawed layers grouped by floor\r\n    function findLayers() {\r\n        let layersResult = {\"1\": [], \"2\": [], \"3\": [], \"4\": [], \"5\": []}; // init empty\r\n\r\n        // go over each floor and add each floor's drawings\r\n        floors.forEach((el, index) => {\r\n            let layers = el.current._layers; // this is a little sketchy to use _layers variable\r\n            for (let key in layers) {\r\n                if (\r\n                    layers[key] instanceof Polyline || // only if its polyline or polygon\r\n                    layers[key] instanceof Polygon\r\n                ) {\r\n                    layersResult[index+1].push(layers[key]);\r\n                }\r\n            }\r\n        });\r\n\r\n        // // filter out layers that don't have the leaflet-geoman instance\r\n        // layersResult = layersResult.filter(layer => !!layer.pm);\r\n        //\r\n        // // filter out everything thats leaflet-geoman specific temporary stuff\r\n        // layersResult = layersResult.filter(layer => !layer._pmTempLayer);\r\n\r\n        return layersResult;\r\n    }\r\n\r\n    $(document).ready(function() {\r\n        let map = mapRef.current;\r\n        if (map) {\r\n            map.pm.addControls({\r\n                drawCircleMarker: false,\r\n                drawCircle: false,\r\n                drawMarker: false,\r\n                drawPolyline: false\r\n            });\r\n\r\n            let currentBaseLayer = floors[0].current;\r\n\r\n            // on new drawing created\r\n            map.on('pm:create', function (e) {\r\n                onOpen(); // opens modal\r\n\r\n                // remove layer if cancelled\r\n                $(\"#cancelButton\").on(\"click\", function () {\r\n                    e.layer.remove();\r\n                    $(\"#mainForm\").off(\"click\");\r\n                    $(\"#cancelbutton\").off(\"click\");\r\n                });\r\n\r\n                // add layer if form submitted\r\n                $(\"#mainForm\").on(\"submit\", function (event) {\r\n                    let ID = $(\"#idField\").val();\r\n                    let type = $(\"#typeField\").val();\r\n                    e.layer.LUProperties = {};\r\n                    e.layer.LUProperties.id = ID;\r\n                    e.layer.LUProperties.type = type;\r\n                    currentBaseLayer.addLayer(e.layer);\r\n                    $(\"#mainForm\").off(\"submit\");\r\n                    $(\"#cancelButton\").off(\"click\");\r\n                });\r\n\r\n            // on floor change\r\n            }).on('baselayerchange', function (e) {\r\n                currentBaseLayer = e.layer;\r\n            })\r\n        }\r\n    });\r\n\r\n    //\r\n    return (\r\n        <div id=\"geoman-wrapper\">\r\n            <ChakraProvider>\r\n                <Button m={1} onClick={printJSON} id=\"button-geoJSON\">GeoJSON</Button>\r\n                <Button m={1} id=\"button-clear\">Clear printed data</Button>\r\n                <Button m={1} id=\"button-draw\">Refresh data and draw</Button>\r\n                <Modal\r\n                    initialFocusRef={idRef}\r\n                    isOpen={isOpen}\r\n                    onClose={onClose}\r\n                >\r\n                    <ModalOverlay />\r\n                    <ModalContent>\r\n                        <ModalHeader>Telpas informācija</ModalHeader>\r\n                        <ModalCloseButton />\r\n                        <form id=\"mainForm\">\r\n                        <ModalBody pb={6}>\r\n                            <FormControl>\r\n                                <FormLabel>ID</FormLabel>\r\n                                <Input id=\"idField\" ref={idRef} placeholder=\"Piemēram, 312\"/>\r\n                            </FormControl>\r\n\r\n                            <FormControl mt={4}>\r\n                                <FormLabel>Tips</FormLabel>\r\n                                <Select id=\"typeField\" placeholder=\"Izvēlies tipu\">\r\n                                    <option value=\"kabinets\">Kabinets</option>\r\n                                    <option value=\"laboratorija\">Laboratorija</option>\r\n                                    <option value=\"cits\">Cits</option>\r\n                                </Select>\r\n                            </FormControl>\r\n                        </ModalBody>\r\n\r\n                            <ModalFooter>\r\n                                <Button onClick={onClose} type=\"submit\" colorScheme=\"blue\" mr={3}>\r\n                                    Saglabāt\r\n                                </Button>\r\n                                <Button onClick={onClose} id=\"cancelButton\">Atcelt</Button>\r\n                            </ModalFooter>\r\n                        </form>\r\n                    </ModalContent>\r\n                </Modal>\r\n\r\n            </ChakraProvider>\r\n            <div id=\"bin-data-sent\" className=\"bin-data\"/>\r\n            <div id=\"bin-data-received-content\" className=\"bin-data\"/>\r\n            <div id=\"bin-data-received-metadata\" className=\"bin-data\"/>\r\n            <MapContainer whenCreated={(mapInstance)=> { mapRef.current = mapInstance }} bounds={props.bounds} center={props.center} maxZoom={1} minZoom={-5} doubleClickZoom={false} crs={CRS.Simple}>\r\n                <LayersControl position=\"topright\" collapsed={false}>\r\n                    {/* layers + layer control */}\r\n                    <LayersControl.BaseLayer  checked name={props.theLayers[1][\"name\"]}>\r\n                        <LayerGroup ref={floors[0]}>\r\n                            <ImageOverlay bounds={props.bounds} url={props.pathToImg + props.theLayers[1][\"imageName\"]} />\r\n                        </LayerGroup>\r\n                    </LayersControl.BaseLayer>\r\n                    <LayersControl.BaseLayer name={props.theLayers[2][\"name\"]}>\r\n                        <LayerGroup ref={floors[1]}>\r\n                            <ImageOverlay bounds={props.bounds} url={props.pathToImg + props.theLayers[2][\"imageName\"]} />\r\n                        </LayerGroup>\r\n                    </LayersControl.BaseLayer>\r\n                    <LayersControl.BaseLayer name={props.theLayers[3][\"name\"]}>\r\n                        <LayerGroup ref={floors[2]}>\r\n                        <ImageOverlay bounds={props.bounds} url={props.pathToImg + props.theLayers[3][\"imageName\"]} />\r\n                        </LayerGroup>\r\n                    </LayersControl.BaseLayer>\r\n                    <LayersControl.BaseLayer name={props.theLayers[4][\"name\"]}>\r\n                        <LayerGroup ref={floors[3]}>\r\n                        <ImageOverlay bounds={props.bounds} url={props.pathToImg + props.theLayers[4][\"imageName\"]} />\r\n                        </LayerGroup>\r\n                    </LayersControl.BaseLayer>\r\n                    <LayersControl.BaseLayer name={props.theLayers[5][\"name\"]}>\r\n                        <LayerGroup ref={floors[4]}>\r\n                        <ImageOverlay bounds={props.bounds} url={props.pathToImg + props.theLayers[5][\"imageName\"]} />\r\n                        </LayerGroup>\r\n                    </LayersControl.BaseLayer>\r\n                </LayersControl>\r\n            </MapContainer>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GeomanPage;\r\n","// import $ from 'jquery';\r\nimport { HashRouter, Switch, Route, Link } from 'react-router-dom'\r\nimport {React, Component} from \"react\";\r\nimport Home from './Components/Home';\r\nimport Search from './Components/Search';\r\nimport GeomanPage from './Components/GeomanPage';\r\nimport { ChakraProvider, Button} from \"@chakra-ui/react\"\r\nimport 'leaflet/dist/leaflet.css';\r\n\r\nclass App extends Component {\r\n    render() {\r\n        // adjust img url\r\n        const baseUrl = window.location.origin;\r\n        const preFolderName = 'kartes/media/';\r\n        const pathToImg = baseUrl + '/' + preFolderName;\r\n\r\n        // map constants\r\n        const bounds = [[0,0], [1000, 1000]]\r\n        const center = [500,500]\r\n        const layers = {\r\n            0: {\r\n                name: \"0. stāvs\",\r\n                imageName: \"\"\r\n            },\r\n            1: {\r\n                name: \"1. stāvs\",\r\n                imageName: \"zm1.svg\"\r\n            },\r\n            2: {\r\n                name: \"2. stāvs\",\r\n                imageName: \"zm2.svg\"\r\n            },\r\n            3: {\r\n                name: \"3. stāvs\",\r\n                imageName: \"zm3.svg\"\r\n            },\r\n            4: {\r\n                name: \"4. stāvs\",\r\n                imageName: \"zm4.svg\"\r\n            },\r\n            5: {\r\n                name: \"5. stāvs\",\r\n                imageName: \"zm5.svg\"\r\n            },\r\n\r\n        }\r\n\r\n\r\n        return (\r\n            <>\r\n                <HashRouter>\r\n                    <ChakraProvider>\r\n                        <Link to=\"/\">\r\n                            <Button m={1} colorScheme=\"blue\">Home</Button>\r\n                        </Link>\r\n                        <Link to=\"/geoman\">\r\n                            <Button m={1} colorScheme=\"blue\">Geoman</Button>\r\n                        </Link>\r\n                        <Link to=\"/search\">\r\n                            <Button m={1} colorScheme=\"blue\">Search</Button>\r\n                        </Link>\r\n                        <Link to=\"/512\">\r\n                            <Button m={1} colorScheme=\"blue\">Search for #512</Button>\r\n                        </Link>\r\n                    </ChakraProvider>\r\n                    <Switch>\r\n                        <Route exact path='/geoman' render={(props) => (<GeomanPage {...props} pathToImg={pathToImg} bounds={bounds} center={center} theLayers={layers} />)}/>\r\n                        <Route exact path='/search' render={(props) => (<Search {...props} pathToImg={pathToImg} bounds={bounds} center={center} theLayers={layers} />)}/>\r\n                        <Route exact path='/:id?' render={(props) => (<Home {...props} pathToImg={pathToImg} bounds={bounds} center={center} theLayers={layers} />)}/>\r\n                        <Route status={404}>\r\n                            <div>Page not found.</div>\r\n                        </Route>\r\n                    </Switch>\r\n                </HashRouter>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}