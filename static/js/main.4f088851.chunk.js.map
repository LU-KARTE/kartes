{"version":3,"sources":["Components/SearchInput.js","Components/Search.js","Components/Home.js","Components/GeomanPage.js","App.js","utils/theme.js","index.js"],"names":["SearchInputField","props","pointerEvents","children","Search2","color","type","placeholder","value","searchTerm","onChange","handleChange","Search","useState","setError","isSearchLoaded","setSearchIsLoaded","displayResultsList","setDisplayResultsList","searchItems","setSearchItems","React","showAllFilters","setShowAllFilters","allFilters","initval","searchTags","setSearchTags","setSearchTerm","searchResults","setSearchResults","changeResultsView","setTo","resultsListDisplayStatusHandler","assignPoints","feature","stLowered","toLowerCase","replace","trim","roomID","roomType","roomFloor","extraInfo","split","searchWords","floorFilter","includes","points","searchWordsLength","length","i","forEach","infoToken","useEffect","fetch","then","res","json","result","error","$","document","on","event","target","closest","results","JSON","parse","stringify","filter","sort","feature1","feature2","points1","points2","push","id","width","className","onFocus","SearchInput","e","spacing","shadow","style","display","maxH","overflow","css","background","borderRadius","p","pb","size","onClick","ml","Close","cursor","w","h","startingHeight","in","flexFlow","Object","keys","map","key","filterItem","mr","mt","colorScheme","data-filtertype","data-filtername","newFilterName","currentTarget","getAttribute","newFilterType","current","item","handleTagChange","slice","to","_hover","bg","substr","toUpperCase","fontSize","Popup","roomDescription","properties","Home","onEachFeature","layer","state","searchingForRoomID","parseInt","setStyle","fillColor","popupContent","ReactDOMServer","bindPopup","currentBaseLayerFloorNumber","features","mapRerenderKey","groupedFeaturesGeoJSON","floor","this","match","params","setState","groupFeaturesByFloor","prevState","alert","ready","prevstate","prevProps","snapshot","floor1Checked","floor2Checked","floor3Checked","floor4Checked","floor5Checked","initGeoJSONStyle","fillOpacity","opacity","pl","ChevronLeft","ChevronRight","MapContainer","bounds","center","minZoom","doubleClickZoom","crs","CRS","Simple","LayersControl","position","collapsed","BaseLayer","checked","ref","baseLayerRef","name","theLayers","LayerGroup","GeoJSON","data","ImageOverlay","url","pathToImg","Component","withRouter","GeomanPage","mapRef","useRef","floors","useDisclosure","onClose","click","isOpen","onOpen","idRef","LoadJSONData","html","currentBaseLayer","pm","addControls","drawCircleMarker","drawCircle","drawMarker","drawPolyline","remove","off","ID","val","LUProperties","addLayer","m","processedLayers","layers","el","index","_shape","coordinates","getLatLngs","lng","lat","toString","processLayers","layersResult","_layers","findLayers","undefined","initialFocusRef","my","whenCreated","mapInstance","maxZoom","App","bind","window","location","origin","baseUrl","0","imageName","1","2","3","4","5","exact","path","render","status","customTheme","extendTheme","colors","primary","100","200","300","400","500","600","700","800","900","rootElement","getElementById","ReactDOM","StrictMode","theme"],"mappings":"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","file":"static/js/main.4f088851.chunk.js","sourcesContent":["import {Box, Input, InputGroup, InputLeftElement} from \"@chakra-ui/react\";\r\nimport {Search2Icon} from \"@chakra-ui/icons\";\r\nimport React from \"react\";\r\n\r\nfunction SearchInputField(props) {\r\n    // const {searchTerm, handleChange, ...rest} = props;\r\n\r\n    return (\r\n        <Box>\r\n            <InputGroup>\r\n                <InputLeftElement\r\n                    pointerEvents=\"none\"\r\n                    children={<Search2Icon color=\"gray.300\" />}\r\n                />\r\n                <Input\r\n                    type=\"text\"\r\n                    placeholder=\"Meklēt...\"\r\n                    value={props.searchTerm}\r\n                    onChange={props.handleChange}\r\n                />\r\n            </InputGroup>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default SearchInputField;","import React, {useEffect, useState} from \"react\";\r\nimport {\r\n    Badge,\r\n    Box, Button,\r\n    Center,\r\n    ChakraProvider, Fade,\r\n    Flex,\r\n    HStack,\r\n    Image,\r\n    Input,\r\n    InputGroup,\r\n    InputLeftElement,\r\n    List,\r\n    ListItem,\r\n    Spacer,\r\n    Tag,\r\n    Text,\r\n    useDisclosure,\r\n    ScaleFade, Slide, SlideFade, Collapse, Divider\r\n} from \"@chakra-ui/react\";\r\nimport {CloseIcon, Search2Icon, StarIcon} from '@chakra-ui/icons'\r\nimport {Link} from \"react-router-dom\";\r\nimport SearchInputField from './SearchInput';\r\nimport $ from 'jquery';\r\n\r\n\r\n// inspired by https://codesandbox.io/s/practical-nightingale-m2b5n?file=/src/index.js\r\nconst MAXSEARCHLISTROWS = 1000;\r\n\r\nfunction Search(props) {\r\n    const [error, setError] = useState(null);\r\n    const [isSearchLoaded, setSearchIsLoaded] = useState(false);\r\n    const [displayResultsList, setDisplayResultsList] = useState(\"none\"); // none or block\r\n    const [searchItems, setSearchItems] = useState([]);\r\n\r\n    const [showAllFilters, setShowAllFilters] = React.useState(false)\r\n\r\n    const handleToggleFilters = () => setShowAllFilters(!showAllFilters)\r\n\r\n    // it outputs in frontend in the same order as the list is here\r\n    const allFilters = {\r\n        \"roomTypes\" : [\r\n            {\r\n                \"filterTerm\": \"kabinets\",\r\n                \"frontendName\": \"Kabineti\",\r\n            },\r\n            {\r\n                \"filterTerm\": \"laboratorija\",\r\n                \"frontendName\": \"Laboratorijas\",\r\n            },\r\n            {\r\n                \"filterTerm\": \"auditorija\",\r\n                \"frontendName\": \"Auditorija\",\r\n            },\r\n            {\r\n                \"filterTerm\": \"tualete\",\r\n                \"frontendName\": \"Tualete\",\r\n            },\r\n            {\r\n                \"filterTerm\": \"telpa\",\r\n                \"frontendName\": \"Telpa\",\r\n            },\r\n        ],\r\n        \"floors\" : [\r\n            {\r\n                \"filterTerm\": \"1\",\r\n                \"frontendName\": \"1. stāvs\",\r\n            },\r\n            {\r\n                \"filterTerm\": \"2\",\r\n                \"frontendName\": \"2. stāvs\",\r\n            },\r\n            {\r\n                \"filterTerm\": \"3\",\r\n                \"frontendName\": \"3. stāvs\",\r\n            },\r\n            {\r\n                \"filterTerm\": \"4\",\r\n                \"frontendName\": \"4. stāvs\",\r\n            },\r\n            {\r\n                \"filterTerm\": \"5\",\r\n                \"frontendName\": \"5. stāvs\",\r\n            },\r\n            {\r\n                \"filterTerm\": \"6\",\r\n                \"frontendName\": \"6. stāvs\",\r\n            },\r\n            {\r\n                \"filterTerm\": \"7\",\r\n                \"frontendName\": \"7. stāvs\",\r\n            },\r\n            {\r\n                \"filterTerm\": \"8\",\r\n                \"frontendName\": \"8. stāvs\",\r\n            },\r\n            {\r\n                \"filterTerm\": \"9\",\r\n                \"frontendName\": \"9. stāvs\",\r\n            },\r\n        ]\r\n    }\r\n\r\n    const initval = {\r\n        \"roomTypes\" : [\r\n            \"kabinets\",\r\n            \"laboratorija\",\r\n            \"auditorija\",\r\n            \"tualete\",\r\n            \"telpa\",\r\n        ],\r\n        \"floors\" : [\r\n            \"1\",\r\n            \"2\",\r\n            \"3\",\r\n            \"4\",\r\n            \"5\",\r\n            \"6\",\r\n            \"7\",\r\n            \"8\",\r\n            \"9\",\r\n        ]\r\n    }\r\n    const [searchTags, setSearchTags] = useState(initval )\r\n\r\n    const [searchTerm, setSearchTerm] = React.useState(\"\");\r\n    const [searchResults, setSearchResults] = React.useState([]);\r\n\r\n    const changeResultsView = setTo =>  {\r\n        setDisplayResultsList(setTo);\r\n        if (props.resultsListDisplayStatusHandler)\r\n            props.resultsListDisplayStatusHandler(setTo);\r\n    }\r\n\r\n    const handleChange = e => {\r\n        setSearchTerm(e.target.value);\r\n    };\r\n\r\n    // toggle clicked filter\r\n    const handleTagChange = e => {\r\n        // clicked filter value\r\n        const newFilterName = e.currentTarget.getAttribute(\"data-filtername\");\r\n        const newFilterType = e.currentTarget.getAttribute(\"data-filtertype\");\r\n\r\n        // add filter\r\n        if (!searchTags[newFilterType].includes(newFilterName)) {\r\n            setSearchTags(current =>\r\n                {\r\n                    let result = JSON.parse(JSON.stringify(current));// deep copy; otherwise, does not work\r\n\r\n                    result[newFilterType].push(newFilterName);\r\n\r\n                    return result;\r\n                }\r\n            )\r\n        }\r\n\r\n        // remove filter\r\n        else {\r\n            setSearchTags(current => {\r\n                    let result = JSON.parse(JSON.stringify(current)); // deep copy; otherwise, does not work\r\n\r\n                    result[newFilterType] = searchTags[newFilterType].filter(item => !newFilterName.includes(item))\r\n\r\n                    return result;\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n    // Note: the empty deps array [] means\r\n    // this useEffect will run once\r\n    // similar to componentDidMount()\r\n    useEffect(() => {\r\n        // get data\r\n        fetch(\"/kartes/data.json\")\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    setSearchIsLoaded(true);\r\n                    setSearchItems(result);\r\n                },\r\n                (error) => {\r\n                    setSearchIsLoaded(true);\r\n                    setError(error);\r\n                }\r\n            )\r\n\r\n        // to hide search results on outside click\r\n        $(document).on(\"click\", function(event) {\r\n            if ($(event.target).closest('#searchWrapper').length === 0)\r\n                changeResultsView(\"none\");\r\n        });\r\n    }, [])\r\n\r\n    function resetFilters() {\r\n        setSearchTags(initval);\r\n    }\r\n\r\n    // to indicate how good the result is (depends on specific feature properties and search terms splitted)\r\n    function assignPoints(feature) {\r\n        let stLowered = searchTerm.toLowerCase().replace(/[^a-z0-9 ]/gi,'').trim(); // search term whole\r\n        let roomID = feature[\"properties\"][\"roomID\"].toLowerCase();\r\n        let roomType = feature[\"properties\"][\"roomType\"].toLowerCase();\r\n        let roomFloor = feature[\"properties\"][\"floor\"].toLowerCase();\r\n        let extraInfo = [];\r\n\r\n        if (feature[\"properties\"][\"extraInfo\"])\r\n            extraInfo = feature[\"properties\"][\"extraInfo\"].toLowerCase().split(\" \");\r\n\r\n        let searchWords = stLowered.split(\" \"); // array of words (search terms)\r\n\r\n        let floorFilter = searchTags[\"floors\"];\r\n        let roomTypesFilter = searchTags[\"roomTypes\"];\r\n\r\n        let filtersOK = roomTypesFilter.includes(roomType) && floorFilter.includes(roomFloor);\r\n\r\n        if (!filtersOK) {\r\n            return 0;\r\n        }\r\n\r\n        // award points to the potential search result\r\n        let includesPoints = 0.3;\r\n        let equalPoints = 1.0;\r\n        let points = 0;\r\n        let searchWordsLength = searchWords.length;\r\n\r\n        if (searchWordsLength === 0 || (searchWordsLength === 1 && (searchWords[0] === \"\" || searchWords[0] === \" \"))) {\r\n            return 1;\r\n        }\r\n\r\n        for (let i = 0; i < searchWordsLength; i++) {\r\n            if (searchWords[i] === \"\")\r\n                continue;\r\n\r\n            if (roomID === searchWords[i])\r\n                points += equalPoints;\r\n            else if (roomID.includes(searchWords[i]))\r\n                points += includesPoints;\r\n\r\n            if (roomType === searchWords[i])\r\n                points += equalPoints;\r\n            else if (roomType.includes(searchWords[i]))\r\n                points += includesPoints;\r\n\r\n            extraInfo.forEach(infoToken => {\r\n               if (infoToken === searchWords[i])\r\n                   points += equalPoints;\r\n               else if (infoToken.includes(searchWords[i]))\r\n                   points += includesPoints;\r\n            });\r\n        }\r\n\r\n        return points;\r\n    }\r\n\r\n    // search logic\r\n    React.useEffect(() => {\r\n        if (isSearchLoaded) {\r\n            const itemsToSort = JSON.parse(JSON.stringify(searchItems[\"features\"])); // deep copy\r\n            let results = itemsToSort\r\n                .filter(feature => {\r\n                    return assignPoints(feature) > 0;\r\n                })\r\n                .sort((feature1, feature2) => {\r\n                        let points1 = assignPoints(feature1); // points indicate how \"suitable\" the result is\r\n                        let points2 = assignPoints(feature2);\r\n\r\n                        if (points1 > points2) return -1;\r\n                        else if (points1 < points2) return 1;\r\n                        else return 0;\r\n                    }\r\n                )\r\n\r\n            // #999872 not good. for bug fix that 1 element does not appear (state is not changed somewhy).\r\n            if (results.length === 1)\r\n                results.push({});\r\n\r\n            setSearchResults(results);\r\n        }\r\n    }, [searchTerm, searchTags, searchItems]);\r\n\r\n    return (\r\n        <Box id=\"searchWrapper\" width=\"full\" className=\"App\" onFocus={() => changeResultsView(\"block\")}>\r\n                <SearchInputField searchTerm={searchTerm} handleChange={handleChange}/>\r\n                <div>\r\n                    {/* search results list */}\r\n                    {/*<Text mt={3} mb={3}><b>Atrastās telpas:</b></Text>*/}\r\n                    <List spacing={0} shadow={\"md\"} style={{display: displayResultsList}} maxH=\"90%\" overflow={\"scroll\"}\r\n                          css={{\r\n                        '&::-webkit-scrollbar': {\r\n                            width: '4px',\r\n                        },\r\n                        '&::-webkit-scrollbar-track': {\r\n                            width: '6px',\r\n                        },\r\n                        '&::-webkit-scrollbar-thumb': {\r\n                            background: \"#bbb\",\r\n                            borderRadius: '24px',\r\n                        },\r\n                    }}>\r\n\r\n                        {/* display filter tags */}\r\n                        <ListItem key=\"filterTags\" p={3} pb={0}>\r\n                            <Flex>\r\n                            <Button size=\"sm\" onClick={handleToggleFilters}>{showAllFilters ? \"Aizvērt\" : \"Atvērt\"} filtrus</Button>\r\n                            <Button ml={2} size=\"sm\" onClick={resetFilters}>Izslēgt filtrus</Button>\r\n                                <Spacer />\r\n                                <Center>\r\n                                <CloseIcon cursor={\"pointer\"} onClick={() => changeResultsView(\"none\")} w={5} h={5} />\r\n                                </Center>\r\n                            </Flex>\r\n\r\n                            <Collapse startingHeight={0} in={showAllFilters}>\r\n                                <Flex css={{\r\n                                    flexFlow: \"row wrap\"\r\n                                }}>\r\n                                    {\r\n                                        // iterate over all tags\r\n                                        Object.keys(allFilters).map((key) => {\r\n                                            return allFilters[key].map(filterItem => {\r\n\r\n                                                // if filter is active, set color to blue; otherwise, gray\r\n                                                let color = \"\";\r\n\r\n                                                searchTags[key].includes(filterItem[\"filterTerm\"]) ? color = \"blue\" : color = \"gray\"\r\n\r\n                                                return (\r\n                                                    <Tag mr={2} mt={2} size={\"lg\"} colorScheme={color} key={filterItem[\"filterTerm\"]} data-filtertype={key} data-filtername={filterItem[\"filterTerm\"]}\r\n                                                         onClick={(e) => handleTagChange(e)}>\r\n                                                        {filterItem[\"frontendName\"]}\r\n                                                    </Tag> )\r\n                                            })\r\n                                        })\r\n                                    }\r\n                                </Flex>\r\n\r\n                            </Collapse>\r\n                            <Divider mt={1}/>\r\n                        </ListItem>\r\n\r\n                        {/* Display search results */}\r\n                        {searchResults.length > 1 ?\r\n                            // (Object.keys(searchResults[1]).length === 0 ? 1 : MAXSEARCHLISTROWS) ==> this could be just MAXSEARCHLISTROWS but due #999872 it is so that does not break if only one result found.\r\n                            searchResults.slice(0, (Object.keys(searchResults[1]).length === 0 ? 1 : MAXSEARCHLISTROWS)).map((item, key) => (\r\n                                <Link onClick={() => changeResultsView(\"none\")} key={key} to={\"/\"+item[\"properties\"][\"floor\"]+ \"/\" + item[\"properties\"][\"roomID\"]}>\r\n                                    <ListItem _hover={{ bg: \"#f1f1f1\" }} p={3}>\r\n                                        <Flex>\r\n                                            <Text>\r\n                                                {item[\"properties\"][\"extraInfo\"] ?\r\n                                                    item[\"properties\"][\"extraInfo\"]\r\n                                                    :\r\n                                                    item[\"properties\"][\"roomID\"] + \". \" + item[\"properties\"][\"roomType\"].substr(0,1).toUpperCase() + item[\"properties\"][\"roomType\"].substr(1)\r\n                                                }\r\n                                            </Text>\r\n                                            <Spacer />\r\n                                            <Text> {item[\"properties\"][\"floor\"]}. stāvs</Text>\r\n                                        </Flex>\r\n                                    </ListItem>\r\n                                    <Divider />\r\n                                </Link>\r\n                            ))\r\n                            :\r\n                            <ListItem>\r\n                                <Text fontSize={\"md\"} p={3}>\r\n                                    Nekas netika atrasts.\r\n                                </Text>\r\n                            </ListItem>\r\n                        }\r\n                    </List>\r\n                    {/*<li key={\"item-\" +key} >{item[\"properties\"][\"floor\"]}. stāvs &nbsp; {item[\"properties\"][\"roomID\"]}.{item[\"properties\"][\"roomType\"]}</li>*/}\r\n                </div>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default Search;\r\n","import React, {Component} from 'react'\r\nimport {ImageOverlay, LayersControl, MapContainer, GeoJSON, LayerGroup, Polygon} from 'react-leaflet'\r\nimport {CRS} from 'leaflet';\r\nimport { withRouter } from \"react-router\";\r\nimport $ from \"jquery\";\r\nimport {Box, Center, Flex, Heading, Spacer, Text} from \"@chakra-ui/react\";\r\nimport {ChevronLeftIcon, ChevronRightIcon} from \"@chakra-ui/icons\";\r\nimport * as ReactDOMServer from \"react-dom/server\";\r\nimport Search from \"./Search\";\r\n\r\n\r\nimport \"@geoman-io/leaflet-geoman-free\";\r\nimport \"@geoman-io/leaflet-geoman-free/dist/leaflet-geoman.css\";\r\n\r\n\r\nconst MAXFLOOR = 5;\r\n\r\n\r\nconst Popup = ({ feature }) => {\r\n    let roomID = \"\";\r\n    let roomType = \"\";\r\n    let roomDescription = \"\";\r\n    let extraInfo = \"\";\r\n    if (feature.properties) {\r\n        if (feature.properties.roomID) {\r\n            roomID = feature.properties.roomID;\r\n        }\r\n\r\n        if (feature.properties.roomType) {\r\n            roomType = feature.properties.roomType;\r\n        }\r\n\r\n        if (feature.properties.roomDescription) {\r\n            roomDescription = feature.properties.roomDescription;\r\n        }\r\n\r\n        if (feature.properties.extraInfo) {\r\n            extraInfo = feature.properties.extraInfo;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Text fontSize=\"20px\"> {`  ${\r\n            (extraInfo ? \r\n                extraInfo : \r\n                roomID + \". \" + roomType)\r\n            + \" \" + roomDescription\r\n        }`}</Text>\r\n    );\r\n};\r\n\r\n\r\nclass Home extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentBaseLayerFloorNumber: 1,\r\n            searchingForRoomID: [],\r\n            features: {},\r\n            mapRerenderKey: 0,\r\n        }\r\n    }\r\n\r\n    // group results (features from JSON) by floors\r\n    groupFeaturesByFloor (features) {\r\n        let groupedFeaturesGeoJSON = {};\r\n\r\n        features.forEach(feature => {\r\n            let floor = feature.properties.floor;\r\n\r\n            if (!(floor in groupedFeaturesGeoJSON)) { // floor not yet initialized\r\n                groupedFeaturesGeoJSON[floor] = {\r\n                    \"type\": \"FeatureCollection\",\r\n                    \"features\": []\r\n                }\r\n            }\r\n\r\n            groupedFeaturesGeoJSON[floor][\"features\"].push(feature);\r\n        })\r\n\r\n        return groupedFeaturesGeoJSON;\r\n    }\r\n\r\n    // componentDidMount\r\n    componentDidMount() {\r\n        if (this.props.match.params.floor) {\r\n            this.setState({\r\n                currentBaseLayerFloorNumber: parseInt(this.props.match.params.floor),\r\n            })\r\n        }\r\n\r\n        if (this.props.match.params.id) {\r\n            this.setState({\r\n                searchingForRoomID: [parseInt(this.props.match.params.id)]\r\n            })\r\n        }\r\n\r\n\r\n        fetch(\"/kartes/data.json\")\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    let groupedFeaturesGeoJSON = this.groupFeaturesByFloor(result.features);\r\n                    this.setState({features: groupedFeaturesGeoJSON});\r\n                    this.setState(prevState => ({mapRerenderKey: prevState.mapRerenderKey + 1}))\r\n                },\r\n                (error) => {\r\n                    alert(\"error fetching data....\");\r\n                }\r\n            )\r\n\r\n        $(document).ready(() => {\r\n\r\n            $(\"#FloorDownIcon\").on(\"click\", () => {\r\n                if (this.state.currentBaseLayerFloorNumber > 1) {\r\n                    this.setState(prevstate => (\r\n                        {\"currentBaseLayerFloorNumber\": prevstate[\"currentBaseLayerFloorNumber\"] - 1}\r\n                    ));\r\n\r\n                    this.setState(prevState => ({mapRerenderKey: prevState.mapRerenderKey + 1}));\r\n                }\r\n            })\r\n\r\n            $(\"#FloorUpIcon\").on(\"click\", () => {\r\n                if (this.state.currentBaseLayerFloorNumber < MAXFLOOR) {\r\n                    this.setState(prevstate => (\r\n                        {\"currentBaseLayerFloorNumber\": prevstate[\"currentBaseLayerFloorNumber\"] + 1}\r\n                    ));\r\n\r\n                    this.setState(prevState => ({mapRerenderKey: prevState.mapRerenderKey + 1}));\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (!this.state.searchingForRoomID.includes(parseInt(this.props.match.params.id)) && this.props.match.params.id && this.props.match.params.floor) {\r\n            this.setState({searchingForRoomID: [parseInt(this.props.match.params.id)]});\r\n            this.setState({currentBaseLayerFloorNumber: parseInt(this.props.match.params.floor)});\r\n            this.setState(prevState => ({mapRerenderKey: prevState.mapRerenderKey + 1}));\r\n        }\r\n    }\r\n\r\n    onEachFeature = (feature, layer) => {\r\n        if (this.state.searchingForRoomID && this.state.searchingForRoomID.includes(parseInt(feature.properties.roomID))) {\r\n            layer.setStyle({\"fillOpacity\": 0.5, fillColor: \"red\"});\r\n        }\r\n\r\n        const popupContent = ReactDOMServer.renderToString(\r\n            <Popup feature={feature} />\r\n        );\r\n        layer.bindPopup(popupContent);\r\n    };\r\n\r\n    render() {\r\n        // for floor changes consts... better would be to include in JSX elements directly but somewhy not working.\r\n        const floor1Checked = this.state.currentBaseLayerFloorNumber == 1;\r\n        const floor2Checked = this.state.currentBaseLayerFloorNumber == 2;\r\n        const floor3Checked = this.state.currentBaseLayerFloorNumber == 3;\r\n        const floor4Checked = this.state.currentBaseLayerFloorNumber == 4;\r\n        const floor5Checked = this.state.currentBaseLayerFloorNumber == 5;\r\n\r\n        // let someStats = ;\r\n\r\n        const initGeoJSONStyle = {\r\n            fillOpacity: 0,\r\n            fillColor: \"transparent\",\r\n            color: \"transparent\",\r\n            opacity: 1\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <Flex p={4}>\r\n                    {/*<Box>*/}\r\n                    {/*<Image h={50} src={pathToImg + \"logo.png\"}  fallbackSrc=\"https://via.placeholder.com/150\" />*/}\r\n                    {/*</Box>*/}\r\n                    {/*<Spacer />*/}\r\n                    <Search resultsListDisplayStatusHandler={(setTo) => {\r\n                        if (setTo === \"block\") {\r\n                            $(\".hideOnResultsListShow\").css(\"display\", \"none\");\r\n                            $(\".hideOnResultsListShowFlex\").css(\"display\", \"none\");\r\n                        } else if (setTo === \"none\") {\r\n                            $(\".hideOnResultsListShow\").css(\"display\", \"block\");\r\n                            $(\".hideOnResultsListShowFlex\").css(\"display\", \"flex\");\r\n                        }\r\n                    }}/>\r\n                </Flex>\r\n\r\n                <Flex mr={4} className=\"hideOnResultsListShowFlex\">\r\n                    {this.state.searchingForRoomID.length > 0 ?\r\n                        <Text pl={4}>Tiek meklēta\r\n                            {\r\n                                this.state.searchingForRoomID.map(\r\n                                    item => (\" \" + item + \". telpa \" )\r\n                                )\r\n                            }\r\n                        </Text>\r\n                        : \"\"\r\n                    }\r\n                    <Spacer />\r\n                    <Center>\r\n                        <ChevronLeftIcon id=\"FloorDownIcon\" style={{\"cursor\": \"pointer\"}} w={8} h={8}/>\r\n                        <Text fontSize={20}>{this.state.currentBaseLayerFloorNumber}. Stāvs</Text>\r\n                        <ChevronRightIcon id=\"FloorUpIcon\" style={{\"cursor\": \"pointer\"}} w={8} h={8}/>\r\n                    </Center>\r\n                </Flex>\r\n\r\n                <MapContainer className=\"hideOnResultsListShow\" key={this.state.mapRerenderKey} bounds={this.props.bounds} center={this.props.center} minZoom={-2} doubleClickZoom={false} crs={CRS.Simple}>\r\n                    <LayersControl position=\"topright\" collapsed={false}>\r\n                        {/* layers + layer control */}\r\n                        <LayersControl.BaseLayer checked={floor1Checked} ref={this.props.baseLayerRef} name={this.props.theLayers[1][\"name\"]}>\r\n                            <LayerGroup>\r\n                                <GeoJSON key={this.state.mapRerenderKey+1} style={initGeoJSONStyle} data={this.state.features[1]} onEachFeature={this.onEachFeature}/>\r\n                                <ImageOverlay bounds={this.props.bounds} url={this.props.pathToImg + this.props.theLayers[1][\"imageName\"]} />\r\n                            </LayerGroup>\r\n                        </LayersControl.BaseLayer>\r\n                        <LayersControl.BaseLayer checked={floor2Checked} name={this.props.theLayers[2][\"name\"]}>\r\n                            <LayerGroup>\r\n                                <GeoJSON key={this.state.mapRerenderKey+2} style={initGeoJSONStyle} data={this.state.features[2]} onEachFeature={this.onEachFeature}/>\r\n                                <ImageOverlay bounds={this.props.bounds} url={this.props.pathToImg + this.props.theLayers[2][\"imageName\"]} />\r\n                            </LayerGroup>\r\n                        </LayersControl.BaseLayer>\r\n                        <LayersControl.BaseLayer checked={floor3Checked} name={this.props.theLayers[3][\"name\"]}>\r\n                            <LayerGroup>\r\n                                <GeoJSON key={this.state.mapRerenderKey+3} style={initGeoJSONStyle} data={this.state.features[3]} onEachFeature={this.onEachFeature}/>\r\n                                <ImageOverlay bounds={this.props.bounds} url={this.props.pathToImg + this.props.theLayers[3][\"imageName\"]} />\r\n                            </LayerGroup>\r\n                        </LayersControl.BaseLayer>\r\n                        <LayersControl.BaseLayer checked={floor4Checked} name={this.props.theLayers[4][\"name\"]}>\r\n                            <LayerGroup>\r\n                                <GeoJSON key={this.state.mapRerenderKey+4} style={initGeoJSONStyle} data={this.state.features[4]} onEachFeature={this.onEachFeature}/>\r\n                                <ImageOverlay bounds={this.props.bounds} url={this.props.pathToImg + this.props.theLayers[4][\"imageName\"]} />\r\n                            </LayerGroup>\r\n                        </LayersControl.BaseLayer>\r\n                        <LayersControl.BaseLayer checked={floor5Checked} name={this.props.theLayers[5][\"name\"]}>\r\n                            <LayerGroup>\r\n                                <GeoJSON key={this.state.mapRerenderKey+5} style={initGeoJSONStyle} data={this.state.features[5]} onEachFeature={this.onEachFeature}/>\r\n                                <ImageOverlay bounds={this.props.bounds} url={this.props.pathToImg + this.props.theLayers[5][\"imageName\"]} />\r\n                            </LayerGroup>\r\n                        </LayersControl.BaseLayer>\r\n                    </LayersControl>\r\n                </MapContainer>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(Home);\r\n","import React, {useState} from 'react'\r\nimport $ from 'jquery'\r\nimport {\r\n    Button,\r\n    ChakraProvider, Flex, FormControl, FormHelperText, FormLabel, Input,\r\n    Modal, ModalBody,\r\n    ModalCloseButton,\r\n    ModalContent, ModalFooter,\r\n    ModalHeader,\r\n    ModalOverlay, Select, useDisclosure\r\n} from \"@chakra-ui/react\";\r\nimport {\r\n    MapContainer,\r\n    LayerGroup,\r\n    LayersControl,\r\n    ImageOverlay,\r\n    Polygon\r\n} from \"react-leaflet\";\r\nimport {CRS, Polyline} from \"leaflet\";\r\n\r\nimport \"@geoman-io/leaflet-geoman-free\";\r\nimport \"@geoman-io/leaflet-geoman-free/dist/leaflet-geoman.css\";\r\nimport Search from \"./Search\";\r\n\r\n// still to do\r\n// 1. add modal edit option (open modal, preferably with written previous data)\r\n// 2. add some validation, for ID only numbers, both fields required etc\r\n// 3. is there a bug that first layer is removed even when submitting? First time had, then no.\r\n// 4. db schema - should data be grouped by floor number or floor number should be in properties field for each?\r\n// 5. remove unneeded stuff\r\n// 6. json bin ? or no.\r\n\r\nfunction GeomanPage(props) {\r\n\r\n    const mapRef = React.useRef();\r\n    const floors = [React.useRef(), React.useRef(), React.useRef(), React.useRef(), React.useRef()];\r\n\r\n    const { isOpen, onOpen, onClose } = useDisclosure({\r\n        onClose() { $(\"#cancelButton\").click(); }\r\n    }) // for modal\r\n    const idRef = React.useRef() // for modal\r\n    const [JSONData, LoadJSONData] = useState({})\r\n\r\n\r\n    function printJSON() {\r\n        let map = mapRef.current;\r\n        let rawLayers = null;\r\n        let processedLayers = null;\r\n        if (map) {\r\n            rawLayers = findLayers();\r\n            processedLayers = processLayers(rawLayers);\r\n        }\r\n\r\n        $(\"#bin-data-sent\").html(\"<pre>\" + JSON.stringify(processedLayers, undefined, 2) + \"</pre>\");\r\n    }\r\n\r\n    function processLayers(layers) {\r\n\r\n        let map = mapRef.current;\r\n\r\n        if (map) {\r\n\r\n            let result = {\r\n                \"type\": \"FeatureCollection\",\r\n                \"features\": []\r\n            };\r\n\r\n            for (let key in layers) {\r\n                let target = result.features;\r\n                layers[key].forEach((el, index) => {\r\n                    let shape = el.pm._shape;\r\n\r\n                    // get coordinates\r\n                    let coordinates = [];\r\n                    // console.log(el._parts[0]);\r\n\r\n\r\n\r\n                    //Bounds {min: Point, max: Point}\r\n                    // max: Point {x: 837, y: 145}\r\n                    // min: Point {x: -337, y: -645}\r\n                    // edit coordinates so it is 0 ... 1000... if console.log \"map\", it has _size and _pixelOrigin which would break everything otherwise\r\n                    // let bounds = map.getPixelBounds();\r\n                    // let xMin = bounds.min.x;\r\n                    // let xMax = bounds.max.x;\r\n                    // let yMin = bounds.min.y;\r\n                    // let yMax = bounds.max.y;\r\n                    // let xLength = xMax - xMin;\r\n                    // let yLength = yMax - yMin;\r\n                    // console.log(\"xmin: \", xMin, \"  ymin: \", yMin, \"  xMax: \", xMax, \"  yMax: \", yMax)\r\n\r\n\r\n                    el.getLatLngs()[0].forEach((el, index) => {\r\n                        coordinates.push([el.lng, el.lat]);\r\n                    });\r\n\r\n                    // push clean geoJSON data object\r\n                    target.push({\r\n                        // \"type\": shape,\r\n                        \"type\": \"Feature\",\r\n                        \"id\": key.toString() + index.toString(),\r\n                        \"properties\": {\r\n                            \"floor\": key,\r\n                            \"roomID\": el.LUProperties.id,\r\n                            \"roomType\": el.LUProperties.type,\r\n                            \"extraInfo\": el.LUProperties.extraInfo\r\n                        },\r\n                        \"geometry\": {\r\n                            \"type\": \"Polygon\",\r\n                            \"coordinates\": [coordinates]\r\n                        }\r\n                    })\r\n                });\r\n            }\r\n\r\n            return result;\r\n        } else {\r\n            alert(\"there was error processing map...\");\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    // filter drawed layers grouped by floor\r\n    function findLayers() {\r\n        let layersResult = {\"1\": [], \"2\": [], \"3\": [], \"4\": [], \"5\": []}; // init empty\r\n\r\n        // go over each floor and add each floor's drawings\r\n        floors.forEach((el, index) => {\r\n            let layers = el.current._layers; // this is a little sketchy to use _layers variable\r\n            for (let key in layers) {\r\n                // if (\r\n                //     layers[key] instanceof Polyline || // only if its polyline or polygon\r\n                //     layers[key] instanceof Polygon\r\n                // ) {\r\n                if (\"LUProperties\" in layers[key])\r\n                    layersResult[index+1].push(layers[key]);\r\n                // }\r\n            }\r\n        });\r\n\r\n        // // filter out layers that don't have the leaflet-geoman instance\r\n        // layersResult = layersResult.filter(layer => !!layer.pm);\r\n        //\r\n        // // filter out everything thats leaflet-geoman specific temporary stuff\r\n        // layersResult = layersResult.filter(layer => !layer._pmTempLayer);\r\n\r\n        return layersResult;\r\n    }\r\n\r\n    $(document).ready(function() {\r\n        let map = mapRef.current;\r\n        \r\n        $(\"#button-clear\").on(\"click\", () => {\r\n            $(\"#bin-data-sent\").html(\"\");\r\n            $(\"#bin-data-received-content\").html(\"\");\r\n        });\r\n\r\n        $(\"#button-receive-data\").on(\"click\", () => {\r\n            fetch(\"/kartes/data.json\")\r\n                .then(res => res.json())\r\n                .then(\r\n                    (result) => {\r\n                        LoadJSONData(result);\r\n                        $(\"#bin-data-received-content\").html(JSON.stringify(result));\r\n                    },\r\n                    (error) => {\r\n                        // ... some error parsing\r\n                    }\r\n                )\r\n        })\r\n\r\n        if (map) {\r\n            let currentBaseLayer = floors[0].current;\r\n\r\n\r\n\r\n            //Bounds {min: Point, max: Point}\r\n            // max: Point {x: 837, y: 145}\r\n            // min: Point {x: -337, y: -645}\r\n            // console.log(map.getPixelBounds());\r\n            // let bounds = map.getPixelBounds();\r\n            // let xMin = bounds.min.x;\r\n            // let xMax = bounds.max.x;\r\n            // let yMin = bounds.min.y;\r\n            // let yMax = bounds.max.y;\r\n\r\n            map.pm.addControls({\r\n                drawCircleMarker: false,\r\n                drawCircle: false,\r\n                drawMarker: false,\r\n                drawPolyline: false\r\n            });\r\n\r\n\r\n            // console.log(map.getPixelOrigin())\r\n\r\n            // on new drawing created\r\n            map.on('pm:create', function (e) {\r\n\r\n                // console.log(e.layer._parts[0]);\r\n                // console.log(\"HELELO\");\r\n                // console.log(e.layer.getLatLngs());\r\n                // let points = e.layer.getLatLngs();\r\n                // let\r\n\r\n                onOpen(); // opens modal\r\n\r\n                // remove layer if cancelled\r\n                $(\"#cancelButton\").on(\"click\", function () {\r\n                    e.layer.remove();\r\n                    $(\"#mainForm\").off(\"click\");\r\n                    $(\"#cancelbutton\").off(\"click\");\r\n                });\r\n\r\n                // add layer if form submitted\r\n                $(\"#mainForm\").on(\"submit\", function (event) {\r\n                    let ID = $(\"#idField\").val();\r\n                    let type = $(\"#typeField\").val();\r\n                    let extraInfo = $(\"#extraInfoField\").val();\r\n                    e.layer.LUProperties = {};\r\n                    e.layer.LUProperties.id = ID;\r\n                    e.layer.LUProperties.type = type;\r\n                    e.layer.LUProperties.extraInfo = extraInfo;\r\n                    currentBaseLayer.addLayer(e.layer);\r\n                    $(\"#mainForm\").off(\"submit\");\r\n                    $(\"#cancelButton\").off(\"click\");\r\n                });\r\n\r\n                // on floor change\r\n            }).on('baselayerchange', function (e) {\r\n                currentBaseLayer = e.layer;\r\n            })\r\n        }\r\n    });\r\n\r\n    //\r\n    return (\r\n        <div id=\"geoman-wrapper\">\r\n            <Flex p={4}>\r\n                {/*<Box>*/}\r\n                {/*<Image h={50} src={pathToImg + \"logo.png\"}  fallbackSrc=\"https://via.placeholder.com/150\" />*/}\r\n                {/*</Box>*/}\r\n                {/*<Spacer />*/}\r\n\r\n                <Search />\r\n            </Flex>\r\n            <Button m={1} onClick={printJSON} id=\"button-geoJSON\">Generate JSON</Button>\r\n            <Button m={1} id=\"button-receive-data\">Receive data</Button>\r\n            <Button m={1} id=\"button-clear\">Clear data</Button>\r\n\r\n            <Modal\r\n                initialFocusRef={idRef}\r\n                isOpen={isOpen}\r\n                onClose={onClose}\r\n            >\r\n                <ModalOverlay />\r\n                <ModalContent>\r\n                    <ModalHeader>Pievienot jaunu telpu</ModalHeader>\r\n                    <ModalCloseButton />\r\n                    <form id=\"mainForm\">\r\n                        <ModalBody pb={6}>\r\n                            <FormControl>\r\n                                <FormLabel>ID*</FormLabel>\r\n                                <Input type=\"number\"  id=\"idField\" ref={idRef} placeholder=\"Piemēram, 312\"/>\r\n                            </FormControl>\r\n\r\n\r\n                            <FormControl my={5}>\r\n                                <FormLabel>Tips*</FormLabel>\r\n                                <Select id=\"typeField\" placeholder=\"Izvēlies tipu\">\r\n                                    <option value=\"kabinets\">Kabinets</option>\r\n                                    <option value=\"laboratorija\">Laboratorija</option>\r\n                                    <option value=\"auditorija\">Auditorija</option>\r\n                                    <option value=\"tualete\">Tualetes</option>\r\n                                    <option value=\"telpa\">Cita telpa</option>\r\n                                </Select>\r\n                            </FormControl>\r\n\r\n\r\n                            <FormControl>\r\n                                <FormLabel>Telpas nosaukums</FormLabel>\r\n                                <Input id=\"extraInfoField\" placeholder=\"Piemēram, Studentu pašpārvaldes telpa\"/>\r\n                                <FormHelperText>Šo jāieraksta tikai tad, ja telpai ir īpašs nosaukums. Tas aizstāj ID un tipu. </FormHelperText>\r\n                            </FormControl>\r\n                        </ModalBody>\r\n\r\n                        <ModalFooter>\r\n                            <Button onClick={onClose} type=\"submit\" colorScheme=\"blue\" mr={3}>\r\n                                Saglabāt\r\n                            </Button>\r\n                            <Button onClick={onClose} id=\"cancelButton\">Atcelt</Button>\r\n                        </ModalFooter>\r\n                    </form>\r\n                </ModalContent>\r\n            </Modal>\r\n\r\n            <div id=\"bin-data-sent\" className=\"bin-data\"/>\r\n            <div id=\"bin-data-received-content\" className=\"bin-data\"/>\r\n            <MapContainer whenCreated={(mapInstance)=> { mapRef.current = mapInstance }} bounds={props.bounds} center={props.center} maxZoom={1} minZoom={-5} doubleClickZoom={false} crs={CRS.Simple}>\r\n                <LayersControl position=\"topright\" collapsed={false}>\r\n                    {/* layers + layer control */}\r\n                    <LayersControl.BaseLayer  checked name={props.theLayers[1][\"name\"]}>\r\n                        <LayerGroup ref={floors[0]}>\r\n                            <ImageOverlay bounds={props.bounds} url={props.pathToImg + props.theLayers[1][\"imageName\"]} />\r\n                        </LayerGroup>\r\n                    </LayersControl.BaseLayer>\r\n                    <LayersControl.BaseLayer name={props.theLayers[2][\"name\"]}>\r\n                        <LayerGroup ref={floors[1]}>\r\n                            <ImageOverlay bounds={props.bounds} url={props.pathToImg + props.theLayers[2][\"imageName\"]} />\r\n                        </LayerGroup>\r\n                    </LayersControl.BaseLayer>\r\n                    <LayersControl.BaseLayer name={props.theLayers[3][\"name\"]}>\r\n                        <LayerGroup ref={floors[2]}>\r\n                            <ImageOverlay bounds={props.bounds} url={props.pathToImg + props.theLayers[3][\"imageName\"]} />\r\n                        </LayerGroup>\r\n                    </LayersControl.BaseLayer>\r\n                    <LayersControl.BaseLayer name={props.theLayers[4][\"name\"]}>\r\n                        <LayerGroup ref={floors[3]}>\r\n                            <ImageOverlay bounds={props.bounds} url={props.pathToImg + props.theLayers[4][\"imageName\"]} />\r\n                        </LayerGroup>\r\n                    </LayersControl.BaseLayer>\r\n                    <LayersControl.BaseLayer name={props.theLayers[5][\"name\"]}>\r\n                        <LayerGroup ref={floors[4]}>\r\n                            <ImageOverlay bounds={props.bounds} url={props.pathToImg + props.theLayers[5][\"imageName\"]} />\r\n                        </LayerGroup>\r\n                    </LayersControl.BaseLayer>\r\n                </LayersControl>\r\n            </MapContainer>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GeomanPage;\r\n","import { HashRouter, Switch, Route, Link } from 'react-router-dom'\r\nimport React, {Component} from \"react\";\r\nimport Home from './Components/Home';\r\nimport Search from './Components/Search';\r\nimport GeomanPage from './Components/GeomanPage';\r\nimport SearchInputField from './Components/SearchInput';\r\nimport {\r\n    Button,\r\n    Flex,\r\n    Box,\r\n    Spacer,\r\n    Image,\r\n    Center,\r\n    Text,\r\n    HStack,\r\n    VStack,\r\n    List,\r\n    ListIcon,\r\n    ListItem, Divider\r\n} from \"@chakra-ui/react\"\r\nimport 'leaflet/dist/leaflet.css';\r\nimport {ChevronLeftIcon, ChevronRightIcon, HamburgerIcon} from \"@chakra-ui/icons\";\r\nimport $ from \"jquery\";\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            searchTerm: \"\"\r\n        };\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    handleChange (e) {\r\n        this.setState(prevState => {\r\n                return {searchTerm: e.target.value}\r\n            }\r\n        );\r\n    }\r\n\r\n    render() {\r\n        // adjust img url\r\n        const baseUrl = window.location.origin;\r\n        const preFolderName = 'kartes/media/';\r\n        const pathToImg = baseUrl + '/' + preFolderName;\r\n\r\n        // map constants\r\n        const bounds = [[0,0], [1000, 1000]]\r\n        const center = [500,500]\r\n        const layers = {\r\n            0: {\r\n                name: \"0. stāvs\",\r\n                imageName: \"\"\r\n            },\r\n            1: {\r\n                name: \"1. stāvs\",\r\n                imageName: \"zm1.svg\"\r\n            },\r\n            2: {\r\n                name: \"2. stāvs\",\r\n                imageName: \"zm2.svg\"\r\n            },\r\n            3: {\r\n                name: \"3. stāvs\",\r\n                imageName: \"zm3.svg\"\r\n            },\r\n            4: {\r\n                name: \"4. stāvs\",\r\n                imageName: \"zm4.svg\"\r\n            },\r\n            5: {\r\n                name: \"5. stāvs\",\r\n                imageName: \"zm5.svg\"\r\n            },\r\n\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <HashRouter>\r\n                    <Switch>\r\n                        <Route exact path='/geoman' render={(props) => (<GeomanPage {...props} pathToImg={pathToImg} bounds={bounds} center={center} theLayers={layers} />)}/>\r\n                        <Route exact path='/search' render={(props) => (<Search {...props} pathToImg={pathToImg} bounds={bounds} center={center} theLayers={layers} />)}/>\r\n                        {/*<Route exact path='/header' render={(props) => (<Header {...props} pathToImg={pathToImg}/>)}/>*/}\r\n                        <Route exact path='/:floor?/:id?' render={(props) => (<Home {...props} pathToImg={pathToImg} bounds={bounds} center={center} theLayers={layers} />)}/>\r\n                        <Route status={404}>\r\n                            <div>Page not found.</div>\r\n                        </Route>\r\n                    </Switch>\r\n\r\n\r\n                    {/*<Link to=\"/\">*/}\r\n                    {/*    <Button size=\"xs\" m={1} colorScheme=\"blue\">Home</Button>*/}\r\n                    {/*</Link>*/}\r\n                    {/*<Link to=\"/geoman\">*/}\r\n                    {/*    <Button size=\"xs\" m={1} colorScheme=\"blue\">Geoman</Button>*/}\r\n                    {/*</Link>*/}\r\n                    {/*<Link to=\"/search\">*/}\r\n                    {/*    <Button size=\"xs\" m={1} colorScheme=\"blue\">Search</Button>*/}\r\n                    {/*</Link>*/}\r\n                    {/*<Link to=\"/512\">*/}\r\n                    {/*    <Button size=\"xs\" m={1} colorScheme=\"blue\">Search for #512</Button>*/}\r\n                    {/*</Link>*/}\r\n                </HashRouter>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import { extendTheme } from \"@chakra-ui/react\";\n\nconst colors = {\n  primary: {\n    100: \"#E5FCF1\",\n    200: \"#27EF96\",\n    300: \"#10DE82\",\n    400: \"#0EBE6F\",\n    500: \"#0CA25F\",\n    600: \"#0A864F\",\n    700: \"#086F42\",\n    800: \"#075C37\",\n    900: \"#064C2E\"\n  }\n};\n\nconst customTheme = extendTheme({ colors });\n\nexport default customTheme;\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { ChakraProvider } from \"@chakra-ui/react\";\r\nimport './index.css';\r\n\r\nimport App from \"./App\";\r\nimport customTheme from \"./utils/theme\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <ChakraProvider theme={customTheme}>\r\n            <App />\r\n        </ChakraProvider>\r\n    </React.StrictMode>,\r\n    rootElement\r\n);\r\n"],"sourceRoot":""}