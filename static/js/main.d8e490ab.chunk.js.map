{"version":3,"sources":["Components/Home.js","Components/SearchInput.js","Components/Search.js","Components/GeomanPage.js","App.js","utils/theme.js","index.js"],"names":["Home","fetchData","id","alert","fetch","then","res","json","result","foundFlag","console","log","forEach","feature","error","this","props","match","params","prevProps","prevState","snapshot","MapContainer","bounds","center","minZoom","doubleClickZoom","crs","CRS","Simple","LayersControl","position","collapsed","BaseLayer","ref","baseLayerRef","checked","name","theLayers","ImageOverlay","url","pathToImg","Component","withRouter","SearchInputField","pointerEvents","children","Search2","color","type","placeholder","value","searchTerm","onChange","handleChange","Search","useState","setError","isSearchLoaded","setSearchIsLoaded","searchItems","setSearchItems","allFilters","searchTags","setSearchTags","React","setSearchTerm","searchResults","setSearchResults","useEffect","results","filter","stLowered","toLowerCase","roomID","roomType","roomFloor","floorFilter","filtersOK","includes","searchParamsOK","className","SearchInput","e","target","css","flexFlow","m","Object","keys","map","key","filterItem","size","colorScheme","data-filtertype","data-filtername","onClick","newFilterName","currentTarget","getAttribute","newFilterType","current","JSON","parse","stringify","item","push","handleTagChange","shadow","maxW","borderWidth","borderRadius","overflow","to","bg","p","fontSize","GeomanPage","mapRef","useRef","floors","useDisclosure","onClose","$","click","isOpen","onOpen","idRef","document","ready","pm","addControls","drawCircleMarker","drawCircle","drawMarker","drawPolyline","currentBaseLayer","on","layer","remove","off","event","ID","val","LUProperties","addLayer","processedLayers","layers","features","el","index","shape","_shape","coordinates","_parts","x","y","toString","processLayers","layersResult","_layers","Polyline","Polygon","findLayers","html","undefined","initialFocusRef","pb","mt","mr","whenCreated","mapInstance","maxZoom","LayerGroup","App","state","currentFloor","bind","setState","prevstate","window","location","origin","baseUrl","0","imageName","1","2","3","4","5","width","ChevronLeft","style","w","h","ChevronRight","exact","path","render","status","customTheme","extendTheme","colors","primary","100","200","300","400","500","600","700","800","900","rootElement","getElementById","ReactDOM","StrictMode","theme"],"mappings":"0SAKMA,E,4MAYFC,UAAY,SAAAC,GACHA,IAELC,MAAM,oCAAsCD,GAE5CE,MAAM,qBACDC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACG,SAACG,GAEG,IAAIC,GAAY,EAChBC,QAAQC,IAAI,iBACZD,QAAQC,IAAIH,GACZA,EAAM,SAAaI,SAAS,SAACC,GACjBA,EAAO,WAAP,SAAoCX,IACpCQ,QAAQC,IAAI,iCACZD,QAAQC,IAAIE,GACZJ,GAAY,MAInBA,GACDC,QAAQC,IAAI,0BAIpB,SAACG,S,uDApCb,WACI,IAAMZ,EAAKa,KAAKC,MAAMC,MAAMC,OAAOhB,GACnCa,KAAKd,UAAUC,K,gCAGnB,SAAmBiB,EAAWC,EAAWC,GACrC,IAAMnB,EAAKa,KAAKC,MAAMC,MAAMC,OAAOhB,GACnCa,KAAKd,UAAUC,K,oBAmCnB,WACI,OACI,cAACoB,EAAA,EAAD,CAAcC,OAAQR,KAAKC,MAAMO,OAAQC,OAAQT,KAAKC,MAAMQ,OAAQC,SAAU,EAAGC,iBAAiB,EAAOC,IAAKC,MAAIC,OAAlH,SACI,eAACC,EAAA,EAAD,CAAeC,SAAS,WAAWC,WAAW,EAA9C,UAEI,cAACF,EAAA,EAAcG,UAAf,CAAyBC,IAAKnB,KAAKC,MAAMmB,aAAcC,SAAO,EAACC,KAAMtB,KAAKC,MAAMsB,UAAU,GAArB,KAArE,SACI,cAACC,EAAA,EAAD,CAAchB,OAAQR,KAAKC,MAAMO,OAAQiB,IAAKzB,KAAKC,MAAMyB,UAAY1B,KAAKC,MAAMsB,UAAU,GAArB,cAEzE,cAACR,EAAA,EAAcG,UAAf,CAAyBI,KAAMtB,KAAKC,MAAMsB,UAAU,GAArB,KAA/B,SACI,cAACC,EAAA,EAAD,CAAchB,OAAQR,KAAKC,MAAMO,OAAQiB,IAAKzB,KAAKC,MAAMyB,UAAY1B,KAAKC,MAAMsB,UAAU,GAArB,cAEzE,cAACR,EAAA,EAAcG,UAAf,CAAyBI,KAAMtB,KAAKC,MAAMsB,UAAU,GAArB,KAA/B,SACI,cAACC,EAAA,EAAD,CAAchB,OAAQR,KAAKC,MAAMO,OAAQiB,IAAKzB,KAAKC,MAAMyB,UAAY1B,KAAKC,MAAMsB,UAAU,GAArB,cAEzE,cAACR,EAAA,EAAcG,UAAf,CAAyBI,KAAMtB,KAAKC,MAAMsB,UAAU,GAArB,KAA/B,SACI,cAACC,EAAA,EAAD,CAAchB,OAAQR,KAAKC,MAAMO,OAAQiB,IAAKzB,KAAKC,MAAMyB,UAAY1B,KAAKC,MAAMsB,UAAU,GAArB,cAEzE,cAACR,EAAA,EAAcG,UAAf,CAAyBI,KAAMtB,KAAKC,MAAMsB,UAAU,GAArB,KAA/B,SACI,cAACC,EAAA,EAAD,CAAchB,OAAQR,KAAKC,MAAMO,OAAQiB,IAAKzB,KAAKC,MAAMyB,UAAY1B,KAAKC,MAAMsB,UAAU,GAArB,uB,GA9D1EI,aAsEJC,cAAW3C,G,wFClDX4C,MArBf,SAA0B5B,GAGtB,OACI,cAAC,IAAD,UACI,eAAC,IAAD,WACI,cAAC,IAAD,CACI6B,cAAc,OACdC,SAAU,cAACC,EAAA,EAAD,CAAaC,MAAM,eAEjC,cAAC,IAAD,CACIC,KAAK,OACLC,YAAY,iBACZC,MAAOnC,EAAMoC,WACbC,SAAUrC,EAAMsC,qBCoOrBC,MAzOf,WACI,MAA0BC,mBAAS,MAAnC,mBAAcC,GAAd,WACA,EAA4CD,oBAAS,GAArD,mBAAOE,EAAP,KAAuBC,EAAvB,KACA,EAAsCH,mBAAS,IAA/C,mBAAOI,EAAP,KAAoBC,EAApB,KAEMC,EAAa,CACf,UAAc,CACV,CACI,WAAc,WACd,aAAgB,YAEpB,CACI,WAAc,eACd,aAAgB,iBAEpB,CACI,WAAc,OACd,aAAgB,SAGxB,OAAW,CACP,CACI,WAAc,IACd,aAAgB,iBAEpB,CACI,WAAc,IACd,aAAgB,iBAEpB,CACI,WAAc,IACd,aAAgB,iBAEpB,CACI,WAAc,IACd,aAAgB,iBAEpB,CACI,WAAc,IACd,aAAgB,mBAmB5B,EAAoCN,mBAdpB,CACZ,UAAc,CACV,WACA,eACA,QAEJ,OAAW,CACP,IACA,IACA,IACA,IACA,OAGR,mBAAOO,EAAP,KAAmBC,EAAnB,KAEA,EAAoCC,IAAMT,SAAS,IAAnD,mBAAOJ,EAAP,KAAmBc,EAAnB,KACA,EAA0CD,IAAMT,SAAS,IAAzD,mBAAOW,EAAP,KAAsBC,EAAtB,KAiGA,OAvDAC,qBAAU,WACNjE,MAAM,qBACDC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACG,SAACG,GACGmD,GAAkB,GAClBE,EAAerD,MAEnB,SAACM,GACG6C,GAAkB,GAClBF,EAAS3C,QAGtB,IAIHmD,IAAMI,WAAU,WACZ,GAAIX,EAAgB,CAChB,IAAMY,EAAUV,EAAW,SAAaW,QAAO,SAAA1D,GACvC,IAAI2D,EAAYpB,EAAWqB,cACvBC,EAAS7D,EAAO,WAAP,OAAgC4D,cACzCE,EAAW9D,EAAO,WAAP,SAAkC4D,cAC7CG,EAAY/D,EAAO,WAAP,MAA+B4D,cAE3CI,EAAcd,EAAU,OAGxBe,EAFkBf,EAAU,UAEAgB,SAASJ,IAAaE,EAAYE,SAASH,GACvEI,EAAiBN,EAAOK,SAASP,IAAcG,EAASI,SAASP,GAErE,OAAOM,GAAaE,KAO5BZ,EAAiBE,MAEtB,CAAClB,EAAYW,EAAYH,IAgBxB,qBAAKqB,UAAU,MAAf,SACI,eAAC,IAAD,WACI,cAACC,EAAD,CAAkB9B,WAAYA,EAAYE,aAjGjC,SAAA6B,GACjBjB,EAAciB,EAAEC,OAAOjC,UAkGf,cAAC,IAAD,CAAMkC,IAAK,CACPC,SAAU,YACXC,EAAG,EAFN,SAIQC,OAAOC,KAAK3B,GAAY4B,KAAI,SAACC,GACzB,OAAO7B,EAAW6B,GAAKD,KAAI,SAAAE,GAGvB,IAAI5C,EAAQ,GAIZ,OAFqDA,EAArDe,EAAW4B,GAAKZ,SAASa,EAAU,YAA0B,OAAiB,OAG1E,cAAC,IAAD,CAAKL,EAAG,EAAGM,KAAM,KAAMC,YAAa9C,EAAsC+C,kBAAiBJ,EAAKK,kBAAiBJ,EAAU,WACtHK,QAAS,SAACd,GAAD,OA5GtB,SAAAA,GAEpB,IAAMe,EAAgBf,EAAEgB,cAAcC,aAAa,mBAC7CC,EAAgBlB,EAAEgB,cAAcC,aAAa,mBAG9CrC,EAAWsC,GAAetB,SAASmB,GAcpClC,GAAc,SAAAsC,GACN,IAAI9F,EAAS+F,KAAKC,MAAMD,KAAKE,UAAUH,IAIvC,OAFA9F,EAAO6F,GAAiBtC,EAAWsC,GAAe9B,QAAO,SAAAmC,GAAI,OAAKR,EAAcnB,SAAS2B,MAElFlG,KAlBfwD,GAAc,SAAAsC,GAEN,IAAI9F,EAAS+F,KAAKC,MAAMD,KAAKE,UAAUH,IAIvC,OAFA9F,EAAO6F,GAAeM,KAAKT,GAEpB1F,KA+F8BoG,CAAgBzB,IADrC,SAEKS,EAAU,cAFiCA,EAAU,oBAS9E,8BAkBSzB,EAAcuB,KAAI,SAACgB,EAAMf,GAAP,OACf,cAAC,IAAD,CAAKkB,OAAQ,KAAgBtB,EAAG,EAAGuB,KAAK,KAAKC,YAAY,MAAMC,aAAa,KAAKC,SAAS,SAA1F,SAEI,eAAC,IAAD,CAAMC,GAAI,IAAIR,EAAI,WAAJ,OAAd,UACI,cAAC,IAAD,CAA2BS,GAAG,UAA9B,SACI,cAAC,IAAD,CAAKC,EAAG,EAAR,SACI,eAAC,IAAD,WAAOV,EAAI,WAAJ,MAAP,qBAFEf,EAAM,WAMhB,cAAC,IAAD,CAAyByB,EAAG,EAA5B,SACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAMC,SAAU,KAAhB,SACKX,EAAI,WAAJ,SAEL,cAAC,IAAD,UACKA,EAAI,WAAJ,eANHf,EAAM,aATAA,c,6FCmBrC2B,MA9Mf,SAAoBtG,GAEhB,IAAMuG,EAAStD,IAAMuD,SACfC,EAAS,CAACxD,IAAMuD,SAAUvD,IAAMuD,SAAUvD,IAAMuD,SAAUvD,IAAMuD,SAAUvD,IAAMuD,UAEtF,EAAoCE,YAAc,CAC9CC,QAD8C,WAClCC,IAAE,iBAAiBC,WAD3BC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,OAAQJ,EAAxB,EAAwBA,QAGlBK,EAAQ/D,IAAMuD,SAsHpB,OA3CAI,IAAEK,UAAUC,OAAM,WACd,IAAIxC,EAAM6B,EAAOjB,QACjB,GAAIZ,EAAK,CACLA,EAAIyC,GAAGC,YAAY,CACfC,kBAAkB,EAClBC,YAAY,EACZC,YAAY,EACZC,cAAc,IAGlB,IAAIC,EAAmBhB,EAAO,GAAGnB,QAGjCZ,EAAIgD,GAAG,aAAa,SAAUvD,GAC1B4C,IAGAH,IAAE,iBAAiBc,GAAG,SAAS,WAC3BvD,EAAEwD,MAAMC,SACRhB,IAAE,aAAaiB,IAAI,SACnBjB,IAAE,iBAAiBiB,IAAI,YAI3BjB,IAAE,aAAac,GAAG,UAAU,SAAUI,GAClC,IAAIC,EAAKnB,IAAE,YAAYoB,MACnB/F,EAAO2E,IAAE,cAAcoB,MAC3B7D,EAAEwD,MAAMM,aAAe,GACvB9D,EAAEwD,MAAMM,aAAa/I,GAAK6I,EAC1B5D,EAAEwD,MAAMM,aAAahG,KAAOA,EAC5BwF,EAAiBS,SAAS/D,EAAEwD,OAC5Bf,IAAE,aAAaiB,IAAI,UACnBjB,IAAE,iBAAiBiB,IAAI,eAI5BH,GAAG,mBAAmB,SAAUvD,GAC/BsD,EAAmBtD,EAAEwD,aAO7B,sBAAKzI,GAAG,iBAAR,UACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAQqF,EAAG,EAAGU,QAtH1B,WACI,IAEIkD,EAAkB,KAFZ5B,EAAOjB,UAKb6C,EAMR,SAAuBC,GACnB,IAAI5I,EAAS,CACT,KAAQ,qBACR,SAAY,IAHW,WAMlBmF,GACL,IAAIP,EAAS5E,EAAO6I,SACpBD,EAAOzD,GAAK/E,SAAQ,SAAC0I,EAAIC,GACrB,IAAIC,EAAQF,EAAGnB,GAAGsB,OAGdC,EAAc,GAClBJ,EAAGK,OAAO,GAAG/I,SAAQ,SAAC0I,EAAIC,GACtBG,EAAY/C,KAAK,CAAC2C,EAAGM,EAAGN,EAAGO,OAI/BzE,EAAOuB,KAAK,CACR,KAAQ6C,EACR,GAAM7D,EAAImE,WAAaP,EAAMO,WAC7B,WAAc,CACV,MAASnE,EACT,OAAU2D,EAAGL,aAAa/I,GAC1B,SAAYoJ,EAAGL,aAAahG,MAEhC,YAAeyG,QApB3B,IAAK,IAAI/D,KAAOyD,EAAS,EAAhBzD,GAyBT,OAAOnF,EArCeuJ,CAyC1B,WACI,IAAIC,EAAe,CAAC,EAAK,GAAI,EAAK,GAAI,EAAK,GAAI,EAAK,GAAI,EAAK,IAqB7D,OAlBAvC,EAAO7G,SAAQ,SAAC0I,EAAIC,GAChB,IAAIH,EAASE,EAAGhD,QAAQ2D,QACxB,IAAK,IAAItE,KAAOyD,GAERA,EAAOzD,aAAgBuE,YACvBd,EAAOzD,aAAgBwE,YAEvBH,EAAaT,EAAM,GAAG5C,KAAKyC,EAAOzD,OAWvCqE,EAhESI,KAIhBxC,IAAE,kBAAkByC,KAAK,QAAU9D,KAAKE,UAAU0C,OAAiBmB,EAAW,GAAK,WA6GzCpK,GAAG,iBAArC,qBACA,cAAC,IAAD,CAAQqF,EAAG,EAAGrF,GAAG,eAAjB,gCACA,cAAC,IAAD,CAAQqF,EAAG,EAAGrF,GAAG,cAAjB,mCACA,eAAC,IAAD,CACIqK,gBAAiBvC,EACjBF,OAAQA,EACRH,QAASA,EAHb,UAKI,cAAC,IAAD,IACA,eAAC,IAAD,WACI,cAAC,IAAD,sCACA,cAAC,IAAD,IACA,uBAAMzH,GAAG,WAAT,UACA,eAAC,IAAD,CAAWsK,GAAI,EAAf,UACI,eAAC,IAAD,WACI,cAAC,IAAD,iBACA,cAAC,IAAD,CAAOtK,GAAG,UAAUgC,IAAK8F,EAAO9E,YAAY,0BAGhD,eAAC,IAAD,CAAauH,GAAI,EAAjB,UACI,cAAC,IAAD,mBACA,eAAC,IAAD,CAAQvK,GAAG,YAAYgD,YAAY,qBAAnC,UACI,wBAAQC,MAAM,WAAd,sBACA,wBAAQA,MAAM,eAAd,0BACA,wBAAQA,MAAM,OAAd,2BAKR,eAAC,IAAD,WACI,cAAC,IAAD,CAAQ8C,QAAS0B,EAAS1E,KAAK,SAAS6C,YAAY,OAAO4E,GAAI,EAA/D,2BAGA,cAAC,IAAD,CAAQzE,QAAS0B,EAASzH,GAAG,eAA7B,mCAOpB,qBAAKA,GAAG,gBAAgB+E,UAAU,aAClC,qBAAK/E,GAAG,4BAA4B+E,UAAU,aAC9C,qBAAK/E,GAAG,6BAA6B+E,UAAU,aAC/C,cAAC3D,EAAA,EAAD,CAAcqJ,YAAa,SAACC,GAAiBrD,EAAOjB,QAAUsE,GAAerJ,OAAQP,EAAMO,OAAQC,OAAQR,EAAMQ,OAAQqJ,QAAS,EAAGpJ,SAAU,EAAGC,iBAAiB,EAAOC,IAAKC,MAAIC,OAAnL,SACI,eAACC,EAAA,EAAD,CAAeC,SAAS,WAAWC,WAAW,EAA9C,UAEI,cAACF,EAAA,EAAcG,UAAf,CAA0BG,SAAO,EAACC,KAAMrB,EAAMsB,UAAU,GAAhB,KAAxC,SACI,cAACwI,EAAA,EAAD,CAAY5I,IAAKuF,EAAO,GAAxB,SACI,cAAClF,EAAA,EAAD,CAAchB,OAAQP,EAAMO,OAAQiB,IAAKxB,EAAMyB,UAAYzB,EAAMsB,UAAU,GAAhB,gBAGnE,cAACR,EAAA,EAAcG,UAAf,CAAyBI,KAAMrB,EAAMsB,UAAU,GAAhB,KAA/B,SACI,cAACwI,EAAA,EAAD,CAAY5I,IAAKuF,EAAO,GAAxB,SACI,cAAClF,EAAA,EAAD,CAAchB,OAAQP,EAAMO,OAAQiB,IAAKxB,EAAMyB,UAAYzB,EAAMsB,UAAU,GAAhB,gBAGnE,cAACR,EAAA,EAAcG,UAAf,CAAyBI,KAAMrB,EAAMsB,UAAU,GAAhB,KAA/B,SACI,cAACwI,EAAA,EAAD,CAAY5I,IAAKuF,EAAO,GAAxB,SACA,cAAClF,EAAA,EAAD,CAAchB,OAAQP,EAAMO,OAAQiB,IAAKxB,EAAMyB,UAAYzB,EAAMsB,UAAU,GAAhB,gBAG/D,cAACR,EAAA,EAAcG,UAAf,CAAyBI,KAAMrB,EAAMsB,UAAU,GAAhB,KAA/B,SACI,cAACwI,EAAA,EAAD,CAAY5I,IAAKuF,EAAO,GAAxB,SACA,cAAClF,EAAA,EAAD,CAAchB,OAAQP,EAAMO,OAAQiB,IAAKxB,EAAMyB,UAAYzB,EAAMsB,UAAU,GAAhB,gBAG/D,cAACR,EAAA,EAAcG,UAAf,CAAyBI,KAAMrB,EAAMsB,UAAU,GAAhB,KAA/B,SACI,cAACwI,EAAA,EAAD,CAAY5I,IAAKuF,EAAO,GAAxB,SACA,cAAClF,EAAA,EAAD,CAAchB,OAAQP,EAAMO,OAAQiB,IAAKxB,EAAMyB,UAAYzB,EAAMsB,UAAU,GAAhB,yB,6CCxFpEyI,E,kDA7HX,WAAY/J,GAAQ,IAAD,8BACf,cAAMA,IACDgK,MAAQ,CACT5H,WAAY,GACZ6H,aAAc,GAElB,EAAK3H,aAAe,EAAKA,aAAa4H,KAAlB,gBANL,E,qDAUnB,WAAqB,IAAD,OAChBtD,IAAEK,UAAUC,OAAM,WACdN,IAAE,kBAAkBc,GAAG,SAAS,WACxB,EAAKsC,MAAMC,aAAe,GAC1B,EAAKE,UAAS,SAAAC,GAAS,MACnB,CAAC,aAAgBA,EAAS,aAAmB,SAKzDxD,IAAE,gBAAgBc,GAAG,SAAS,WACtB,EAAKsC,MAAMC,aAxBd,GAyBD,EAAKE,UAAS,SAAAC,GAAS,MACnB,CAAC,aAAgBA,EAAS,aAAmB,c,0BAM7D,SAAcjG,GACVpE,KAAKoK,UAAS,SAAA/J,GACN,MAAO,CAACgC,WAAY+B,EAAEC,OAAOjC,UAGrCzC,QAAQC,IAAI,yBAA2BI,KAAKiK,MAAM5H,c,oBAGtD,WAEI,IAEMX,EAFU4I,OAAOC,SAASC,OAEdC,iBAGZjK,EAAS,CAAC,CAAC,EAAE,GAAI,CAAC,IAAM,MACxBC,EAAS,CAAC,IAAI,KACd4H,EAAS,CACXqC,EAAG,CACCpJ,KAAM,gBACNqJ,UAAW,IAEfC,EAAG,CACCtJ,KAAM,gBACNqJ,UAAW,WAEfE,EAAG,CACCvJ,KAAM,gBACNqJ,UAAW,WAEfG,EAAG,CACCxJ,KAAM,gBACNqJ,UAAW,WAEfI,EAAG,CACCzJ,KAAM,gBACNqJ,UAAW,WAEfK,EAAG,CACC1J,KAAM,gBACNqJ,UAAW,YAKnB,OACI,mCACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAMtE,EAAG,EAAT,SAKI,cAAC,IAAD,CAAQ4E,MAAM,OAAd,SACI,cAAC,IAAD,CAAKA,MAAM,OAAX,SACI,cAAC9G,EAAD,CAAkB9B,WAAYrC,KAAKiK,MAAM5H,WAAYE,aAAcvC,KAAKuC,qBAIpF,eAAC,IAAD,CAAMoH,GAAI,EAAV,UACI,cAAC,IAAD,IACA,eAAC,IAAD,WACI,cAACuB,EAAA,EAAD,CAAiB/L,GAAG,gBAAgBgM,MAAO,CAAC,OAAU,WAAYC,EAAG,EAAGC,EAAG,IAC3E,eAAC,IAAD,CAAM/E,SAAU,GAAhB,UAAqBtG,KAAKiK,MAAMC,aAAhC,kBACA,cAACoB,EAAA,EAAD,CAAkBnM,GAAG,cAAcgM,MAAO,CAAC,OAAU,WAAYC,EAAG,EAAGC,EAAG,UAGlF,eAAC,IAAD,WACI,cAAC,IAAD,CAAOE,OAAK,EAACC,KAAK,UAAUC,OAAQ,SAACxL,GAAD,OAAY,cAAC,EAAD,2BAAgBA,GAAhB,IAAuByB,UAAWA,EAAWlB,OAAQA,EAAQC,OAAQA,EAAQc,UAAW8G,QACxI,cAAC,IAAD,CAAOkD,OAAK,EAACC,KAAK,UAAUC,OAAQ,SAACxL,GAAD,OAAY,cAAC,EAAD,2BAAYA,GAAZ,IAAmByB,UAAWA,EAAWlB,OAAQA,EAAQC,OAAQA,EAAQc,UAAW8G,QAEpI,cAAC,IAAD,CAAOkD,OAAK,EAACC,KAAK,QAAQC,OAAQ,SAACxL,GAAD,OAAY,cAAC,EAAD,2BAAUA,GAAV,IAAiByB,UAAWA,EAAWlB,OAAQA,EAAQC,OAAQA,EAAQc,UAAW8G,QAChI,cAAC,IAAD,CAAOqD,OAAQ,IAAf,SACI,uDAKR,cAAC,IAAD,CAAMvF,GAAG,IAAT,SACI,cAAC,IAAD,CAAQrB,KAAK,KAAKN,EAAG,EAAGO,YAAY,OAApC,oBAEJ,cAAC,IAAD,CAAMoB,GAAG,UAAT,SACI,cAAC,IAAD,CAAQrB,KAAK,KAAKN,EAAG,EAAGO,YAAY,OAApC,sBAEJ,cAAC,IAAD,CAAMoB,GAAG,UAAT,SACI,cAAC,IAAD,CAAQrB,KAAK,KAAKN,EAAG,EAAGO,YAAY,OAApC,sBAEJ,cAAC,IAAD,CAAMoB,GAAG,OAAT,SACI,cAAC,IAAD,CAAQrB,KAAK,KAAKN,EAAG,EAAGO,YAAY,OAApC,wC,GAtHNpD,a,SCKHgK,EAFKC,YAAY,CAAEC,OAdnB,CACbC,QAAS,CACPC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC,IAAK,cCJHC,EAActF,SAASuF,eAAe,QAE5CC,IAASjB,OACL,cAAC,IAAMkB,WAAP,UACI,cAAC,IAAD,CAAgBC,MAAOjB,EAAvB,SACI,cAAC,EAAD,QAGRa,K","file":"static/js/main.d8e490ab.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\nimport {ImageOverlay, LayersControl, MapContainer} from 'react-leaflet'\r\nimport {CRS} from 'leaflet';\r\nimport { withRouter } from \"react-router\";\r\n\r\nclass Home extends Component {\r\n\r\n    componentDidMount() {\r\n        const id = this.props.match.params.id;\r\n        this.fetchData(id);\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        const id = this.props.match.params.id;\r\n        this.fetchData(id);\r\n    }\r\n\r\n    fetchData = id => {\r\n        if (!id) return;\r\n\r\n        alert(\"[check console] Search for room #\" + id);\r\n\r\n        fetch(\"/kartes/data.json\")\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    // just some console logs...\r\n                    let foundFlag = false;\r\n                    console.log(\"Fetched data:\");\r\n                    console.log(result);\r\n                    result[\"features\"].forEach ((feature) => {\r\n                            if (feature[\"properties\"][\"roomID\"] === id) {\r\n                                console.log(\"The requested room was found:\")\r\n                                console.log(feature);\r\n                                foundFlag = true;\r\n                            }\r\n                        }\r\n                    )\r\n                    if (!foundFlag)\r\n                        console.log(\"Room was not found.\");\r\n\r\n\r\n                },\r\n                (error) => {\r\n                    // ... some error parsing\r\n                }\r\n            )\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <MapContainer bounds={this.props.bounds} center={this.props.center} minZoom={-5} doubleClickZoom={false} crs={CRS.Simple}>\r\n                <LayersControl position=\"topright\" collapsed={false}>\r\n                    {/* layers + layer control */}\r\n                    <LayersControl.BaseLayer ref={this.props.baseLayerRef} checked name={this.props.theLayers[1][\"name\"]}>\r\n                        <ImageOverlay bounds={this.props.bounds} url={this.props.pathToImg + this.props.theLayers[1][\"imageName\"]} />\r\n                    </LayersControl.BaseLayer>\r\n                    <LayersControl.BaseLayer name={this.props.theLayers[2][\"name\"]}>\r\n                        <ImageOverlay bounds={this.props.bounds} url={this.props.pathToImg + this.props.theLayers[2][\"imageName\"]} />\r\n                    </LayersControl.BaseLayer>\r\n                    <LayersControl.BaseLayer name={this.props.theLayers[3][\"name\"]}>\r\n                        <ImageOverlay bounds={this.props.bounds} url={this.props.pathToImg + this.props.theLayers[3][\"imageName\"]} />\r\n                    </LayersControl.BaseLayer>\r\n                    <LayersControl.BaseLayer name={this.props.theLayers[4][\"name\"]}>\r\n                        <ImageOverlay bounds={this.props.bounds} url={this.props.pathToImg + this.props.theLayers[4][\"imageName\"]} />\r\n                    </LayersControl.BaseLayer>\r\n                    <LayersControl.BaseLayer name={this.props.theLayers[5][\"name\"]}>\r\n                        <ImageOverlay bounds={this.props.bounds} url={this.props.pathToImg + this.props.theLayers[5][\"imageName\"]} />\r\n                    </LayersControl.BaseLayer>\r\n                </LayersControl>\r\n            </MapContainer>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(Home);\r\n","import {Box, Input, InputGroup, InputLeftElement} from \"@chakra-ui/react\";\r\nimport {Search2Icon} from \"@chakra-ui/icons\";\r\nimport React from \"react\";\r\n\r\nfunction SearchInputField(props) {\r\n    // const {searchTerm, handleChange, ...rest} = props;\r\n\r\n    return (\r\n        <Box>\r\n            <InputGroup>\r\n                <InputLeftElement\r\n                    pointerEvents=\"none\"\r\n                    children={<Search2Icon color=\"gray.300\" />}\r\n                />\r\n                <Input\r\n                    type=\"text\"\r\n                    placeholder=\"Meklēt...\"\r\n                    value={props.searchTerm}\r\n                    onChange={props.handleChange}\r\n                />\r\n            </InputGroup>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default SearchInputField;","import React, {useEffect, useState} from \"react\";\r\nimport {\r\n    Badge,\r\n    Box, Center,\r\n    ChakraProvider, Flex, HStack, Image, Input, InputGroup, InputLeftElement, Tag, Text\r\n} from \"@chakra-ui/react\";\r\nimport {Search2Icon, StarIcon} from '@chakra-ui/icons'\r\nimport {Link} from \"react-router-dom\";\r\nimport SearchInputField from './SearchInput';\r\n\r\n\r\n// inspired by https://codesandbox.io/s/practical-nightingale-m2b5n?file=/src/index.js\r\n\r\nfunction Search() {\r\n    const [error, setError] = useState(null);\r\n    const [isSearchLoaded, setSearchIsLoaded] = useState(false);\r\n    const [searchItems, setSearchItems] = useState([]);\r\n    // it outputs in frontend in the same order as the list is here\r\n    const allFilters = {\r\n        \"roomTypes\" : [\r\n            {\r\n                \"filterTerm\": \"kabinets\",\r\n                \"frontendName\": \"Kabineti\",\r\n            },\r\n            {\r\n                \"filterTerm\": \"laboratorija\",\r\n                \"frontendName\": \"Laboratorijas\",\r\n            },\r\n            {\r\n                \"filterTerm\": \"cits\",\r\n                \"frontendName\": \"Citi\",\r\n            },\r\n        ],\r\n        \"floors\" : [\r\n            {\r\n                \"filterTerm\": \"1\",\r\n                \"frontendName\": \"1. stāvs\",\r\n            },\r\n            {\r\n                \"filterTerm\": \"2\",\r\n                \"frontendName\": \"2. stāvs\",\r\n            },\r\n            {\r\n                \"filterTerm\": \"3\",\r\n                \"frontendName\": \"3. stāvs\",\r\n            },\r\n            {\r\n                \"filterTerm\": \"4\",\r\n                \"frontendName\": \"4. stāvs\",\r\n            },\r\n            {\r\n                \"filterTerm\": \"5\",\r\n                \"frontendName\": \"5. stāvs\",\r\n            },\r\n        ]\r\n    }\r\n\r\n    const initval = {\r\n        \"roomTypes\" : [\r\n            \"kabinets\",\r\n            \"laboratorija\",\r\n            \"cits\",\r\n        ],\r\n        \"floors\" : [\r\n            \"1\",\r\n            \"2\",\r\n            \"3\",\r\n            \"4\",\r\n            \"5\",\r\n        ]\r\n    }\r\n    const [searchTags, setSearchTags] = useState(initval )\r\n\r\n    const [searchTerm, setSearchTerm] = React.useState(\"\");\r\n    const [searchResults, setSearchResults] = React.useState([]);\r\n\r\n\r\n    const handleChange = e => {\r\n        setSearchTerm(e.target.value);\r\n    };\r\n\r\n    // toggle clicked filter\r\n    const handleTagChange = e => {\r\n        // clicked filter value\r\n        const newFilterName = e.currentTarget.getAttribute(\"data-filtername\");\r\n        const newFilterType = e.currentTarget.getAttribute(\"data-filtertype\");\r\n\r\n        // add filter\r\n        if (!searchTags[newFilterType].includes(newFilterName)) {\r\n            setSearchTags(current =>\r\n                {\r\n                    let result = JSON.parse(JSON.stringify(current));// deep copy; otherwise, does not work\r\n\r\n                    result[newFilterType].push(newFilterName);\r\n\r\n                    return result;\r\n                }\r\n            )\r\n        }\r\n        \r\n        // remove filter\r\n        else {\r\n            setSearchTags(current => {\r\n                    let result = JSON.parse(JSON.stringify(current)); // deep copy; otherwise, does not work\r\n\r\n                    result[newFilterType] = searchTags[newFilterType].filter(item => !newFilterName.includes(item))\r\n\r\n                    return result;\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n    // Note: the empty deps array [] means\r\n    // this useEffect will run once\r\n    // similar to componentDidMount()\r\n    useEffect(() => {\r\n        fetch(\"/kartes/data.json\")\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    setSearchIsLoaded(true);\r\n                    setSearchItems(result);\r\n                },\r\n                (error) => {\r\n                    setSearchIsLoaded(true);\r\n                    setError(error);\r\n                }\r\n            )\r\n    }, [])\r\n\r\n\r\n    // search logic\r\n    React.useEffect(() => {\r\n        if (isSearchLoaded) {\r\n            const results = searchItems[\"features\"].filter(feature => {\r\n                    let stLowered = searchTerm.toLowerCase();\r\n                    let roomID = feature[\"properties\"][\"roomID\"].toLowerCase();\r\n                    let roomType = feature[\"properties\"][\"roomType\"].toLowerCase();\r\n                    let roomFloor = feature[\"properties\"][\"floor\"].toLowerCase();\r\n\r\n                    let floorFilter = searchTags[\"floors\"];\r\n                    let roomTypesFilter = searchTags[\"roomTypes\"];\r\n\r\n                    let filtersOK = roomTypesFilter.includes(roomType) && floorFilter.includes(roomFloor);\r\n                    let searchParamsOK = roomID.includes(stLowered) || roomType.includes(stLowered);\r\n\r\n                    return filtersOK && searchParamsOK;\r\n\r\n                    // return feature[\"properties\"][\"roomID\"].toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n                    //     feature[\"properties\"][\"roomType\"].toLowerCase().includes(searchTerm.toLowerCase());\r\n                }\r\n            )\r\n\r\n            setSearchResults(results);\r\n        }\r\n    }, [searchTerm, searchTags, searchItems]);\r\n\r\n\r\n\r\n    const property = {\r\n        imageUrl: \"https://bit.ly/2Z4KKcF\",\r\n        imageAlt: \"Rear view of modern home with pool\",\r\n        beds: 3,\r\n        baths: 2,\r\n        title: \"Modern home in city center in the heart of historic Los Angeles\",\r\n        formattedPrice: \"$1,900.00\",\r\n        reviewCount: 34,\r\n        rating: 4,\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ChakraProvider>\r\n                <SearchInputField searchTerm={searchTerm} handleChange={handleChange}/>\r\n                {/* display filter tags */}\r\n                <Flex css={{\r\n                    flexFlow: \"row wrap\"\r\n                }} m={1}>\r\n                    {\r\n                        Object.keys(allFilters).map((key) => {\r\n                            return allFilters[key].map(filterItem => {\r\n\r\n                                // if filter is active, set color to blue; otherwise, gray\r\n                                let color = \"\";\r\n\r\n                                searchTags[key].includes(filterItem[\"filterTerm\"]) ? color = \"blue\" : color = \"gray\"\r\n\r\n                                return (\r\n                                    <Tag m={1} size={\"lg\"} colorScheme={color} key={filterItem[\"filterTerm\"]} data-filtertype={key} data-filtername={filterItem[\"filterTerm\"]}\r\n                                         onClick={(e) => handleTagChange(e)}>\r\n                                        {filterItem[\"frontendName\"]}\r\n                                    </Tag> )\r\n                            })\r\n                        })\r\n                    }\r\n                </Flex>\r\n\r\n                <div>\r\n\r\n                    {/* current filter list */}\r\n                    {/*<ul>*/}\r\n                    {/*    {*/}\r\n                    {/*        Object.keys(searchTags).map((key) => {*/}\r\n                    {/*            return searchTags[key].map(filterItem => {*/}\r\n                    {/*                return (*/}\r\n                    {/*                    <li key={filterItem}>{filterItem}</li>*/}\r\n                    {/*                )*/}\r\n                    {/*            })*/}\r\n                    {/*        })*/}\r\n                    {/*    }*/}\r\n                    {/*</ul>*/}\r\n                    {/*<div>&nbsp;</div>*/}\r\n\r\n\r\n                    {/* search results list */}\r\n                        {searchResults.map((item, key) => (\r\n                            <Box shadow={\"md\"} key={key} m={2} maxW=\"sm\" borderWidth=\"1px\" borderRadius=\"md\" overflow=\"hidden\">\r\n\r\n                                <Link to={\"/\"+item[\"properties\"][\"roomID\"]}>\r\n                                    <Box key={key + \"-header\"} bg=\"#f2f8fc\">\r\n                                        <Box p={2}>\r\n                                            <Text>{item[\"properties\"][\"floor\"]}. stāvs</Text>\r\n                                        </Box>\r\n                                    </Box>\r\n\r\n                                    <Box key={key + \"-body\"} p={2}>\r\n                                        <HStack>\r\n                                            <Text fontSize={\"xl\"}>\r\n                                                {item[\"properties\"][\"roomID\"]}\r\n                                            </Text>\r\n                                            <Text>\r\n                                                {item[\"properties\"][\"roomType\"]}\r\n                                            </Text>\r\n                                        </HStack>\r\n                                    </Box>\r\n                                </Link>\r\n                            </Box>\r\n                        ))}\r\n                    {/*<li key={\"item-\" +key} >{item[\"properties\"][\"floor\"]}. stāvs &nbsp; {item[\"properties\"][\"roomID\"]}.{item[\"properties\"][\"roomType\"]}</li>*/}\r\n                </div>\r\n            </ChakraProvider>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Search;\r\n","import React from 'react'\r\nimport $ from 'jquery'\r\nimport {\r\n    Button,\r\n    ChakraProvider, FormControl, FormLabel, Input,\r\n    Modal, ModalBody,\r\n    ModalCloseButton,\r\n    ModalContent, ModalFooter,\r\n    ModalHeader,\r\n    ModalOverlay, Select, useDisclosure\r\n} from \"@chakra-ui/react\";\r\nimport {\r\n    MapContainer,\r\n    LayerGroup,\r\n    LayersControl,\r\n    ImageOverlay,\r\n} from \"react-leaflet\";\r\nimport {CRS, Polygon, Polyline} from \"leaflet\";\r\n\r\nimport \"@geoman-io/leaflet-geoman-free\";\r\nimport \"@geoman-io/leaflet-geoman-free/dist/leaflet-geoman.css\";\r\n\r\n// still to do\r\n// 1. add modal edit option (open modal, preferably with written previous data)\r\n// 2. add some validation, for ID only numbers, both fields required etc\r\n// 3. is there a bug that first layer is removed even when submitting? First time had, then no.\r\n// 4. db schema - should data be grouped by floor number or floor number should be in properties field for each?\r\n// 5. remove unneeded stuff\r\n// 6. json bin ? or no.\r\n\r\nfunction GeomanPage(props) {\r\n\r\n    const mapRef = React.useRef();\r\n    const floors = [React.useRef(), React.useRef(), React.useRef(), React.useRef(), React.useRef()];\r\n\r\n    const { isOpen, onOpen, onClose } = useDisclosure({\r\n        onClose() { $(\"#cancelButton\").click(); }\r\n    }) // for modal\r\n    const idRef = React.useRef() // for modal\r\n\r\n\r\n    function printJSON() {\r\n        let map = mapRef.current;\r\n        let rawLayers = null;\r\n        let processedLayers = null;\r\n        if (map) {\r\n            rawLayers = findLayers();\r\n            processedLayers = processLayers(rawLayers);\r\n        }\r\n\r\n        $(\"#bin-data-sent\").html(\"<pre>\" + JSON.stringify(processedLayers, undefined, 2) + \"</pre>\");\r\n    }\r\n\r\n    function processLayers(layers) {\r\n        let result = {\r\n            \"type\": \"GeometryCollection\",\r\n            \"features\": []\r\n        };\r\n\r\n        for (let key in layers) {\r\n            let target = result.features;\r\n            layers[key].forEach((el, index) => {\r\n                let shape = el.pm._shape;\r\n\r\n                // get coordinates\r\n                let coordinates = [];\r\n                el._parts[0].forEach((el, index) => {\r\n                    coordinates.push([el.x, el.y]);\r\n                });\r\n\r\n                // push clean geoJSON data object\r\n                target.push({\r\n                    \"type\": shape,\r\n                    \"id\": key.toString() + index.toString(),\r\n                    \"properties\": {\r\n                        \"floor\": key,\r\n                        \"roomID\": el.LUProperties.id,\r\n                        \"roomType\": el.LUProperties.type\r\n                    },\r\n                    \"coordinates\": coordinates\r\n                })\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // filter drawed layers grouped by floor\r\n    function findLayers() {\r\n        let layersResult = {\"1\": [], \"2\": [], \"3\": [], \"4\": [], \"5\": []}; // init empty\r\n\r\n        // go over each floor and add each floor's drawings\r\n        floors.forEach((el, index) => {\r\n            let layers = el.current._layers; // this is a little sketchy to use _layers variable\r\n            for (let key in layers) {\r\n                if (\r\n                    layers[key] instanceof Polyline || // only if its polyline or polygon\r\n                    layers[key] instanceof Polygon\r\n                ) {\r\n                    layersResult[index+1].push(layers[key]);\r\n                }\r\n            }\r\n        });\r\n\r\n        // // filter out layers that don't have the leaflet-geoman instance\r\n        // layersResult = layersResult.filter(layer => !!layer.pm);\r\n        //\r\n        // // filter out everything thats leaflet-geoman specific temporary stuff\r\n        // layersResult = layersResult.filter(layer => !layer._pmTempLayer);\r\n\r\n        return layersResult;\r\n    }\r\n\r\n    $(document).ready(function() {\r\n        let map = mapRef.current;\r\n        if (map) {\r\n            map.pm.addControls({\r\n                drawCircleMarker: false,\r\n                drawCircle: false,\r\n                drawMarker: false,\r\n                drawPolyline: false\r\n            });\r\n\r\n            let currentBaseLayer = floors[0].current;\r\n\r\n            // on new drawing created\r\n            map.on('pm:create', function (e) {\r\n                onOpen(); // opens modal\r\n\r\n                // remove layer if cancelled\r\n                $(\"#cancelButton\").on(\"click\", function () {\r\n                    e.layer.remove();\r\n                    $(\"#mainForm\").off(\"click\");\r\n                    $(\"#cancelbutton\").off(\"click\");\r\n                });\r\n\r\n                // add layer if form submitted\r\n                $(\"#mainForm\").on(\"submit\", function (event) {\r\n                    let ID = $(\"#idField\").val();\r\n                    let type = $(\"#typeField\").val();\r\n                    e.layer.LUProperties = {};\r\n                    e.layer.LUProperties.id = ID;\r\n                    e.layer.LUProperties.type = type;\r\n                    currentBaseLayer.addLayer(e.layer);\r\n                    $(\"#mainForm\").off(\"submit\");\r\n                    $(\"#cancelButton\").off(\"click\");\r\n                });\r\n\r\n            // on floor change\r\n            }).on('baselayerchange', function (e) {\r\n                currentBaseLayer = e.layer;\r\n            })\r\n        }\r\n    });\r\n\r\n    //\r\n    return (\r\n        <div id=\"geoman-wrapper\">\r\n            <ChakraProvider>\r\n                <Button m={1} onClick={printJSON} id=\"button-geoJSON\">GeoJSON</Button>\r\n                <Button m={1} id=\"button-clear\">Clear printed data</Button>\r\n                <Button m={1} id=\"button-draw\">Refresh data and draw</Button>\r\n                <Modal\r\n                    initialFocusRef={idRef}\r\n                    isOpen={isOpen}\r\n                    onClose={onClose}\r\n                >\r\n                    <ModalOverlay />\r\n                    <ModalContent>\r\n                        <ModalHeader>Telpas informācija</ModalHeader>\r\n                        <ModalCloseButton />\r\n                        <form id=\"mainForm\">\r\n                        <ModalBody pb={6}>\r\n                            <FormControl>\r\n                                <FormLabel>ID</FormLabel>\r\n                                <Input id=\"idField\" ref={idRef} placeholder=\"Piemēram, 312\"/>\r\n                            </FormControl>\r\n\r\n                            <FormControl mt={4}>\r\n                                <FormLabel>Tips</FormLabel>\r\n                                <Select id=\"typeField\" placeholder=\"Izvēlies tipu\">\r\n                                    <option value=\"kabinets\">Kabinets</option>\r\n                                    <option value=\"laboratorija\">Laboratorija</option>\r\n                                    <option value=\"cits\">Cits</option>\r\n                                </Select>\r\n                            </FormControl>\r\n                        </ModalBody>\r\n\r\n                            <ModalFooter>\r\n                                <Button onClick={onClose} type=\"submit\" colorScheme=\"blue\" mr={3}>\r\n                                    Saglabāt\r\n                                </Button>\r\n                                <Button onClick={onClose} id=\"cancelButton\">Atcelt</Button>\r\n                            </ModalFooter>\r\n                        </form>\r\n                    </ModalContent>\r\n                </Modal>\r\n\r\n            </ChakraProvider>\r\n            <div id=\"bin-data-sent\" className=\"bin-data\"/>\r\n            <div id=\"bin-data-received-content\" className=\"bin-data\"/>\r\n            <div id=\"bin-data-received-metadata\" className=\"bin-data\"/>\r\n            <MapContainer whenCreated={(mapInstance)=> { mapRef.current = mapInstance }} bounds={props.bounds} center={props.center} maxZoom={1} minZoom={-5} doubleClickZoom={false} crs={CRS.Simple}>\r\n                <LayersControl position=\"topright\" collapsed={false}>\r\n                    {/* layers + layer control */}\r\n                    <LayersControl.BaseLayer  checked name={props.theLayers[1][\"name\"]}>\r\n                        <LayerGroup ref={floors[0]}>\r\n                            <ImageOverlay bounds={props.bounds} url={props.pathToImg + props.theLayers[1][\"imageName\"]} />\r\n                        </LayerGroup>\r\n                    </LayersControl.BaseLayer>\r\n                    <LayersControl.BaseLayer name={props.theLayers[2][\"name\"]}>\r\n                        <LayerGroup ref={floors[1]}>\r\n                            <ImageOverlay bounds={props.bounds} url={props.pathToImg + props.theLayers[2][\"imageName\"]} />\r\n                        </LayerGroup>\r\n                    </LayersControl.BaseLayer>\r\n                    <LayersControl.BaseLayer name={props.theLayers[3][\"name\"]}>\r\n                        <LayerGroup ref={floors[2]}>\r\n                        <ImageOverlay bounds={props.bounds} url={props.pathToImg + props.theLayers[3][\"imageName\"]} />\r\n                        </LayerGroup>\r\n                    </LayersControl.BaseLayer>\r\n                    <LayersControl.BaseLayer name={props.theLayers[4][\"name\"]}>\r\n                        <LayerGroup ref={floors[3]}>\r\n                        <ImageOverlay bounds={props.bounds} url={props.pathToImg + props.theLayers[4][\"imageName\"]} />\r\n                        </LayerGroup>\r\n                    </LayersControl.BaseLayer>\r\n                    <LayersControl.BaseLayer name={props.theLayers[5][\"name\"]}>\r\n                        <LayerGroup ref={floors[4]}>\r\n                        <ImageOverlay bounds={props.bounds} url={props.pathToImg + props.theLayers[5][\"imageName\"]} />\r\n                        </LayerGroup>\r\n                    </LayersControl.BaseLayer>\r\n                </LayersControl>\r\n            </MapContainer>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GeomanPage;\r\n","import { HashRouter, Switch, Route, Link } from 'react-router-dom'\r\nimport React, {Component} from \"react\";\r\nimport Home from './Components/Home';\r\nimport Search from './Components/Search';\r\nimport GeomanPage from './Components/GeomanPage';\r\nimport SearchInputField from './Components/SearchInput';\r\nimport {Button, Flex, Box, Spacer, Image, Center, Text, HStack} from \"@chakra-ui/react\"\r\nimport 'leaflet/dist/leaflet.css';\r\nimport {ChevronLeftIcon, ChevronRightIcon, HamburgerIcon} from \"@chakra-ui/icons\";\r\nimport $ from \"jquery\";\r\n\r\nconst MAXFLOOR = 5;\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            searchTerm: \"\",\r\n            currentFloor: 1\r\n        };\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        $(document).ready(() => {\r\n            $(\"#FloorDownIcon\").on(\"click\", () => {\r\n                if (this.state.currentFloor > 1) {\r\n                    this.setState(prevstate => (\r\n                        {\"currentFloor\": prevstate[\"currentFloor\"] - 1}\r\n                    ))\r\n                }\r\n            })\r\n\r\n            $(\"#FloorUpIcon\").on(\"click\", () => {\r\n                if (this.state.currentFloor < MAXFLOOR)\r\n                this.setState(prevstate => (\r\n                    {\"currentFloor\": prevstate[\"currentFloor\"] + 1}\r\n                ))\r\n            })\r\n        })\r\n    }\r\n\r\n    handleChange (e) {\r\n        this.setState(prevState => {\r\n                return {searchTerm: e.target.value}\r\n            }\r\n        );\r\n        console.log(\"Search term updated : \" + this.state.searchTerm);\r\n    }\r\n\r\n    render() {\r\n        // adjust img url\r\n        const baseUrl = window.location.origin;\r\n        const preFolderName = 'kartes/media/';\r\n        const pathToImg = baseUrl + '/' + preFolderName;\r\n\r\n        // map constants\r\n        const bounds = [[0,0], [1000, 1000]]\r\n        const center = [500,500]\r\n        const layers = {\r\n            0: {\r\n                name: \"0. stāvs\",\r\n                imageName: \"\"\r\n            },\r\n            1: {\r\n                name: \"1. stāvs\",\r\n                imageName: \"zm1.svg\"\r\n            },\r\n            2: {\r\n                name: \"2. stāvs\",\r\n                imageName: \"zm2.svg\"\r\n            },\r\n            3: {\r\n                name: \"3. stāvs\",\r\n                imageName: \"zm3.svg\"\r\n            },\r\n            4: {\r\n                name: \"4. stāvs\",\r\n                imageName: \"zm4.svg\"\r\n            },\r\n            5: {\r\n                name: \"5. stāvs\",\r\n                imageName: \"zm5.svg\"\r\n            },\r\n\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <HashRouter>\r\n                    <Flex p={4}>\r\n                        {/*<Box>*/}\r\n                            {/*<Image h={50} src={pathToImg + \"logo.png\"}  fallbackSrc=\"https://via.placeholder.com/150\" />*/}\r\n                        {/*</Box>*/}\r\n                        {/*<Spacer />*/}\r\n                        <Center width=\"full\">\r\n                            <Box width=\"full\">\r\n                                <SearchInputField searchTerm={this.state.searchTerm} handleChange={this.handleChange}/>\r\n                            </Box>\r\n                        </Center>\r\n                    </Flex>\r\n                    <Flex mr={4}>\r\n                        <Spacer />\r\n                        <Center>\r\n                            <ChevronLeftIcon id=\"FloorDownIcon\" style={{\"cursor\": \"pointer\"}} w={8} h={8}/>\r\n                            <Text fontSize={20}>{this.state.currentFloor}. Stāvs</Text>\r\n                            <ChevronRightIcon id=\"FloorUpIcon\" style={{\"cursor\": \"pointer\"}} w={8} h={8}/>\r\n                        </Center>\r\n                    </Flex>\r\n                    <Switch>\r\n                        <Route exact path='/geoman' render={(props) => (<GeomanPage {...props} pathToImg={pathToImg} bounds={bounds} center={center} theLayers={layers} />)}/>\r\n                        <Route exact path='/search' render={(props) => (<Search {...props} pathToImg={pathToImg} bounds={bounds} center={center} theLayers={layers} />)}/>\r\n                        {/*<Route exact path='/header' render={(props) => (<Header {...props} pathToImg={pathToImg}/>)}/>*/}\r\n                        <Route exact path='/:id?' render={(props) => (<Home {...props} pathToImg={pathToImg} bounds={bounds} center={center} theLayers={layers} />)}/>\r\n                        <Route status={404}>\r\n                            <div>Page not found.</div>\r\n                        </Route>\r\n                    </Switch>\r\n\r\n\r\n                    <Link to=\"/\">\r\n                        <Button size=\"xs\" m={1} colorScheme=\"blue\">Home</Button>\r\n                    </Link>\r\n                    <Link to=\"/geoman\">\r\n                        <Button size=\"xs\" m={1} colorScheme=\"blue\">Geoman</Button>\r\n                    </Link>\r\n                    <Link to=\"/search\">\r\n                        <Button size=\"xs\" m={1} colorScheme=\"blue\">Search</Button>\r\n                    </Link>\r\n                    <Link to=\"/512\">\r\n                        <Button size=\"xs\" m={1} colorScheme=\"blue\">Search for #512</Button>\r\n                    </Link>\r\n                </HashRouter>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import { extendTheme } from \"@chakra-ui/react\";\n\nconst colors = {\n  primary: {\n    100: \"#E5FCF1\",\n    200: \"#27EF96\",\n    300: \"#10DE82\",\n    400: \"#0EBE6F\",\n    500: \"#0CA25F\",\n    600: \"#0A864F\",\n    700: \"#086F42\",\n    800: \"#075C37\",\n    900: \"#064C2E\"\n  }\n};\n\nconst customTheme = extendTheme({ colors });\n\nexport default customTheme;\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { ChakraProvider } from \"@chakra-ui/react\";\r\nimport './index.css';\r\n\r\nimport App from \"./App\";\r\nimport customTheme from \"./utils/theme\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <ChakraProvider theme={customTheme}>\r\n            <App />\r\n        </ChakraProvider>\r\n    </React.StrictMode>,\r\n    rootElement\r\n);\r\n"],"sourceRoot":""}