{"version":3,"sources":["Components/Home.js","Components/Search.js","Components/GeomanPage.js","App.js","reportWebVitals.js","index.js"],"names":["Home","MapContainer","bounds","this","props","center","minZoom","doubleClickZoom","crs","CRS","Simple","LayersControl","position","collapsed","BaseLayer","ref","baseLayerRef","checked","name","theLayers","ImageOverlay","url","pathToImg","Component","Search","useState","setError","isSearchLoaded","setSearchIsLoaded","searchItems","setSearchItems","React","searchTerm","setSearchTerm","searchResults","setSearchResults","useEffect","fetch","then","res","json","result","error","results","filter","feature","toLowerCase","includes","console","log","className","type","placeholder","value","onChange","e","target","map","item","key","GeomanPage","mapRef","useRef","floors","useDisclosure","onClose","$","click","isOpen","onOpen","idRef","document","ready","current","pm","addControls","drawCircleMarker","drawCircle","drawMarker","drawPolyline","currentBaseLayer","on","layer","remove","off","event","ID","val","LUProperties","id","addLayer","m","onClick","processedLayers","layers","features","forEach","el","index","shape","_shape","coordinates","_parts","push","x","y","toString","processLayers","layersResult","_layers","Polyline","Polygon","findLayers","html","JSON","stringify","undefined","initialFocusRef","pb","mt","colorScheme","mr","whenCreated","mapInstance","maxZoom","LayerGroup","App","window","location","origin","baseUrl","0","imageName","1","2","3","4","5","to","exact","path","render","status","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.bf3825e9.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\nimport {ImageOverlay, LayersControl, MapContainer} from 'react-leaflet'\r\nimport {CRS} from 'leaflet';\r\n\r\nclass Home extends Component {\r\n    render() {\r\n        return (\r\n            <MapContainer bounds={this.props.bounds} center={this.props.center} minZoom={-5} doubleClickZoom={false} crs={CRS.Simple}>\r\n                <LayersControl position=\"topright\" collapsed={false}>\r\n                    {/* layers + layer control */}\r\n                    <LayersControl.BaseLayer ref={this.props.baseLayerRef} checked name={this.props.theLayers[1][\"name\"]}>\r\n                        <ImageOverlay bounds={this.props.bounds} url={this.props.pathToImg + this.props.theLayers[1][\"imageName\"]} />\r\n                    </LayersControl.BaseLayer>\r\n                    <LayersControl.BaseLayer name={this.props.theLayers[2][\"name\"]}>\r\n                        <ImageOverlay bounds={this.props.bounds} url={this.props.pathToImg + this.props.theLayers[2][\"imageName\"]} />\r\n                    </LayersControl.BaseLayer>\r\n                    <LayersControl.BaseLayer name={this.props.theLayers[3][\"name\"]}>\r\n                        <ImageOverlay bounds={this.props.bounds} url={this.props.pathToImg + this.props.theLayers[3][\"imageName\"]} />\r\n                    </LayersControl.BaseLayer>\r\n                    <LayersControl.BaseLayer name={this.props.theLayers[4][\"name\"]}>\r\n                        <ImageOverlay bounds={this.props.bounds} url={this.props.pathToImg + this.props.theLayers[4][\"imageName\"]} />\r\n                    </LayersControl.BaseLayer>\r\n                    <LayersControl.BaseLayer name={this.props.theLayers[5][\"name\"]}>\r\n                        <ImageOverlay bounds={this.props.bounds} url={this.props.pathToImg + this.props.theLayers[5][\"imageName\"]} />\r\n                    </LayersControl.BaseLayer>\r\n                </LayersControl>            </MapContainer>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;\r\n","import React, {useEffect, useState} from \"react\";\r\n\r\n// inspired by https://codesandbox.io/s/practical-nightingale-m2b5n?file=/src/index.js\r\n\r\nfunction Search() {\r\n    const [error, setError] = useState(null);\r\n    const [isSearchLoaded, setSearchIsLoaded] = useState(false);\r\n    const [searchItems, setSearchItems] = useState([]);\r\n\r\n    const [searchTerm, setSearchTerm] = React.useState(\"\");\r\n    const [searchResults, setSearchResults] = React.useState([]);\r\n    const handleChange = e => {\r\n        setSearchTerm(e.target.value);\r\n    };\r\n\r\n\r\n    // Note: the empty deps array [] means\r\n    // this useEffect will run once\r\n    // similar to componentDidMount()\r\n    useEffect(() => {\r\n        fetch(\"/kartes/data.json\")\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    setSearchIsLoaded(true);\r\n                    setSearchItems(result);\r\n                },\r\n                (error) => {\r\n                    setSearchIsLoaded(true);\r\n                    setError(error);\r\n                }\r\n            )\r\n    }, [])\r\n\r\n        React.useEffect(() => {\r\n            if (isSearchLoaded) {\r\n                const results = searchItems[\"features\"].filter(feature => {\r\n                        return feature[\"properties\"][\"roomID\"].toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n                            feature[\"properties\"][\"roomType\"].toLowerCase().includes(searchTerm.toLowerCase());\r\n                    }\r\n                )\r\n\r\n                setSearchResults(results);\r\n                console.log(searchResults);\r\n            }\r\n        }, [searchTerm]);\r\n\r\n        return (\r\n            <div className=\"App\">\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Search\"\r\n                    value={searchTerm}\r\n                    onChange={handleChange}\r\n                />\r\n                <ul>\r\n                    {searchResults.map((item, key) => (\r\n                        <li key={\"item-\" +key} >{item[\"properties\"][\"floor\"]}. stāvs &nbsp; {item[\"properties\"][\"roomID\"]}.{item[\"properties\"][\"roomType\"]}</li>\r\n                    ))}\r\n                </ul>\r\n            </div>\r\n        )\r\n}\r\n\r\nexport default Search;\r\n","import React from 'react'\r\nimport $ from 'jquery'\r\nimport {\r\n    Button,\r\n    ChakraProvider, FormControl, FormLabel, Input,\r\n    Modal, ModalBody,\r\n    ModalCloseButton,\r\n    ModalContent, ModalFooter,\r\n    ModalHeader,\r\n    ModalOverlay, Select, useDisclosure\r\n} from \"@chakra-ui/react\";\r\nimport {\r\n    MapContainer,\r\n    LayerGroup,\r\n    LayersControl,\r\n    ImageOverlay,\r\n} from \"react-leaflet\";\r\nimport {CRS, Polygon, Polyline} from \"leaflet\";\r\n\r\nimport \"@geoman-io/leaflet-geoman-free\";\r\nimport \"@geoman-io/leaflet-geoman-free/dist/leaflet-geoman.css\";\r\n\r\n// still to do\r\n// 1. add modal edit option (open modal, preferably with written previous data)\r\n// 2. add some validation, for ID only numbers, both fields required etc\r\n// 3. is there a bug that first layer is removed even when submitting? First time had, then no.\r\n// 4. db schema - should data be grouped by floor number or floor number should be in properties field for each?\r\n// 5. remove unneeded stuff\r\n// 6. json bin ? or no.\r\n\r\nfunction GeomanPage(props) {\r\n\r\n    const mapRef = React.useRef();\r\n    const floors = [React.useRef(), React.useRef(), React.useRef(), React.useRef(), React.useRef()];\r\n\r\n    const { isOpen, onOpen, onClose } = useDisclosure({\r\n        onClose() { $(\"#cancelButton\").click(); }\r\n    }) // for modal\r\n    const idRef = React.useRef() // for modal\r\n\r\n\r\n    function printJSON() {\r\n        let map = mapRef.current;\r\n        let rawLayers = null;\r\n        let processedLayers = null;\r\n        if (map) {\r\n            rawLayers = findLayers();\r\n            processedLayers = processLayers(rawLayers);\r\n        }\r\n\r\n        $(\"#bin-data-sent\").html(\"<pre>\" + JSON.stringify(processedLayers, undefined, 2) + \"</pre>\");\r\n    }\r\n\r\n    function processLayers(layers) {\r\n        let result = {\r\n            \"type\": \"GeometryCollection\",\r\n            \"features\": []\r\n        };\r\n\r\n        for (let key in layers) {\r\n            let target = result.features;\r\n            layers[key].forEach((el, index) => {\r\n                let shape = el.pm._shape;\r\n\r\n                // get coordinates\r\n                let coordinates = [];\r\n                el._parts[0].forEach((el, index) => {\r\n                    coordinates.push([el.x, el.y]);\r\n                });\r\n\r\n                // push clean geoJSON data object\r\n                target.push({\r\n                    \"type\": shape,\r\n                    \"id\": key.toString() + index.toString(),\r\n                    \"properties\": {\r\n                        \"floor\": key,\r\n                        \"roomID\": el.LUProperties.id,\r\n                        \"roomType\": el.LUProperties.type\r\n                    },\r\n                    \"coordinates\": coordinates\r\n                })\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // filter drawed layers grouped by floor\r\n    function findLayers() {\r\n        let layersResult = {\"1\": [], \"2\": [], \"3\": [], \"4\": [], \"5\": []}; // init empty\r\n\r\n        // go over each floor and add each floor's drawings\r\n        floors.forEach((el, index) => {\r\n            let layers = el.current._layers; // this is a little sketchy to use _layers variable\r\n            for (let key in layers) {\r\n                if (\r\n                    layers[key] instanceof Polyline || // only if its polyline or polygon\r\n                    layers[key] instanceof Polygon\r\n                ) {\r\n                    layersResult[index+1].push(layers[key]);\r\n                }\r\n            }\r\n        });\r\n\r\n        // // filter out layers that don't have the leaflet-geoman instance\r\n        // layersResult = layersResult.filter(layer => !!layer.pm);\r\n        //\r\n        // // filter out everything thats leaflet-geoman specific temporary stuff\r\n        // layersResult = layersResult.filter(layer => !layer._pmTempLayer);\r\n\r\n        return layersResult;\r\n    }\r\n\r\n    $(document).ready(function() {\r\n        let map = mapRef.current;\r\n        if (map) {\r\n            map.pm.addControls({\r\n                drawCircleMarker: false,\r\n                drawCircle: false,\r\n                drawMarker: false,\r\n                drawPolyline: false\r\n            });\r\n\r\n            let currentBaseLayer = floors[0].current;\r\n\r\n            // on new drawing created\r\n            map.on('pm:create', function (e) {\r\n                onOpen(); // opens modal\r\n\r\n                // remove layer if cancelled\r\n                $(\"#cancelButton\").on(\"click\", function () {\r\n                    e.layer.remove();\r\n                    $(\"#mainForm\").off(\"click\");\r\n                    $(\"#cancelbutton\").off(\"click\");\r\n                });\r\n\r\n                // add layer if form submitted\r\n                $(\"#mainForm\").on(\"submit\", function (event) {\r\n                    let ID = $(\"#idField\").val();\r\n                    let type = $(\"#typeField\").val();\r\n                    e.layer.LUProperties = {};\r\n                    e.layer.LUProperties.id = ID;\r\n                    e.layer.LUProperties.type = type;\r\n                    currentBaseLayer.addLayer(e.layer);\r\n                    $(\"#mainForm\").off(\"submit\");\r\n                    $(\"#cancelButton\").off(\"click\");\r\n                });\r\n\r\n            // on floor change\r\n            }).on('baselayerchange', function (e) {\r\n                currentBaseLayer = e.layer;\r\n            })\r\n        }\r\n    });\r\n\r\n    //\r\n    return (\r\n        <div id=\"geoman-wrapper\">\r\n            <ChakraProvider>\r\n                <Button m={1} onClick={printJSON} id=\"button-geoJSON\">GeoJSON</Button>\r\n                <Button m={1} id=\"button-clear\">Clear printed data</Button>\r\n                <Button m={1} id=\"button-draw\">Refresh data and draw</Button>\r\n                <Modal\r\n                    initialFocusRef={idRef}\r\n                    isOpen={isOpen}\r\n                    onClose={onClose}\r\n                >\r\n                    <ModalOverlay />\r\n                    <ModalContent>\r\n                        <ModalHeader>Telpas informācija</ModalHeader>\r\n                        <ModalCloseButton />\r\n                        <form id=\"mainForm\">\r\n                        <ModalBody pb={6}>\r\n                            <FormControl>\r\n                                <FormLabel>ID</FormLabel>\r\n                                <Input id=\"idField\" ref={idRef} placeholder=\"Piemēram, 312\"/>\r\n                            </FormControl>\r\n\r\n                            <FormControl mt={4}>\r\n                                <FormLabel>Tips</FormLabel>\r\n                                <Select id=\"typeField\" placeholder=\"Izvēlies tipu\">\r\n                                    <option value=\"kabinets\">Kabinets</option>\r\n                                    <option value=\"laboratorija\">Laboratorija</option>\r\n                                    <option value=\"cits\">Cits</option>\r\n                                </Select>\r\n                            </FormControl>\r\n                        </ModalBody>\r\n\r\n                            <ModalFooter>\r\n                                <Button onClick={onClose} type=\"submit\" colorScheme=\"blue\" mr={3}>\r\n                                    Saglabāt\r\n                                </Button>\r\n                                <Button onClick={onClose} id=\"cancelButton\">Atcelt</Button>\r\n                            </ModalFooter>\r\n                        </form>\r\n                    </ModalContent>\r\n                </Modal>\r\n\r\n            </ChakraProvider>\r\n            <div id=\"bin-data-sent\" className=\"bin-data\"/>\r\n            <div id=\"bin-data-received-content\" className=\"bin-data\"/>\r\n            <div id=\"bin-data-received-metadata\" className=\"bin-data\"/>\r\n            <MapContainer whenCreated={(mapInstance)=> { mapRef.current = mapInstance }} bounds={props.bounds} center={props.center} maxZoom={1} minZoom={-5} doubleClickZoom={false} crs={CRS.Simple}>\r\n                <LayersControl position=\"topright\" collapsed={false}>\r\n                    {/* layers + layer control */}\r\n                    <LayersControl.BaseLayer  checked name={props.theLayers[1][\"name\"]}>\r\n                        <LayerGroup ref={floors[0]}>\r\n                            <ImageOverlay bounds={props.bounds} url={props.pathToImg + props.theLayers[1][\"imageName\"]} />\r\n                        </LayerGroup>\r\n                    </LayersControl.BaseLayer>\r\n                    <LayersControl.BaseLayer name={props.theLayers[2][\"name\"]}>\r\n                        <LayerGroup ref={floors[1]}>\r\n                            <ImageOverlay bounds={props.bounds} url={props.pathToImg + props.theLayers[2][\"imageName\"]} />\r\n                        </LayerGroup>\r\n                    </LayersControl.BaseLayer>\r\n                    <LayersControl.BaseLayer name={props.theLayers[3][\"name\"]}>\r\n                        <LayerGroup ref={floors[2]}>\r\n                        <ImageOverlay bounds={props.bounds} url={props.pathToImg + props.theLayers[3][\"imageName\"]} />\r\n                        </LayerGroup>\r\n                    </LayersControl.BaseLayer>\r\n                    <LayersControl.BaseLayer name={props.theLayers[4][\"name\"]}>\r\n                        <LayerGroup ref={floors[3]}>\r\n                        <ImageOverlay bounds={props.bounds} url={props.pathToImg + props.theLayers[4][\"imageName\"]} />\r\n                        </LayerGroup>\r\n                    </LayersControl.BaseLayer>\r\n                    <LayersControl.BaseLayer name={props.theLayers[5][\"name\"]}>\r\n                        <LayerGroup ref={floors[4]}>\r\n                        <ImageOverlay bounds={props.bounds} url={props.pathToImg + props.theLayers[5][\"imageName\"]} />\r\n                        </LayerGroup>\r\n                    </LayersControl.BaseLayer>\r\n                </LayersControl>\r\n            </MapContainer>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GeomanPage;\r\n","// import $ from 'jquery';\r\nimport { HashRouter, Switch, Route, Link } from 'react-router-dom'\r\nimport {React, Component} from \"react\";\r\nimport Home from './Components/Home';\r\nimport Search from './Components/Search';\r\nimport GeomanPage from './Components/GeomanPage';\r\nimport { ChakraProvider, Button} from \"@chakra-ui/react\"\r\nimport 'leaflet/dist/leaflet.css';\r\n\r\nclass App extends Component {\r\n    render() {\r\n        // adjust img url\r\n        const baseUrl = window.location.origin;\r\n        const preFolderName = 'kartes/media/';\r\n        const pathToImg = baseUrl + '/' + preFolderName;\r\n\r\n        // map constants\r\n        const bounds = [[0,0], [1000, 1000]]\r\n        const center = [500,500]\r\n        const layers = {\r\n            0: {\r\n                name: \"0. stāvs\",\r\n                imageName: \"\"\r\n            },\r\n            1: {\r\n                name: \"1. stāvs\",\r\n                imageName: \"zm1.svg\"\r\n            },\r\n            2: {\r\n                name: \"2. stāvs\",\r\n                imageName: \"zm2.svg\"\r\n            },\r\n            3: {\r\n                name: \"3. stāvs\",\r\n                imageName: \"zm3.svg\"\r\n            },\r\n            4: {\r\n                name: \"4. stāvs\",\r\n                imageName: \"zm4.svg\"\r\n            },\r\n            5: {\r\n                name: \"5. stāvs\",\r\n                imageName: \"zm5.svg\"\r\n            },\r\n\r\n        }\r\n\r\n\r\n        return (\r\n            <>\r\n                <HashRouter>\r\n                    <ChakraProvider>\r\n                        <Link to=\"/\">\r\n                            <Button m={1} colorScheme=\"blue\">Home</Button>\r\n                        </Link>\r\n                        <Link to=\"/geoman\">\r\n                            <Button m={1} colorScheme=\"blue\">Geoman</Button>\r\n                        </Link>\r\n                        <Link to=\"/search\">\r\n                            <Button m={1} colorScheme=\"blue\">Search</Button>\r\n                        </Link>\r\n                    </ChakraProvider>\r\n                    <Switch>\r\n                        <Route exact path='/geoman' render={(props) => (<GeomanPage {...props} pathToImg={pathToImg} bounds={bounds} center={center} theLayers={layers} />)}/>\r\n                        <Route exact path='/search' render={(props) => (<Search {...props} pathToImg={pathToImg} bounds={bounds} center={center} theLayers={layers} />)}/>\r\n                        <Route exact path='/' render={(props) => (<Home {...props} pathToImg={pathToImg} bounds={bounds} center={center} theLayers={layers} />)}/>\r\n                        <Route status={404}>\r\n                            <div>Page not found.</div>\r\n                        </Route>\r\n                    </Switch>\r\n                </HashRouter>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}