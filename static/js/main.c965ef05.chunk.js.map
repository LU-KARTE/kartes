{"version":3,"sources":["Components/Home.js","Components/SearchInput.js","Components/Search.js","Components/GeomanPage.js","App.js","utils/theme.js","index.js"],"names":["Popup","feature","roomID","roomType","roomDescription","properties","size","Home","props","fetchData","id","fetch","then","res","json","result","foundFlag","console","log","forEach","error","onEachFeature","layer","popupContent","ReactDOMServer","bindPopup","state","currentBaseLayerFloorNumber","match","params","features","groupedFeaturesGeoJSON","floor","push","this","groupFeaturesByFloor","setState","prevState","mapRerenderKey","alert","$","document","ready","on","prevstate","prevProps","snapshot","floor1Checked","floor2Checked","floor3Checked","floor4Checked","floor5Checked","mr","pl","ChevronLeft","style","w","h","fontSize","ChevronRight","MapContainer","bounds","center","minZoom","doubleClickZoom","crs","CRS","Simple","LayersControl","position","collapsed","BaseLayer","checked","ref","baseLayerRef","name","theLayers","LayerGroup","GeoJSON","fillColor","fillOpacity","data","ImageOverlay","url","pathToImg","Component","withRouter","SearchInputField","pointerEvents","children","Search2","color","type","placeholder","value","searchTerm","onChange","handleChange","Search","useState","setError","isSearchLoaded","setSearchIsLoaded","displayResultsList","setDisplayResultsList","searchItems","setSearchItems","React","showAllFilters","setShowAllFilters","allFilters","initval","searchTags","setSearchTags","setSearchTerm","searchResults","setSearchResults","assignPoints","stLowered","toLowerCase","replace","trim","roomFloor","searchWords","split","floorFilter","includes","points","searchWordsLength","length","i","useEffect","event","target","closest","results","JSON","parse","stringify","filter","sort","feature1","feature2","points1","points2","width","className","onFocus","SearchInput","e","spacing","shadow","display","maxH","overflow","css","background","borderRadius","p","pb","onClick","ml","startingHeight","in","flexFlow","Object","keys","map","key","filterItem","mt","colorScheme","data-filtertype","data-filtername","newFilterName","currentTarget","getAttribute","newFilterType","current","item","handleTagChange","slice","to","_hover","bg","substr","toUpperCase","GeomanPage","mapRef","useRef","floors","useDisclosure","onClose","click","isOpen","onOpen","idRef","LoadJSONData","html","currentBaseLayer","pm","addControls","drawCircleMarker","drawCircle","drawMarker","drawPolyline","remove","off","ID","val","LUProperties","addLayer","m","processedLayers","layers","el","index","_shape","coordinates","getLatLngs","lng","lat","toString","processLayers","layersResult","_layers","findLayers","undefined","initialFocusRef","whenCreated","mapInstance","maxZoom","Polygon","pathOptions","positions","App","bind","window","location","origin","baseUrl","0","imageName","1","2","3","4","5","exact","path","render","status","customTheme","extendTheme","colors","primary","100","200","300","400","500","600","700","800","900","rootElement","getElementById","ReactDOM","StrictMode","theme"],"mappings":"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","file":"static/js/main.c965ef05.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\nimport {ImageOverlay, LayersControl, MapContainer, GeoJSON, LayerGroup, Polygon} from 'react-leaflet'\r\nimport {CRS} from 'leaflet';\r\nimport { withRouter } from \"react-router\";\r\nimport $ from \"jquery\";\r\nimport {Center, Flex, Spacer, Text} from \"@chakra-ui/react\";\r\nimport {ChevronLeftIcon, ChevronRightIcon} from \"@chakra-ui/icons\";\r\nimport * as ReactDOMServer from \"react-dom/server\";\r\n\r\n\r\nconst MAXFLOOR = 5;\r\n\r\n\r\nconst Popup = ({ feature }) => {\r\n    let roomID = \"\";\r\n    let roomType = \"\";\r\n    let roomDescription = \"\";\r\n    if (feature.properties) {\r\n        if (feature.properties.roomID) {\r\n            roomID = feature.properties.roomID;\r\n        }\r\n\r\n        if (feature.properties.roomType) {\r\n            roomType = feature.properties.roomType;\r\n        }\r\n\r\n        if (feature.properties.roomDescription) {\r\n            roomDescription = feature.properties.roomDescription;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Text size=\"md\">{`  ${\r\n                roomID + \". \" + roomType + \" \" + roomDescription\r\n            }`}</Text>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nclass Home extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentBaseLayerFloorNumber: 1,\r\n            roomID: this.props.match.params.id,\r\n            features: { \"type\": \"FeatureCollection\",\r\n                \"features\": [\r\n                    { \"type\": \"Feature\",\r\n                        \"geometry\": {\r\n                            \"type\": \"Polygon\",\r\n                            \"coordinates\": [\r\n                                [ [100.0, 0.0], [100, 100], [500, 100],\r\n                                    [500, 0]  ]\r\n                            ]\r\n\r\n                        },\r\n                        \"properties\": {\r\n                            \"prop0\": \"value0\",\r\n                            \"prop1\": {\"this\": \"that\"}\r\n                        }\r\n                    },\r\n                    { \"type\": \"Feature\",\r\n                        \"geometry\": {\r\n                            \"type\": \"Polygon\",\r\n                            \"coordinates\": [\r\n                                [ [700.0, 200], [700, 500], [900, 100],\r\n                                    [500, 200]  ]\r\n                            ]\r\n\r\n                        },\r\n                        \"properties\": {\r\n                            \"prop0\": \"value0\",\r\n                            \"prop1\": {\"this\": \"that\"}\r\n                        }\r\n                    }\r\n                ]\r\n            }\r\n        };\r\n    }\r\n\r\n    // group results (features from JSON) by floors\r\n    groupFeaturesByFloor (features) {\r\n        let groupedFeaturesGeoJSON = {};\r\n\r\n        features.forEach(feature => {\r\n            let floor = feature.properties.floor;\r\n\r\n            if (!(floor in groupedFeaturesGeoJSON)) { // floor not yet initialized\r\n                groupedFeaturesGeoJSON[floor] = {\r\n                    \"type\": \"FeatureCollection\",\r\n                    \"features\": []\r\n                }\r\n            }\r\n\r\n            groupedFeaturesGeoJSON[floor][\"features\"].push(feature);\r\n        })\r\n\r\n        return groupedFeaturesGeoJSON;\r\n    }\r\n\r\n    // componentDidMount\r\n    componentDidMount() {\r\n        const id = this.state.roomID;\r\n        this.fetchData(id);\r\n\r\n        fetch(\"/kartes/data.json\")\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    let groupedFeaturesGeoJSON = this.groupFeaturesByFloor(result.features);\r\n                    this.setState({features: groupedFeaturesGeoJSON});\r\n                    this.setState(prevState => ({mapRerenderKey: prevState.mapRerenderKey + 1}))\r\n                },\r\n                (error) => {\r\n                    alert(\"error fetching data....\");\r\n                }\r\n            )\r\n\r\n        $(document).ready(() => {\r\n            $(\"#FloorDownIcon\").on(\"click\", () => {\r\n                if (this.state.currentBaseLayerFloorNumber > 1) {\r\n                    this.setState(prevstate => (\r\n                        {\"currentBaseLayerFloorNumber\": prevstate[\"currentBaseLayerFloorNumber\"] - 1}\r\n                    ))\r\n                }\r\n            })\r\n\r\n            $(\"#FloorUpIcon\").on(\"click\", () => {\r\n                if (this.state.currentBaseLayerFloorNumber < MAXFLOOR)\r\n                    this.setState(prevstate => (\r\n                        {\"currentBaseLayerFloorNumber\": prevstate[\"currentBaseLayerFloorNumber\"] + 1}\r\n                    ))\r\n            })\r\n        })\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.state.roomID !== this.props.match.params.id) {\r\n            this.setState({roomID: this.props.match.params.id});\r\n        }\r\n        const id = this.state.roomID;\r\n        this.fetchData(id);\r\n    }\r\n\r\n    fetchData = id => {\r\n        if (!id) return;\r\n\r\n        // alert(\"[check console] Search for room #\" + id);\r\n\r\n        fetch(\"/kartes/data.json\")\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    // just some console logs...\r\n                    let foundFlag = false;\r\n                    console.log(\"Fetched data:\");\r\n                    console.log(result);\r\n                    result[\"features\"].forEach ((feature) => {\r\n                            if (feature[\"properties\"][\"roomID\"] === id) {\r\n                                console.log(\"The requested room was found:\")\r\n                                console.log(feature);\r\n                                foundFlag = true;\r\n                            }\r\n                        }\r\n                    )\r\n                    if (!foundFlag)\r\n                        console.log(\"Room was not found.\");\r\n\r\n\r\n                },\r\n                (error) => {\r\n                    // ... some error parsing\r\n                }\r\n            )\r\n    };\r\n\r\n    onEachFeature = (feature, layer) => {\r\n        const popupContent = ReactDOMServer.renderToString(\r\n            <Popup feature={feature} />\r\n        );\r\n        layer.bindPopup(popupContent);\r\n    };\r\n\r\n    render() {\r\n        // for floor changes consts... better would be to include in JSX elements directly but somewhy not working.\r\n        const floor1Checked = this.state.currentBaseLayerFloorNumber === 1;\r\n        const floor2Checked = this.state.currentBaseLayerFloorNumber === 2;\r\n        const floor3Checked = this.state.currentBaseLayerFloorNumber === 3;\r\n        const floor4Checked = this.state.currentBaseLayerFloorNumber === 4;\r\n        const floor5Checked = this.state.currentBaseLayerFloorNumber === 5;\r\n        //\r\n        //\r\n        // const limeOptions = { color: 'lime' }\r\n        //\r\n        // const polygon = [\r\n        //     [0, 0],\r\n        //     [1000, 0],\r\n        //     [1000, 1000],\r\n        //     [0, 1000],\r\n        // ]\r\n\r\n        return (\r\n            <>\r\n                <Flex mr={4}>\r\n                    {this.state.roomID ?\r\n                        <Text pl={4}>Tiek meklēts #{this.state.roomID}</Text>\r\n                        : \"\"\r\n                    }\r\n                    <Spacer />\r\n                    <Center>\r\n                        <ChevronLeftIcon id=\"FloorDownIcon\" style={{\"cursor\": \"pointer\"}} w={8} h={8}/>\r\n                        <Text fontSize={20}>{this.state.currentBaseLayerFloorNumber}. Stāvs</Text>\r\n                        <ChevronRightIcon id=\"FloorUpIcon\" style={{\"cursor\": \"pointer\"}} w={8} h={8}/>\r\n                    </Center>\r\n                </Flex>\r\n\r\n\r\n                <MapContainer key={this.state.mapRerenderKey} bounds={this.props.bounds} center={this.props.center} minZoom={-5} doubleClickZoom={false} crs={CRS.Simple}>\r\n                    <LayersControl position=\"topright\" collapsed={false}>\r\n                        {/* layers + layer control */}\r\n                        <LayersControl.BaseLayer checked={floor1Checked} ref={this.props.baseLayerRef} name={this.props.theLayers[1][\"name\"]}>\r\n                            <LayerGroup>\r\n\r\n                                {/*<Polygon pathOptions={limeOptions} positions={polygon} />*/}\r\n                                <GeoJSON style={{fillColor: \"yellow\", fillOpacity: 0.2}} data={this.state.features[1]} onEachFeature={this.onEachFeature}/>\r\n                                <ImageOverlay bounds={this.props.bounds} url={this.props.pathToImg + this.props.theLayers[1][\"imageName\"]} />\r\n                            </LayerGroup>\r\n                        </LayersControl.BaseLayer>\r\n                        <LayersControl.BaseLayer checked={floor2Checked} name={this.props.theLayers[2][\"name\"]}>\r\n                            <LayerGroup>\r\n                                <GeoJSON style={{fillColor: \"yellow\", fillOpacity: 0.2}} data={this.state.features[2]} onEachFeature={this.onEachFeature}/>\r\n                                <ImageOverlay bounds={this.props.bounds} url={this.props.pathToImg + this.props.theLayers[2][\"imageName\"]} />\r\n                            </LayerGroup>\r\n                        </LayersControl.BaseLayer>\r\n                        <LayersControl.BaseLayer checked={floor3Checked} name={this.props.theLayers[3][\"name\"]}>\r\n                            <LayerGroup>\r\n                                <GeoJSON style={{fillColor: \"yellow\", fillOpacity: 0.2}} data={this.state.features[3]} onEachFeature={this.onEachFeature}/>\r\n                                <ImageOverlay bounds={this.props.bounds} url={this.props.pathToImg + this.props.theLayers[3][\"imageName\"]} />\r\n                            </LayerGroup>\r\n                        </LayersControl.BaseLayer>\r\n                        <LayersControl.BaseLayer checked={floor4Checked} name={this.props.theLayers[4][\"name\"]}>\r\n                            <LayerGroup>\r\n                                <GeoJSON style={{fillColor: \"yellow\", fillOpacity: 0.2}} data={this.state.features[4]} onEachFeature={this.onEachFeature}/>\r\n                                <ImageOverlay bounds={this.props.bounds} url={this.props.pathToImg + this.props.theLayers[4][\"imageName\"]} />\r\n                            </LayerGroup>\r\n                        </LayersControl.BaseLayer>\r\n                        <LayersControl.BaseLayer checked={floor5Checked} name={this.props.theLayers[5][\"name\"]}>\r\n                            <LayerGroup>\r\n                                <GeoJSON style={{fillColor: \"yellow\", fillOpacity: 0.2}} data={this.state.features[5]} onEachFeature={this.onEachFeature}/>\r\n                                <ImageOverlay bounds={this.props.bounds} url={this.props.pathToImg + this.props.theLayers[5][\"imageName\"]} />\r\n                            </LayerGroup>\r\n                        </LayersControl.BaseLayer>\r\n                    </LayersControl>\r\n                </MapContainer>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(Home);\r\n","import {Box, Input, InputGroup, InputLeftElement} from \"@chakra-ui/react\";\r\nimport {Search2Icon} from \"@chakra-ui/icons\";\r\nimport React from \"react\";\r\n\r\nfunction SearchInputField(props) {\r\n    // const {searchTerm, handleChange, ...rest} = props;\r\n\r\n    return (\r\n        <Box>\r\n            <InputGroup>\r\n                <InputLeftElement\r\n                    pointerEvents=\"none\"\r\n                    children={<Search2Icon color=\"gray.300\" />}\r\n                />\r\n                <Input\r\n                    type=\"text\"\r\n                    placeholder=\"Meklēt...\"\r\n                    value={props.searchTerm}\r\n                    onChange={props.handleChange}\r\n                />\r\n            </InputGroup>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default SearchInputField;","import React, {useEffect, useState} from \"react\";\r\nimport {\r\n    Badge,\r\n    Box, Button,\r\n    Center,\r\n    ChakraProvider, Fade,\r\n    Flex,\r\n    HStack,\r\n    Image,\r\n    Input,\r\n    InputGroup,\r\n    InputLeftElement,\r\n    List,\r\n    ListItem,\r\n    Spacer,\r\n    Tag,\r\n    Text,\r\n    useDisclosure,\r\n    ScaleFade, Slide, SlideFade, Collapse, Divider\r\n} from \"@chakra-ui/react\";\r\nimport {Search2Icon, StarIcon} from '@chakra-ui/icons'\r\nimport {Link} from \"react-router-dom\";\r\nimport SearchInputField from './SearchInput';\r\nimport $ from 'jquery';\r\n\r\n\r\n// inspired by https://codesandbox.io/s/practical-nightingale-m2b5n?file=/src/index.js\r\nconst MAXSEARCHLISTROWS = 1000;\r\n\r\nfunction Search(props) {\r\n    const [error, setError] = useState(null);\r\n    const [isSearchLoaded, setSearchIsLoaded] = useState(false);\r\n    const [displayResultsList, setDisplayResultsList] = useState(\"none\"); // none or block\r\n    const [searchItems, setSearchItems] = useState([]);\r\n\r\n    const [showAllFilters, setShowAllFilters] = React.useState(false)\r\n\r\n    const handleToggleFilters = () => setShowAllFilters(!showAllFilters)\r\n\r\n    // it outputs in frontend in the same order as the list is here\r\n    const allFilters = {\r\n        \"roomTypes\" : [\r\n            {\r\n                \"filterTerm\": \"kabinets\",\r\n                \"frontendName\": \"Kabineti\",\r\n            },\r\n            {\r\n                \"filterTerm\": \"laboratorija\",\r\n                \"frontendName\": \"Laboratorijas\",\r\n            },\r\n            {\r\n                \"filterTerm\": \"cits\",\r\n                \"frontendName\": \"Citi\",\r\n            },\r\n        ],\r\n        \"floors\" : [\r\n            {\r\n                \"filterTerm\": \"1\",\r\n                \"frontendName\": \"1. stāvs\",\r\n            },\r\n            {\r\n                \"filterTerm\": \"2\",\r\n                \"frontendName\": \"2. stāvs\",\r\n            },\r\n            {\r\n                \"filterTerm\": \"3\",\r\n                \"frontendName\": \"3. stāvs\",\r\n            },\r\n            {\r\n                \"filterTerm\": \"4\",\r\n                \"frontendName\": \"4. stāvs\",\r\n            },\r\n            {\r\n                \"filterTerm\": \"5\",\r\n                \"frontendName\": \"5. stāvs\",\r\n            },\r\n        ]\r\n    }\r\n\r\n    const initval = {\r\n        \"roomTypes\" : [\r\n            \"kabinets\",\r\n            \"laboratorija\",\r\n            \"cits\",\r\n        ],\r\n        \"floors\" : [\r\n            \"1\",\r\n            \"2\",\r\n            \"3\",\r\n            \"4\",\r\n            \"5\",\r\n        ]\r\n    }\r\n    const [searchTags, setSearchTags] = useState(initval )\r\n\r\n    const [searchTerm, setSearchTerm] = React.useState(\"\");\r\n    const [searchResults, setSearchResults] = React.useState([]);\r\n\r\n\r\n    const handleChange = e => {\r\n        setSearchTerm(e.target.value);\r\n    };\r\n\r\n    // toggle clicked filter\r\n    const handleTagChange = e => {\r\n        // clicked filter value\r\n        const newFilterName = e.currentTarget.getAttribute(\"data-filtername\");\r\n        const newFilterType = e.currentTarget.getAttribute(\"data-filtertype\");\r\n\r\n        // add filter\r\n        if (!searchTags[newFilterType].includes(newFilterName)) {\r\n            setSearchTags(current =>\r\n                {\r\n                    let result = JSON.parse(JSON.stringify(current));// deep copy; otherwise, does not work\r\n\r\n                    result[newFilterType].push(newFilterName);\r\n\r\n                    return result;\r\n                }\r\n            )\r\n        }\r\n\r\n        // remove filter\r\n        else {\r\n            setSearchTags(current => {\r\n                    let result = JSON.parse(JSON.stringify(current)); // deep copy; otherwise, does not work\r\n\r\n                    result[newFilterType] = searchTags[newFilterType].filter(item => !newFilterName.includes(item))\r\n\r\n                    return result;\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n    // Note: the empty deps array [] means\r\n    // this useEffect will run once\r\n    // similar to componentDidMount()\r\n    useEffect(() => {\r\n        // get data\r\n        fetch(\"/kartes/data.json\")\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    setSearchIsLoaded(true);\r\n                    setSearchItems(result);\r\n                },\r\n                (error) => {\r\n                    setSearchIsLoaded(true);\r\n                    setError(error);\r\n                }\r\n            )\r\n\r\n        // to hide search results on outside click\r\n        $(document).on(\"click\", function(event) {\r\n            if ($(event.target).closest('#searchWrapper').length === 0)\r\n                setDisplayResultsList(\"none\");\r\n        });\r\n    }, [])\r\n\r\n    function resetFilters() {\r\n        setSearchTags(initval);\r\n    }\r\n\r\n    // to indicate how good the result is (depends on specific feature properties and search terms splitted)\r\n    function assignPoints(feature) {\r\n        let stLowered = searchTerm.toLowerCase().replace(/[^a-z0-9 ]/gi,'').trim(); // search term whole\r\n        let roomID = feature[\"properties\"][\"roomID\"].toLowerCase();\r\n        let roomType = feature[\"properties\"][\"roomType\"].toLowerCase();\r\n        let roomFloor = feature[\"properties\"][\"floor\"].toLowerCase();\r\n\r\n        let searchWords = stLowered.split(\" \"); // array of words (search terms)\r\n\r\n        let floorFilter = searchTags[\"floors\"];\r\n        let roomTypesFilter = searchTags[\"roomTypes\"];\r\n\r\n        let filtersOK = roomTypesFilter.includes(roomType) && floorFilter.includes(roomFloor);\r\n\r\n        if (!filtersOK) {\r\n            return 0;\r\n        }\r\n\r\n        // award points to the potential search result\r\n        let includesPoints = 0.3;\r\n        let equalPoints = 1.0;\r\n        let points = 0;\r\n        let searchWordsLength = searchWords.length;\r\n\r\n        if (searchWordsLength === 0 || (searchWordsLength === 1 && (searchWords[0] === \"\" || searchWords[0] === \" \"))) {\r\n            return 1;\r\n        }\r\n\r\n        for (let i = 0; i < searchWordsLength; i++) {\r\n            if (searchWords[i] === \"\")\r\n                continue;\r\n            if (roomID === searchWords[i])\r\n                points += equalPoints;\r\n            else if (roomID.includes(searchWords[i]))\r\n                points += includesPoints;\r\n            if (roomType === searchWords[i])\r\n                points += equalPoints;\r\n            else if (roomType.includes(searchWords[i]))\r\n                points += includesPoints;\r\n        }\r\n\r\n        return points;\r\n    }\r\n\r\n    // search logic\r\n    React.useEffect(() => {\r\n        if (isSearchLoaded) {\r\n            const itemsToSort = JSON.parse(JSON.stringify(searchItems[\"features\"])); // deep copy\r\n            let results = itemsToSort\r\n                .filter(feature => {\r\n                    return assignPoints(feature) > 0;\r\n                })\r\n                .sort((feature1, feature2) => {\r\n                        let points1 = assignPoints(feature1); // points indicate how \"suitable\" the result is\r\n                        let points2 = assignPoints(feature2);\r\n\r\n                        if (points1 > points2) return -1;\r\n                        else if (points1 < points2) return 1;\r\n                        else return 0;\r\n                    }\r\n                )\r\n\r\n            // #999872 not good. for bug fix that 1 element does not appear (state is not changed somewhy).\r\n            if (results.length === 1)\r\n                results.push({});\r\n\r\n            setSearchResults(results);\r\n        }\r\n    }, [searchTerm, searchTags, searchItems]);\r\n\r\n    return (\r\n        <Box id=\"searchWrapper\" width=\"full\" className=\"App\" onFocus={() => setDisplayResultsList(\"block\")}>\r\n                <SearchInputField searchTerm={searchTerm} handleChange={handleChange}/>\r\n                <div>\r\n                    {/* search results list */}\r\n                    {/*<Text mt={3} mb={3}><b>Atrastās telpas:</b></Text>*/}\r\n                    <List spacing={0} shadow={\"md\"} style={{display: displayResultsList}} maxH={300} overflow={\"scroll\"}\r\n                          css={{\r\n                        '&::-webkit-scrollbar': {\r\n                            width: '4px',\r\n                        },\r\n                        '&::-webkit-scrollbar-track': {\r\n                            width: '6px',\r\n                        },\r\n                        '&::-webkit-scrollbar-thumb': {\r\n                            background: \"#bbb\",\r\n                            borderRadius: '24px',\r\n                        },\r\n                    }}>\r\n\r\n                        {/* display filter tags */}\r\n                        <ListItem key=\"filterTags\" p={3} pb={0}>\r\n                            <Button size=\"sm\" onClick={handleToggleFilters}>{showAllFilters ? \"Aizvērt\" : \"Atvērt\"} filtrus</Button>\r\n                            <Button ml={2} size=\"sm\" onClick={resetFilters}>Izslēgt filtrus</Button>\r\n                            <Collapse startingHeight={0} in={showAllFilters}>\r\n                                <Flex css={{\r\n                                    flexFlow: \"row wrap\"\r\n                                }}>\r\n                                    {\r\n                                        // iterate over all tags\r\n                                        Object.keys(allFilters).map((key) => {\r\n                                            return allFilters[key].map(filterItem => {\r\n\r\n                                                // if filter is active, set color to blue; otherwise, gray\r\n                                                let color = \"\";\r\n\r\n                                                searchTags[key].includes(filterItem[\"filterTerm\"]) ? color = \"blue\" : color = \"gray\"\r\n\r\n                                                return (\r\n                                                    <Tag mr={2} mt={2} size={\"lg\"} colorScheme={color} key={filterItem[\"filterTerm\"]} data-filtertype={key} data-filtername={filterItem[\"filterTerm\"]}\r\n                                                         onClick={(e) => handleTagChange(e)}>\r\n                                                        {filterItem[\"frontendName\"]}\r\n                                                    </Tag> )\r\n                                            })\r\n                                        })\r\n                                    }\r\n                                </Flex>\r\n\r\n                            </Collapse>\r\n                            <Divider mt={1}/>\r\n                        </ListItem>\r\n\r\n                        {/* Display search results */}\r\n                        {searchResults.length > 1 ?\r\n                            // (Object.keys(searchResults[1]).length === 0 ? 1 : MAXSEARCHLISTROWS) ==> this could be just MAXSEARCHLISTROWS but due #999872 it is so that does not break if only one result found.\r\n                            searchResults.slice(0, (Object.keys(searchResults[1]).length === 0 ? 1 : MAXSEARCHLISTROWS)).map((item, key) => (\r\n                                <Link onClick={() => setDisplayResultsList(\"none\")} key={key} to={\"/\"+item[\"properties\"][\"roomID\"]}>\r\n                                    <ListItem _hover={{ bg: \"#f1f1f1\" }} p={3}>\r\n                                        <Flex>\r\n                                            <Text>\r\n                                                {item[\"properties\"][\"roomID\"] + \". \" + item[\"properties\"][\"roomType\"].substr(0,1).toUpperCase() + item[\"properties\"][\"roomType\"].substr(1)} {/* capitalize */}\r\n                                            </Text>\r\n                                            <Spacer />\r\n                                            <Text> {item[\"properties\"][\"floor\"]}. stāvs</Text>\r\n                                        </Flex>\r\n                                    </ListItem>\r\n                                    <Divider />\r\n                                </Link>\r\n                            ))\r\n                            :\r\n                            <ListItem>\r\n                                <Text fontSize={\"md\"} p={3}>\r\n                                    Nekas netika atrasts.\r\n                                </Text>\r\n                            </ListItem>\r\n                        }\r\n                    </List>\r\n                    {/*<li key={\"item-\" +key} >{item[\"properties\"][\"floor\"]}. stāvs &nbsp; {item[\"properties\"][\"roomID\"]}.{item[\"properties\"][\"roomType\"]}</li>*/}\r\n                </div>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default Search;\r\n","import React, {useState} from 'react'\r\nimport $ from 'jquery'\r\nimport {\r\n    Button,\r\n    ChakraProvider, FormControl, FormLabel, Input,\r\n    Modal, ModalBody,\r\n    ModalCloseButton,\r\n    ModalContent, ModalFooter,\r\n    ModalHeader,\r\n    ModalOverlay, Select, useDisclosure\r\n} from \"@chakra-ui/react\";\r\nimport {\r\n    MapContainer,\r\n    LayerGroup,\r\n    LayersControl,\r\n    ImageOverlay,\r\n    Polygon\r\n} from \"react-leaflet\";\r\nimport {CRS, Polyline} from \"leaflet\";\r\n\r\nimport \"@geoman-io/leaflet-geoman-free\";\r\nimport \"@geoman-io/leaflet-geoman-free/dist/leaflet-geoman.css\";\r\n\r\n// still to do\r\n// 1. add modal edit option (open modal, preferably with written previous data)\r\n// 2. add some validation, for ID only numbers, both fields required etc\r\n// 3. is there a bug that first layer is removed even when submitting? First time had, then no.\r\n// 4. db schema - should data be grouped by floor number or floor number should be in properties field for each?\r\n// 5. remove unneeded stuff\r\n// 6. json bin ? or no.\r\n\r\nfunction GeomanPage(props) {\r\n\r\n    const mapRef = React.useRef();\r\n    const floors = [React.useRef(), React.useRef(), React.useRef(), React.useRef(), React.useRef()];\r\n\r\n    const { isOpen, onOpen, onClose } = useDisclosure({\r\n        onClose() { $(\"#cancelButton\").click(); }\r\n    }) // for modal\r\n    const idRef = React.useRef() // for modal\r\n    const [JSONData, LoadJSONData] = useState({})\r\n\r\n\r\n    function printJSON() {\r\n        let map = mapRef.current;\r\n        let rawLayers = null;\r\n        let processedLayers = null;\r\n        if (map) {\r\n            rawLayers = findLayers();\r\n            processedLayers = processLayers(rawLayers);\r\n        }\r\n\r\n        $(\"#bin-data-sent\").html(\"<pre>\" + JSON.stringify(processedLayers, undefined, 2) + \"</pre>\");\r\n    }\r\n\r\n    function processLayers(layers) {\r\n\r\n        let map = mapRef.current;\r\n\r\n        if (map) {\r\n\r\n            let result = {\r\n                \"type\": \"FeatureCollection\",\r\n                \"features\": []\r\n            };\r\n\r\n            for (let key in layers) {\r\n                let target = result.features;\r\n                layers[key].forEach((el, index) => {\r\n                    let shape = el.pm._shape;\r\n\r\n                    // get coordinates\r\n                    let coordinates = [];\r\n                    // console.log(el._parts[0]);\r\n\r\n\r\n\r\n                    //Bounds {min: Point, max: Point}\r\n                    // max: Point {x: 837, y: 145}\r\n                    // min: Point {x: -337, y: -645}\r\n                    // edit coordinates so it is 0 ... 1000... if console.log \"map\", it has _size and _pixelOrigin which would break everything otherwise\r\n                    // let bounds = map.getPixelBounds();\r\n                    // let xMin = bounds.min.x;\r\n                    // let xMax = bounds.max.x;\r\n                    // let yMin = bounds.min.y;\r\n                    // let yMax = bounds.max.y;\r\n                    // let xLength = xMax - xMin;\r\n                    // let yLength = yMax - yMin;\r\n                    // console.log(\"xmin: \", xMin, \"  ymin: \", yMin, \"  xMax: \", xMax, \"  yMax: \", yMax)\r\n\r\n\r\n                    el.getLatLngs()[0].forEach((el, index) => {\r\n                        coordinates.push([el.lng, el.lat]);\r\n                    });\r\n\r\n                    // push clean geoJSON data object\r\n                    target.push({\r\n                        // \"type\": shape,\r\n                        \"type\": \"Feature\",\r\n                        \"id\": key.toString() + index.toString(),\r\n                        \"properties\": {\r\n                            \"floor\": key,\r\n                            \"roomID\": el.LUProperties.id,\r\n                            \"roomType\": el.LUProperties.type\r\n                        },\r\n                        \"geometry\": {\r\n                            \"type\": \"Polygon\",\r\n                            \"coordinates\": [coordinates]\r\n                        }\r\n                    })\r\n                });\r\n            }\r\n\r\n            return result;\r\n        } else {\r\n            alert(\"there was error processing map...\");\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    // filter drawed layers grouped by floor\r\n    function findLayers() {\r\n        let layersResult = {\"1\": [], \"2\": [], \"3\": [], \"4\": [], \"5\": []}; // init empty\r\n\r\n        // go over each floor and add each floor's drawings\r\n        floors.forEach((el, index) => {\r\n            let layers = el.current._layers; // this is a little sketchy to use _layers variable\r\n            for (let key in layers) {\r\n                console.log(layers[key]);\r\n                // if (\r\n                //     layers[key] instanceof Polyline || // only if its polyline or polygon\r\n                //     layers[key] instanceof Polygon\r\n                // ) {\r\n                if (\"LUProperties\" in layers[key])\r\n                    layersResult[index+1].push(layers[key]);\r\n                // }\r\n            }\r\n        });\r\n\r\n        // // filter out layers that don't have the leaflet-geoman instance\r\n        // layersResult = layersResult.filter(layer => !!layer.pm);\r\n        //\r\n        // // filter out everything thats leaflet-geoman specific temporary stuff\r\n        // layersResult = layersResult.filter(layer => !layer._pmTempLayer);\r\n\r\n        return layersResult;\r\n    }\r\n\r\n    $(document).ready(function() {\r\n        let map = mapRef.current;\r\n        \r\n        $(\"#button-clear\").on(\"click\", () => {\r\n            $(\"#bin-data-sent\").html(\"\");\r\n            $(\"#bin-data-received-content\").html(\"\");\r\n        });\r\n\r\n        $(\"#button-receive-data\").on(\"click\", () => {\r\n            fetch(\"/kartes/data.json\")\r\n                .then(res => res.json())\r\n                .then(\r\n                    (result) => {\r\n                        LoadJSONData(result);\r\n                        $(\"#bin-data-received-content\").html(JSON.stringify(result));\r\n                    },\r\n                    (error) => {\r\n                        // ... some error parsing\r\n                    }\r\n                )\r\n        })\r\n\r\n        if (map) {\r\n            let currentBaseLayer = floors[0].current;\r\n\r\n\r\n\r\n            //Bounds {min: Point, max: Point}\r\n            // max: Point {x: 837, y: 145}\r\n            // min: Point {x: -337, y: -645}\r\n            // console.log(map.getPixelBounds());\r\n            // let bounds = map.getPixelBounds();\r\n            // let xMin = bounds.min.x;\r\n            // let xMax = bounds.max.x;\r\n            // let yMin = bounds.min.y;\r\n            // let yMax = bounds.max.y;\r\n\r\n            map.pm.addControls({\r\n                drawCircleMarker: false,\r\n                drawCircle: false,\r\n                drawMarker: false,\r\n                drawPolyline: false\r\n            });\r\n\r\n\r\n            // console.log(map.getPixelOrigin())\r\n\r\n            // on new drawing created\r\n            map.on('pm:create', function (e) {\r\n\r\n                // console.log(e.layer._parts[0]);\r\n                // console.log(\"HELELO\");\r\n                // console.log(e.layer.getLatLngs());\r\n                // let points = e.layer.getLatLngs();\r\n                // let\r\n\r\n                onOpen(); // opens modal\r\n\r\n                // remove layer if cancelled\r\n                $(\"#cancelButton\").on(\"click\", function () {\r\n                    e.layer.remove();\r\n                    $(\"#mainForm\").off(\"click\");\r\n                    $(\"#cancelbutton\").off(\"click\");\r\n                });\r\n\r\n                // add layer if form submitted\r\n                $(\"#mainForm\").on(\"submit\", function (event) {\r\n                    let ID = $(\"#idField\").val();\r\n                    let type = $(\"#typeField\").val();\r\n                    e.layer.LUProperties = {};\r\n                    e.layer.LUProperties.id = ID;\r\n                    e.layer.LUProperties.type = type;\r\n                    currentBaseLayer.addLayer(e.layer);\r\n                    $(\"#mainForm\").off(\"submit\");\r\n                    $(\"#cancelButton\").off(\"click\");\r\n                });\r\n\r\n                // on floor change\r\n            }).on('baselayerchange', function (e) {\r\n                currentBaseLayer = e.layer;\r\n            })\r\n        }\r\n    });\r\n\r\n\r\n\r\n    const limeOptions = { color: 'lime' }\r\n\r\n    const polygon = [\r\n        [0, 0],\r\n        [1000, 0],\r\n        [1000, 1000],\r\n        [0, 1000],\r\n    ]\r\n\r\n    //\r\n    return (\r\n        <div id=\"geoman-wrapper\">\r\n            <Button m={1} onClick={printJSON} id=\"button-geoJSON\">Generate JSON</Button>\r\n            <Button m={1} id=\"button-receive-data\">Receive data</Button>\r\n            <Button m={1} id=\"button-clear\">Clear data</Button>\r\n\r\n            <Modal\r\n                initialFocusRef={idRef}\r\n                isOpen={isOpen}\r\n                onClose={onClose}\r\n            >\r\n                <ModalOverlay />\r\n                <ModalContent>\r\n                    <ModalHeader>Telpas informācija</ModalHeader>\r\n                    <ModalCloseButton />\r\n                    <form id=\"mainForm\">\r\n                        <ModalBody pb={6}>\r\n                            <FormControl>\r\n                                <FormLabel>ID</FormLabel>\r\n                                <Input id=\"idField\" ref={idRef} placeholder=\"Piemēram, 312\"/>\r\n                            </FormControl>\r\n\r\n                            <FormControl mt={4}>\r\n                                <FormLabel>Tips</FormLabel>\r\n                                <Select id=\"typeField\" placeholder=\"Izvēlies tipu\">\r\n                                    <option value=\"kabinets\">Kabinets</option>\r\n                                    <option value=\"laboratorija\">Laboratorija</option>\r\n                                    <option value=\"cits\">Cits</option>\r\n                                </Select>\r\n                            </FormControl>\r\n                        </ModalBody>\r\n\r\n                        <ModalFooter>\r\n                            <Button onClick={onClose} type=\"submit\" colorScheme=\"blue\" mr={3}>\r\n                                Saglabāt\r\n                            </Button>\r\n                            <Button onClick={onClose} id=\"cancelButton\">Atcelt</Button>\r\n                        </ModalFooter>\r\n                    </form>\r\n                </ModalContent>\r\n            </Modal>\r\n\r\n            <div id=\"bin-data-sent\" className=\"bin-data\"/>\r\n            <div id=\"bin-data-received-content\" className=\"bin-data\"/>\r\n            <MapContainer whenCreated={(mapInstance)=> { mapRef.current = mapInstance }} bounds={props.bounds} center={props.center} maxZoom={1} minZoom={-5} doubleClickZoom={false} crs={CRS.Simple}>\r\n                <LayersControl position=\"topright\" collapsed={false}>\r\n                    {/* layers + layer control */}\r\n                    <LayersControl.BaseLayer  checked name={props.theLayers[1][\"name\"]}>\r\n                        <LayerGroup ref={floors[0]}>\r\n\r\n                            <Polygon pathOptions={limeOptions} positions={polygon} />\r\n\r\n                            <ImageOverlay bounds={props.bounds} url={props.pathToImg + props.theLayers[1][\"imageName\"]} />\r\n                        </LayerGroup>\r\n                    </LayersControl.BaseLayer>\r\n                    <LayersControl.BaseLayer name={props.theLayers[2][\"name\"]}>\r\n                        <LayerGroup ref={floors[1]}>\r\n                            <ImageOverlay bounds={props.bounds} url={props.pathToImg + props.theLayers[2][\"imageName\"]} />\r\n                        </LayerGroup>\r\n                    </LayersControl.BaseLayer>\r\n                    <LayersControl.BaseLayer name={props.theLayers[3][\"name\"]}>\r\n                        <LayerGroup ref={floors[2]}>\r\n                            <ImageOverlay bounds={props.bounds} url={props.pathToImg + props.theLayers[3][\"imageName\"]} />\r\n                        </LayerGroup>\r\n                    </LayersControl.BaseLayer>\r\n                    <LayersControl.BaseLayer name={props.theLayers[4][\"name\"]}>\r\n                        <LayerGroup ref={floors[3]}>\r\n                            <ImageOverlay bounds={props.bounds} url={props.pathToImg + props.theLayers[4][\"imageName\"]} />\r\n                        </LayerGroup>\r\n                    </LayersControl.BaseLayer>\r\n                    <LayersControl.BaseLayer name={props.theLayers[5][\"name\"]}>\r\n                        <LayerGroup ref={floors[4]}>\r\n                            <ImageOverlay bounds={props.bounds} url={props.pathToImg + props.theLayers[5][\"imageName\"]} />\r\n                        </LayerGroup>\r\n                    </LayersControl.BaseLayer>\r\n                </LayersControl>\r\n            </MapContainer>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GeomanPage;\r\n","import { HashRouter, Switch, Route, Link } from 'react-router-dom'\r\nimport React, {Component} from \"react\";\r\nimport Home from './Components/Home';\r\nimport Search from './Components/Search';\r\nimport GeomanPage from './Components/GeomanPage';\r\nimport SearchInputField from './Components/SearchInput';\r\nimport {\r\n    Button,\r\n    Flex,\r\n    Box,\r\n    Spacer,\r\n    Image,\r\n    Center,\r\n    Text,\r\n    HStack,\r\n    VStack,\r\n    List,\r\n    ListIcon,\r\n    ListItem, Divider\r\n} from \"@chakra-ui/react\"\r\nimport 'leaflet/dist/leaflet.css';\r\nimport {ChevronLeftIcon, ChevronRightIcon, HamburgerIcon} from \"@chakra-ui/icons\";\r\nimport $ from \"jquery\";\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            searchTerm: \"\"\r\n        };\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    handleChange (e) {\r\n        this.setState(prevState => {\r\n                return {searchTerm: e.target.value}\r\n            }\r\n        );\r\n    }\r\n\r\n    render() {\r\n        // adjust img url\r\n        const baseUrl = window.location.origin;\r\n        const preFolderName = 'kartes/media/';\r\n        const pathToImg = baseUrl + '/' + preFolderName;\r\n\r\n        // map constants\r\n        const bounds = [[0,0], [1000, 1000]]\r\n        const center = [500,500]\r\n        const layers = {\r\n            0: {\r\n                name: \"0. stāvs\",\r\n                imageName: \"\"\r\n            },\r\n            1: {\r\n                name: \"1. stāvs\",\r\n                imageName: \"zm1.svg\"\r\n            },\r\n            2: {\r\n                name: \"2. stāvs\",\r\n                imageName: \"zm2.svg\"\r\n            },\r\n            3: {\r\n                name: \"3. stāvs\",\r\n                imageName: \"zm3.svg\"\r\n            },\r\n            4: {\r\n                name: \"4. stāvs\",\r\n                imageName: \"zm4.svg\"\r\n            },\r\n            5: {\r\n                name: \"5. stāvs\",\r\n                imageName: \"zm5.svg\"\r\n            },\r\n\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <HashRouter>\r\n                    <Flex p={4}>\r\n                        {/*<Box>*/}\r\n                            {/*<Image h={50} src={pathToImg + \"logo.png\"}  fallbackSrc=\"https://via.placeholder.com/150\" />*/}\r\n                        {/*</Box>*/}\r\n                        {/*<Spacer />*/}\r\n\r\n                        <Search />\r\n                    </Flex>\r\n\r\n                    <Switch>\r\n                        <Route exact path='/geoman' render={(props) => (<GeomanPage {...props} pathToImg={pathToImg} bounds={bounds} center={center} theLayers={layers} />)}/>\r\n                        <Route exact path='/search' render={(props) => (<Search {...props} pathToImg={pathToImg} bounds={bounds} center={center} theLayers={layers} />)}/>\r\n                        {/*<Route exact path='/header' render={(props) => (<Header {...props} pathToImg={pathToImg}/>)}/>*/}\r\n                        <Route exact path='/:id?' render={(props) => (<Home {...props} pathToImg={pathToImg} bounds={bounds} center={center} theLayers={layers} />)}/>\r\n                        <Route status={404}>\r\n                            <div>Page not found.</div>\r\n                        </Route>\r\n                    </Switch>\r\n\r\n\r\n                    <Link to=\"/\">\r\n                        <Button size=\"xs\" m={1} colorScheme=\"blue\">Home</Button>\r\n                    </Link>\r\n                    <Link to=\"/geoman\">\r\n                        <Button size=\"xs\" m={1} colorScheme=\"blue\">Geoman</Button>\r\n                    </Link>\r\n                    <Link to=\"/search\">\r\n                        <Button size=\"xs\" m={1} colorScheme=\"blue\">Search</Button>\r\n                    </Link>\r\n                    <Link to=\"/512\">\r\n                        <Button size=\"xs\" m={1} colorScheme=\"blue\">Search for #512</Button>\r\n                    </Link>\r\n                </HashRouter>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import { extendTheme } from \"@chakra-ui/react\";\n\nconst colors = {\n  primary: {\n    100: \"#E5FCF1\",\n    200: \"#27EF96\",\n    300: \"#10DE82\",\n    400: \"#0EBE6F\",\n    500: \"#0CA25F\",\n    600: \"#0A864F\",\n    700: \"#086F42\",\n    800: \"#075C37\",\n    900: \"#064C2E\"\n  }\n};\n\nconst customTheme = extendTheme({ colors });\n\nexport default customTheme;\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { ChakraProvider } from \"@chakra-ui/react\";\r\nimport './index.css';\r\n\r\nimport App from \"./App\";\r\nimport customTheme from \"./utils/theme\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <ChakraProvider theme={customTheme}>\r\n            <App />\r\n        </ChakraProvider>\r\n    </React.StrictMode>,\r\n    rootElement\r\n);\r\n"],"sourceRoot":""}