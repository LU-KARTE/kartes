{"version":3,"sources":["logo.svg","Home.js","Geoman.js","App.js","index.js"],"names":["Home","$","document","ready","Leaflet","L","map","crs","CRS","Simple","minZoom","bounds","baseMaps","imageOverlay","addTo","control","layers","fitBounds","id","API_KEY","BIN_ID_TO_RECEIVE","BIN_ID_TO_SEND","on","fg","featureGroup","eachLayer","layer","Polyline","Marker","Circle","CircleMarker","push","filter","pm","_pmTempLayer","findLayers","forEach","addLayer","GeoDataJSON","toGeoJSON","GeoDataJSONString","JSON","stringify","console","log","html","undefined","req","XMLHttpRequest","onreadystatechange","readyState","DONE","responseText","parse","open","setRequestHeader","send","generateGeoJson","each","this","dataFromBin","drawFromDB","stavs1","layerGroup","stavs2","stavs3","stavs4","stavs5","currentBaseLayer","e","1","2","3","4","5","collapsed","addControls","position","drawCircle","className","NotFound","App","colorScheme","basename","exact","path","component","Geoman","status","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.e9974e50.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import './App.css';\r\nimport React from 'react'\r\nimport $ from 'jquery'\r\n\r\nfunction Home () {\r\n    // script -- init map\r\n    $(document).ready( function() {\r\n        // yeah....\r\n        // eslint-disable-next-line no-undef\r\n        const Leaflet = L;\r\n        const preFolderName = '';\r\n        var map = Leaflet.map('map', {\r\n            crs: Leaflet.CRS.Simple,\r\n            minZoom: -5\r\n        });\r\n\r\n        var bounds = [[0, 0], [1000, 1000]];\r\n        var stavs1 = Leaflet.imageOverlay(preFolderName + 'zm1.svg', bounds).addTo(map);\r\n        var stavs2 = Leaflet.imageOverlay(preFolderName + 'zm2.svg', bounds).addTo(map);\r\n        var stavs3 = Leaflet.imageOverlay(preFolderName + 'zm3.svg', bounds).addTo(map);\r\n        var stavs4 = Leaflet.imageOverlay(preFolderName + 'zm4.svg', bounds).addTo(map);\r\n        var stavs5 = Leaflet.imageOverlay(preFolderName + 'zm5.svg', bounds).addTo(map);\r\n\r\n        var baseMaps = {\r\n            \"1\": stavs1,\r\n            \"2\": stavs2,\r\n            \"3\": stavs3,\r\n            \"4\": stavs4,\r\n            \"5\": stavs5\r\n        };\r\n\r\n        Leaflet.control.layers(baseMaps).addTo(map);\r\n\r\n        map.fitBounds(bounds);\r\n    });\r\n\r\n    return (<div id=\"map\"/>)\r\n}\r\n\r\nexport default Home;\r\n","import './App.css';\r\nimport React from 'react'\r\nimport $ from 'jquery'\r\n\r\nfunction Home () {\r\n    // script\r\n    $(document).ready(function() {\r\n        // json bin constants\r\n        let API_KEY = \"$2b$10$Yjdr9li351h.kPgEDCFee.R4ctCZ.TR7F/YiooA6Kerkqv60OuyQe\";\r\n        let BIN_ID_TO_RECEIVE = \"608d5bad8a409667ca023d89\";\r\n        let BIN_ID_TO_SEND = BIN_ID_TO_RECEIVE;\r\n\r\n        // yeah..\r\n        // eslint-disable-next-line no-undef\r\n        const Leaflet = L;\r\n\r\n        const preFolderName = '';\r\n\r\n        // event listeners\r\n        $( \"#button-geoJSON\" ).on( \"click\", function() {\r\n            generateGeoJson();\r\n        });\r\n\r\n        $( \"#button-clear\" ).on( \"click\", function() {\r\n            clearBinsData();\r\n        });\r\n\r\n        $( \"#button-draw\" ).on( \"click\", function() {\r\n            drawFromDB();\r\n        });\r\n\r\n        // receives data from json bin, assigns it to dataFromBin, (and draws it -- currently not implemented)\r\n        function drawFromDB() {\r\n            let dataFromBin = null;\r\n            let req = new XMLHttpRequest();\r\n\r\n            // receive data, assign it\r\n            req.onreadystatechange = () => {\r\n                if (req.readyState === XMLHttpRequest.DONE) {\r\n                    // response\r\n                    dataFromBin = req.responseText;\r\n\r\n                    // drawing\r\n                    $(\"#bin-data-received-content\").html(\"<b>Data received: </b><pre>\" + JSON.stringify(JSON.parse(dataFromBin), undefined, 2) + \"</pre>\"); // pre for pretty printing\r\n                    // IMPLEMENT DRAWING LOGIC HERE...\r\n                    // DATA IS IN DataFromBin...\r\n                }\r\n            };\r\n\r\n            req.open(\"GET\", \"https://api.jsonbin.io/v3/b/\"+BIN_ID_TO_RECEIVE+\"/latest\", true);\r\n            req.setRequestHeader(\"X-Master-Key\", API_KEY);\r\n            req.send();\r\n        }\r\n\r\n        var map = Leaflet.map('map', {\r\n            crs: Leaflet.CRS.Simple,\r\n            minZoom: -5\r\n        })\r\n\r\n        var bounds = [[0, 0], [1000, 1000]];\r\n\r\n        map.fitBounds(bounds);\r\n        var stavs1 = Leaflet.layerGroup([Leaflet.imageOverlay(preFolderName + 'zm1.svg', bounds)]);\r\n        var stavs2 = Leaflet.layerGroup([Leaflet.imageOverlay(preFolderName + 'zm2.svg', bounds)]);\r\n        var stavs3 = Leaflet.layerGroup([Leaflet.imageOverlay(preFolderName + 'zm3.svg', bounds)]);\r\n        var stavs4 = Leaflet.layerGroup([Leaflet.imageOverlay(preFolderName + 'zm4.svg', bounds)]);\r\n        var stavs5 = Leaflet.layerGroup([Leaflet.imageOverlay(preFolderName + 'zm5.svg', bounds)]);\r\n\r\n        var currentBaseLayer = stavs1.addTo(map);\r\n\r\n        map.on('pm:create', function (e) {\r\n            currentBaseLayer.addLayer(e.layer);\r\n        }).on('baselayerchange', function (e) {\r\n            currentBaseLayer = e.layer;\r\n        })\r\n\r\n        Leaflet.control.layers({1: stavs1, 2: stavs2, 3: stavs3, 4: stavs4, 5: stavs5}, null, {collapsed: false}).addTo(map)\r\n\r\n        map.on('pm:create', function (e) {\r\n            currentBaseLayer.addLayer(e.layer);\r\n        }).on('baselayerchange', function (e) {\r\n            currentBaseLayer = e.layer;\r\n        })\r\n\r\n        map.pm.addControls({\r\n            position: 'topleft',\r\n            drawCircle: false,\r\n        });\r\n\r\n        function generateGeoJson() {\r\n            var fg = Leaflet.featureGroup();\r\n            var layers = findLayers(map);\r\n            layers.forEach(function (layer) {\r\n                fg.addLayer(layer);\r\n            });\r\n\r\n            let GeoDataJSON = fg.toGeoJSON();\r\n            let GeoDataJSONString = JSON.stringify(GeoDataJSON);\r\n\r\n            console.log(GeoDataJSON);\r\n\r\n            // send output to jsonbin (update bin)\r\n            $(\"#bin-data-sent\").html(\"<b>Sent data to bin: </b><pre>\" + JSON.stringify(GeoDataJSON, undefined, 2) + \"</pre>\"); // pre for pretty printing\r\n            let req = new XMLHttpRequest();\r\n\r\n            req.onreadystatechange = () => {\r\n                if (req.readyState === XMLHttpRequest.DONE) {\r\n\r\n                    // puts response from the bin which includes bin's content + metadata\r\n                    let responseText = req.responseText; // includes also metadata about the bin\r\n                    let binsData = JSON.stringify(JSON.parse(responseText)[\"record\"]);\r\n                    let binsMetadata = JSON.stringify(JSON.parse(responseText)[\"metadata\"]);\r\n                    // $(\"#bin-data-received-content\").html(\"<b>Bin's data received:</b> \" + binsData);\r\n                    // $(\"#bin-data-received-metadata\").html(\"<b>Bin's metadata received:</b> \" + binsMetadata);\r\n\r\n                }\r\n            };\r\n\r\n            req.open(\"PUT\", \"https://api.jsonbin.io/v3/b/\" + BIN_ID_TO_SEND, true);\r\n            req.setRequestHeader(\"Content-Type\", \"application/json\");\r\n            req.setRequestHeader(\"X-Master-Key\", API_KEY);\r\n            req.send(GeoDataJSONString);\r\n        }\r\n\r\n        // clears .bin-data divs\r\n        function clearBinsData() {\r\n            $(\".bin-data\").each(function () {\r\n                $(this).html(\"\");\r\n            });\r\n        }\r\n\r\n\r\n        function findLayers(map) {\r\n            var layers = [];\r\n            map.eachLayer(layer => {\r\n                if (\r\n                    layer instanceof Leaflet.Polyline ||\r\n                    layer instanceof Leaflet.Marker ||\r\n                    layer instanceof Leaflet.Circle ||\r\n                    layer instanceof Leaflet.CircleMarker\r\n                ) {\r\n                    layers.push(layer);\r\n                }\r\n            });\r\n\r\n            // filter out layers that don't have the leaflet-geoman instance\r\n            layers = layers.filter(layer => !!layer.pm);\r\n\r\n            // filter out everything thats leaflet-geoman specific temporary stuff\r\n            layers = layers.filter(layer => !layer._pmTempLayer);\r\n            return layers;\r\n\r\n        }\r\n    });\r\n\r\n    // return\r\n    return (\r\n        <div id=\"geoman-wrapper\">\r\n            <button id=\"button-geoJSON\"> GeoJSON </button>\r\n            <button id=\"button-clear\"> Clear printed data </button>\r\n            <button id=\"button-draw\"> Refresh data and draw </button>\r\n            <div id=\"bin-data-sent\" className=\"bin-data\"></div>\r\n            <div id=\"bin-data-received-content\" className=\"bin-data\"></div>\r\n            <div id=\"bin-data-received-metadata\" className=\"bin-data\"></div>\r\n            <div id=\"map\"></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home;\r\n","import logo from './logo.svg';\nimport './App.css';\nimport { HashRouter, Switch, Route, Link } from 'react-router-dom'\nimport React, { useScript, Component } from \"react\";\nimport Home from './Home';\nimport Geoman from './Geoman';\nimport { ChakraProvider, Button} from \"@chakra-ui/react\"\n\nfunction NotFound() {\n    return(\n        <div>Error 404</div>\n    )\n}\nfunction App() {\n    return (\n    <>\n        <ChakraProvider>\n            <Button colorScheme=\"blue\">Chakra UI test</Button>\n        </ChakraProvider>\n      <HashRouter basename='/'>\n          <Switch>\n              <Route exact path='/geoman' component={Geoman}/>\n              <Route exact path='/' component={Home}/>\n              <Route component={NotFound} status={404}/>\n          </Switch>\n      </HashRouter>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n// import reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n// reportWebVitals();\r\n"],"sourceRoot":""}